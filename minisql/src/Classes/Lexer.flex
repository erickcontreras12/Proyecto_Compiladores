package Classes;
import static Classes.Token.*;
%%
%class Lexer
%type Token
%line
%column
L = [a-zA-Z_]
D = [0-9]
BLANK = [ ,\t,\r,\n]
%{
public String lexeme;
public int getLine() { return yyline; }
public int getColumn() { return yycolumn; }
%}
%%
"," {lexeme=yytext(); return COMA;}
{BLANK} {/*Ignore*/}
"\-\-" [^\n]*  {/*Ignore*/}
"/*"~("*/") | "/*" (""+ "*/") {/*Ignore*/}
"/*"[^*\/]* {lexeme=yytext(); return COMENTARIO_M;}
("0"|"1"|"NULL") {lexeme=yytext(); return BIT;}
"."{D}+(("E"|"e"|"E+"|"E-"|"e+"|"e-"){D}+)?  {lexeme=yytext(); return ERROR_F;}
{D}+"."{D}*(("E"|"e"|"E+"|"E-"|"e+"|"e-"){D}+)? {lexeme=yytext(); return FLOAT;}
("+"|"-")?{D}+ {lexeme=yytext(); return INT;}
"\'"[^\'\n]*"\'"|"\'\'" {lexeme=yytext(); return STRING;}
SELECT {lexeme=yytext(); return SELECT;}
INSERT {lexeme=yytext(); return INSERT;}
DELETE {lexeme=yytext(); return DELETE;}
UPDATE {lexeme=yytext(); return UPDATE;}
CREATE {lexeme=yytext(); return CREATE;}
ALTER {lexeme=yytext(); return ALTER;}
TRUNCATE {lexeme=yytext(); return TRUNCATE;}
DROP {lexeme=yytext(); return DROP;}
ADD|EXTERNAL|PROCEDURE|ALL|FETCH|PUBLIC|FILE|RAISERROR|AND|FILLFACTOR|READ|ANY|FOR|READTEXT|AS|FOREIGN|RECONFIGURE|ASC|
FREETEXT|REFERENCES|AUTHORIZATION|FREETEXTTABLE|REPLICATION|BACKUP|FROM|RESTORE|BEGIN|FULL|RESTRICT|BETWEEN|FUNCTION|RETURN|
BREAK|GOTO|REVERT|BROWSE|GRANT|REVOKE|BULK|GROUP|RIGHT|BY|HAVING|ROLLBACK|CASCADE|HOLDLOCK|ROWCOUNT|CASE|IDENTITY|ROWGUIDCOL|
CHECK|IDENTITY_INSERT|RULE|CHECKPOINT|IDENTITYCOL|SAVE|CLOSE|IF	SCHEMA|CLUSTERED|IN|SECURITYAUDIT|COALESCE|INDEX|COLLATE|
INNER|SEMANTICKEYPHRASETABLE|COLUMN|SEMANTICSIMILARITYDETAILSTABLE|COMMIT|INTERSECT|SEMANTICSIMILARITYTABLE|COMPUTE|INTO|
SESSION_USER|CONSTRAINT|IS|SET|CONTAINS|JOIN|SETUSER|CONTAINSTABLE|KEY|SHUTDOWN|CONTINUE|KILL|SOME|CONVERT|LEFT|STATISTICS|
LIKE|SYSTEM_USER|CROSS|LINENO|TABLE|CURRENT|LOAD|TABLESAMPLE|CURRENT_DATE|MERGE|TEXTSIZE|CURRENT_TIME|NATIONA|THEN|CURRENT_TIMESTAMP|
NOCHECK|TO|CURRENT_USER|NONCLUSTERED|TOP|CURSOR|NOT|TRAN|DATABASE|NULL|TRANSACTION|DBCC|NULLIF|TRIGGER|DEALLOCATE|OF|
DECLARE|OFF|TRY_CONVERT|DEFAULT|OFFSETS|TSEQUAL|ON|UNION|DENY|OPEN|UNIQUE|DESC|OPENDATASOURCE|UNPIVOT|DISK|OPENQUERY|DISTINCT|
OPENROWSET|UPDATETEXT|DISTRIBUTED|OPENXML|USE|DOUBLE|OPTION|USER|OR|VALUES|DUMP|ORDER|
VARYING|ELSE|OUTER|VIEW|END|OVER|WAITFOR|ERRLVL|PERCENT|WHEN|ESCAPE|PIVOT|WHERE|EXCEPT|PLAN|WHILE|EXEC|PRECISION|WITH|
EXECUTE|PRIMARY|WITHIN|GROUP|EXISTS|PRINT|WRITETEXT|EXIT|PROC1ABSOLUTE|XEC|OVERLAPS|ACTION1EXECUTE1PAD1ADA1EXISTS1PARTIAL|ADD|
EXTERNAL|PASCAL|ALL|EXTRACT|POSITION|ALLOCATE|FALSE|PRECISION|FETCH|PREPARE|AND|FIRST|PRESERVE|ANY|FLOAT|PRIMARY|ARE|FOR|
PRIOR|AS|FOREIGN|PRIVILEGES|ASC|FORTRAN|PROCEDURE|ASSERTION|FOUND|PUBLIC|AT|FROM|READ|AUTHORIZATION|FULL|REAL|AVG|GET|REFERENCES|
BEGIN|GLOBAL|RELATIVE|BETWEEN|GO|RESTRICT|BIT|GOTO|REVOKE|BIT_LENGTH|GRANT|RIGHT|BOTH|GROUP|ROLLBACK|BY|HAVING|ROWS|CASCADE|HOUR|
SCHEMA|CASCADED|IDENTITY|SCROLL|CASE|IMMEDIATE|SECOND|CAST|IN|SECTION|CATALOG|INCLUDE|CHAR|INDEX|SESSION|CHAR_LENGTH|INDICATOR|
SESSION_USER|CHARACTER|INITIALLY|SET|CHARACTER_LENGTH|INNER|SIZE|CHECK|INPUT|SMALLINT|CLOSE|INSENSITIVE|SOME|COALESCE|INSERT|SPACE|
COLLATE|INT|SQL|COLLATION|INTEGER|SQLCA|COLUMN|INTERSECT|SQLCODE|COMMIT|INTERVAL|SQLERROR|CONNECT|INTO|SQLSTATE|CONNECTION|IS|
SQLWARNING|CONSTRAINT|ISOLATION|SUBSTRING|CONSTRAINTS|JOIN|SUM|CONTINUE|KEY|SYSTEM_USER|CONVERT|LANGUAGE|TABLE|CORRESPONDING|
LAST|TEMPORARY|COUNT|LEADING|THEN|LEFT|TIME|CROSS|LEVEL|TIMESTAMP|CURRENT|LIKE|TIMEZONE_HOUR|CURRENT_DATE|LOCAL|
TIMEZONE_MINUTE|CURRENT_TIME|LOWER|TO|CURRENT_TIMESTAMP|MATCH|TRAILING|CURRENT_USER|MAX|TRANSACTION|CURSOR|MIN|TRANSLATE|DATE|
MINUTE|TRANSLATION|DAY|MODULE|TRIM|DEALLOCATE|MONTH|TRUE|DEC|NAMES|UNION|DECIMAL|NATIONAL|UNIQUE|DECLARE|NATURAL|UNKNOWN|DEFAULT|
NCHAR|UPDATE|DEFERRABLE	NEXT|UPPER|DEFERRED|NO|USAGE|DELETE|NONE|USER|DESC|NOT|USING|DESCRIBE|NULL|VALUE|DESCRIPTOR|NULLIF|VALUES|
DIAGNOSTICS|NUMERIC|VARCHAR|DISCONNECT|OCTET_LENGTH|VARYING|DISTINCT|OF|VIEW|DOMAIN|ON|WHEN|DOUBLE|ONLY|WHENEVER|OPEN|
WHERE|ELSE|OPTION|WITH|END|OR|WORK|END-EXEC|ORDER|WRITE|ESCAPE|OUTER|YEAR|EXCEPT|OUTPUT|ZONE|EXCEPTION {lexeme=yytext(); return PALABRA_RESERVADA;}
{L}({L}|{D})* {lexeme=yytext(); return ID;}
"+" {lexeme=yytext(); return MAS;}
"-" {lexeme=yytext(); return MENOS;}
"*" {lexeme=yytext(); return MULT;}
"/" {lexeme=yytext(); return DIV;}
"%" {lexeme=yytext(); return RES;}
"<" {lexeme=yytext(); return MENOR;}
"<=" {lexeme=yytext(); return MENOR_O_IGUAL;}
">" {lexeme=yytext(); return MAYOR;}
">=" {lexeme=yytext(); return MAYOR_O_IGUAL;}
"=" {lexeme=yytext(); return IGUAL;}
"==" {lexeme=yytext(); return IGUAL_A;}
"!=" {lexeme=yytext(); return DIFERENTE;}
"&&" {lexeme=yytext(); return AND;}
"||" {lexeme=yytext(); return OR;}
"!" {lexeme=yytext(); return NOT;}
";" {lexeme=yytext(); return PUNTO_COMA;}
"." {lexeme=yytext(); return PUNTO;}
"[" {lexeme=yytext(); return CORCHETE_ABIERTO;}
"]" {lexeme=yytext(); return CORCHETE_CERRADO;}
"(" {lexeme=yytext(); return PARENTESIS_ABIERTO;}
")" {lexeme=yytext(); return PARENTESIS_CERRADO;}
"{" {lexeme=yytext(); return LLAVE_ABIERTO;}
"}" {lexeme=yytext(); return LLAVE_CERRADO;}
"[]" {lexeme=yytext(); return CORCHETES;}
"()" {lexeme=yytext(); return PARENTESIS;}
"{}" {lexeme=yytext(); return LLAVES;}
"@" {lexeme=yytext(); return ARROBA;}
"#" {lexeme=yytext(); return NUMERAL;}
"##" {lexeme=yytext(); return DOBLE_NUMERAL;}
. {lexeme=yytext(); return ERROR;}

