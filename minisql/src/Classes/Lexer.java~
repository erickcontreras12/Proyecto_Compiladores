/* The following code was generated by JFlex 1.7.0 */

package Classes;
import static Classes.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/eecon/OneDrive/Escritorio/URL/2019/Segundo ciclo/Compis/Proyecto_Compiladores/minisql/src/Classes/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\1\73\1\73\1\3\22\0\1\3\1\61\1\0"+
    "\1\72\1\0\1\55\1\62\1\22\1\65\1\66\1\10\1\21\1\4"+
    "\1\5\1\16\1\7\1\14\1\15\1\47\7\2\1\0\1\64\1\56"+
    "\1\57\1\60\1\0\1\71\1\32\1\36\1\24\1\33\1\17\1\34"+
    "\1\45\1\43\1\26\1\51\1\50\1\13\1\41\1\11\1\30\1\35"+
    "\1\46\1\27\1\23\1\25\1\12\1\31\1\40\1\37\1\42\1\52"+
    "\1\53\1\0\1\54\1\0\1\44\1\0\4\1\1\20\25\1\1\67"+
    "\1\63\1\70\7\0\1\73\u1fa2\0\1\73\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\3\2\1\11\1\12\1\2\1\13\1\1\25\2"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\1"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\3\1\4\1\33\2\2\1\34\10\2\1\35\5\2"+
    "\1\0\1\36\26\2\1\34\2\2\2\34\1\2\1\37"+
    "\6\2\1\40\2\2\1\41\1\2\1\34\6\2\1\42"+
    "\1\2\1\34\36\2\1\43\20\2\1\44\4\2\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\3\0\4\2\1\57\6\2\1\34\15\2"+
    "\1\0\1\34\7\2\1\60\3\2\1\61\10\2\1\34"+
    "\26\2\1\62\5\2\1\63\31\2\1\34\5\2\1\64"+
    "\1\2\1\65\2\2\1\66\1\2\1\67\1\70\3\2"+
    "\1\34\21\2\1\71\13\2\1\72\11\2\1\73\2\2"+
    "\1\74\7\2\1\75\3\2\1\32\1\0\1\76\5\2"+
    "\1\77\3\2\1\100\4\2\1\101\1\2\1\102\2\2"+
    "\1\35\2\0\2\2\1\34\46\2\1\103\1\104\2\2"+
    "\1\105\2\2\1\34\7\2\1\106\15\2\1\107\1\34"+
    "\13\2\1\34\1\2\1\34\1\2\1\110\11\2\1\111"+
    "\11\2\1\112\1\113\2\2\1\114\3\2\1\115\15\2"+
    "\1\116\2\2\1\34\7\2\1\117\12\2\1\120\1\2"+
    "\1\0\30\2\1\121\6\2\1\122\10\2\1\123\1\124"+
    "\5\2\1\125\2\2\1\126\11\2\1\127\3\2\1\130"+
    "\1\2\1\131\6\2\1\34\3\2\1\132\16\2\1\133"+
    "\16\2\1\134\1\135\3\2\1\136\4\2\1\137\1\140"+
    "\1\141\1\0\1\34\1\142\1\143\11\2\1\144\3\2"+
    "\1\145\14\2\1\146\16\2\1\147\4\2\1\150\25\2"+
    "\1\151\1\152\1\153\1\2\1\34\1\2\1\0\1\34"+
    "\5\2\1\154\4\2\1\34\10\2\1\155\4\2\1\156"+
    "\3\2\1\157\3\2\1\160\1\2\1\161\2\2\1\162"+
    "\3\2\1\163\1\164\1\2\1\165\2\2\1\166\2\2"+
    "\1\167\1\34\7\2\1\34\4\2\1\170\1\2\1\171"+
    "\10\2\1\172\1\2\1\173\1\174\2\2\1\175\6\2"+
    "\1\176\2\2\1\34\1\177\4\2\1\200\5\2\1\201"+
    "\7\2\1\202\3\2\1\203\21\2\1\204\3\2\1\34"+
    "\5\2\1\205\10\2\1\206\1\207\41\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[934];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\74\0\74\0\360\0\u012c"+
    "\0\74\0\u0168\0\u01a4\0\u01e0\0\264\0\u021c\0\u0258\0\u0294"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\74"+
    "\0\74\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\74"+
    "\0\u099c\0\74\0\u09d8\0\74\0\74\0\u0a14\0\u0a50\0\u0294"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u02d0\0\74\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\170\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\170\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\170\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u2670\0\u26ac"+
    "\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\170\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30"+
    "\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\170\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94"+
    "\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\170"+
    "\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8"+
    "\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98"+
    "\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78"+
    "\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58"+
    "\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\170\0\u3fc0\0\u3ffc"+
    "\0\u4038\0\u4074\0\170\0\u40b0\0\170\0\170\0\u40ec\0\u4128"+
    "\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308"+
    "\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8"+
    "\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c\0\u46c8"+
    "\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8"+
    "\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88"+
    "\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\170\0\u4bb4\0\u4bf0\0\u4c2c"+
    "\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\170\0\u4d58\0\u4d94\0\74"+
    "\0\u4dd0\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38"+
    "\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\170\0\u5064\0\u50a0\0\u50dc"+
    "\0\u5118\0\170\0\u5154\0\170\0\u5190\0\u51cc\0\u5208\0\u5208"+
    "\0\u5244\0\u5280\0\u52bc\0\u4b00\0\u52f8\0\u5334\0\u5370\0\u53ac"+
    "\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8\0\u5514\0\u5550\0\u558c"+
    "\0\u55c8\0\u5604\0\u5640\0\u567c\0\u56b8\0\u56f4\0\u5730\0\u576c"+
    "\0\u57a8\0\u57e4\0\u5820\0\u4f74\0\u585c\0\u5898\0\u58d4\0\u5910"+
    "\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c\0\u4b00\0\u5a78\0\u5ab4"+
    "\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58\0\u5c94"+
    "\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74"+
    "\0\u5eb0\0\170\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc\0\u6018"+
    "\0\u6054\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc\0\170"+
    "\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u639c"+
    "\0\u63d8\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c"+
    "\0\170\0\u65b8\0\u65f4\0\u6630\0\u666c\0\u66a8\0\u66e4\0\u6720"+
    "\0\u675c\0\u6798\0\u67d4\0\u6810\0\u684c\0\u6888\0\u68c4\0\u6900"+
    "\0\u693c\0\u6978\0\u69b4\0\u69f0\0\170\0\u6a2c\0\u6a68\0\u6aa4"+
    "\0\170\0\u6ae0\0\u6b1c\0\u6b58\0\170\0\u6b94\0\u6bd0\0\u6c0c"+
    "\0\u6c48\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38\0\u6d74\0\u6db0\0\u6dec"+
    "\0\u6e28\0\u6e64\0\u486c\0\u6ea0\0\u6edc\0\u6f18\0\u6f54\0\u6f90"+
    "\0\u6fcc\0\u7008\0\u7044\0\u7080\0\u70bc\0\170\0\u70f8\0\u7134"+
    "\0\u7170\0\u71ac\0\u71e8\0\u7224\0\u7260\0\u729c\0\u72d8\0\u7314"+
    "\0\170\0\u7350\0\u738c\0\u73c8\0\u7404\0\u7440\0\u747c\0\u74b8"+
    "\0\u74f4\0\u7530\0\u756c\0\u75a8\0\u75e4\0\u7620\0\u765c\0\u7698"+
    "\0\u76d4\0\u7710\0\u774c\0\u7788\0\u77c4\0\u7800\0\u783c\0\u7878"+
    "\0\u78b4\0\u78f0\0\u792c\0\170\0\u7968\0\u79a4\0\u79e0\0\u7a1c"+
    "\0\u7a58\0\u7a94\0\u7ad0\0\u7b0c\0\u7b48\0\u7b84\0\u7bc0\0\u7bfc"+
    "\0\u7c38\0\u7c74\0\u7cb0\0\u7cec\0\170\0\u7d28\0\u7d64\0\u7da0"+
    "\0\u7ddc\0\u7e18\0\170\0\u7e54\0\u7e90\0\170\0\u7ecc\0\u7f08"+
    "\0\u7f44\0\u7f80\0\u7fbc\0\u7ff8\0\u8034\0\u8070\0\u80ac\0\170"+
    "\0\u80e8\0\u8124\0\u8160\0\170\0\u48a8\0\170\0\u819c\0\u81d8"+
    "\0\u8214\0\u8250\0\u828c\0\u82c8\0\u8304\0\u8340\0\u837c\0\u83b8"+
    "\0\170\0\u83f4\0\u8430\0\u846c\0\u84a8\0\u3ffc\0\u84e4\0\u8520"+
    "\0\u855c\0\u8598\0\u85d4\0\u8610\0\u864c\0\u8688\0\u86c4\0\170"+
    "\0\u8700\0\u873c\0\u8778\0\u87b4\0\u87f0\0\u882c\0\u8868\0\u88a4"+
    "\0\u88e0\0\u891c\0\u8958\0\u8994\0\u89d0\0\u8a0c\0\170\0\170"+
    "\0\u8a48\0\u8a84\0\u8ac0\0\170\0\u8afc\0\u8b38\0\u8b74\0\u8bb0"+
    "\0\170\0\170\0\u61f8\0\u8bec\0\u3ed0\0\170\0\170\0\u8c28"+
    "\0\u8c64\0\u8ca0\0\u8cdc\0\u8d18\0\u8d54\0\u8d90\0\u8dcc\0\u8e08"+
    "\0\170\0\u8e44\0\u8e80\0\u8ebc\0\170\0\u8ef8\0\u8f34\0\u8f70"+
    "\0\u8fac\0\u8fe8\0\u9024\0\u9060\0\u909c\0\u90d8\0\u9114\0\u9150"+
    "\0\u918c\0\170\0\u91c8\0\u9204\0\u9240\0\u927c\0\u92b8\0\u92f4"+
    "\0\u9330\0\u936c\0\u93a8\0\u93e4\0\u9420\0\u945c\0\u9498\0\u94d4"+
    "\0\170\0\u9510\0\u954c\0\u9588\0\u95c4\0\170\0\u9600\0\u963c"+
    "\0\u9678\0\u96b4\0\u96f0\0\u972c\0\u9768\0\u97a4\0\u97e0\0\u981c"+
    "\0\u9858\0\u9894\0\u98d0\0\u990c\0\u9948\0\u9984\0\u99c0\0\u99fc"+
    "\0\u9a38\0\u9a74\0\u9ab0\0\170\0\170\0\170\0\u9aec\0\u4d58"+
    "\0\u9b28\0\u9b64\0\u8d54\0\u9ba0\0\u9bdc\0\u9c18\0\u9c54\0\u2f94"+
    "\0\u9c90\0\u9ccc\0\u9d08\0\u9d44\0\u9d80\0\u2c10\0\u9dbc\0\u9df8"+
    "\0\u9e34\0\u9e70\0\u9eac\0\u9ee8\0\u9f24\0\u9f60\0\170\0\u16f8"+
    "\0\u9f9c\0\u9fd8\0\ua014\0\170\0\ua050\0\ua08c\0\ua0c8\0\170"+
    "\0\ua104\0\ua140\0\ua17c\0\170\0\ua1b8\0\ua1f4\0\ua230\0\ua26c"+
    "\0\170\0\ua2a8\0\ua2e4\0\ua320\0\170\0\170\0\ua35c\0\170"+
    "\0\ua398\0\ua3d4\0\170\0\ua410\0\ua44c\0\170\0\74\0\ua488"+
    "\0\ua4c4\0\ua500\0\ua53c\0\ua578\0\ua5b4\0\ua5f0\0\ua62c\0\ua668"+
    "\0\ua6a4\0\ua6e0\0\ua71c\0\170\0\ua758\0\ua794\0\ua7d0\0\ua80c"+
    "\0\ua848\0\ua884\0\ua8c0\0\ua8fc\0\ua938\0\ua974\0\170\0\ua9b0"+
    "\0\ua9ec\0\170\0\uaa28\0\uaa64\0\170\0\uaaa0\0\uaadc\0\uab18"+
    "\0\uab54\0\uab90\0\uabcc\0\170\0\uac08\0\uac44\0\u48a8\0\170"+
    "\0\uac80\0\uacbc\0\uacf8\0\uad34\0\170\0\uad70\0\uadac\0\uade8"+
    "\0\uae24\0\uae60\0\170\0\uae9c\0\uaed8\0\uaf14\0\uaf50\0\uaf8c"+
    "\0\uafc8\0\ub004\0\u4f74\0\ub040\0\ub07c\0\ub0b8\0\170\0\ub0f4"+
    "\0\ub130\0\ub16c\0\ub1a8\0\ub1e4\0\ub220\0\ub25c\0\ub298\0\ub2d4"+
    "\0\ub310\0\ub34c\0\ub388\0\ub3c4\0\ub400\0\ub43c\0\ub478\0\ub4b4"+
    "\0\170\0\ub4f0\0\ub52c\0\ub568\0\ub5a4\0\ub5e0\0\ub61c\0\ub658"+
    "\0\ub694\0\ub6d0\0\170\0\ub70c\0\ub748\0\ub784\0\ub7c0\0\ub7fc"+
    "\0\ub838\0\ub874\0\ub8b0\0\170\0\170\0\ub8ec\0\ub928\0\ub964"+
    "\0\ub9a0\0\ub9dc\0\uba18\0\uba54\0\ua62c\0\uba90\0\ubacc\0\ubb08"+
    "\0\ubb44\0\ubb80\0\ubbbc\0\ubbf8\0\ubc34\0\ubc70\0\ubcac\0\ubce8"+
    "\0\ubd24\0\ubd60\0\ubd9c\0\ubdd8\0\ube14\0\ube50\0\ube8c\0\ubec8"+
    "\0\ubf04\0\ubf40\0\ubf7c\0\ubfb8\0\ubff4\0\uc030";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[934];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\2\15\1\16\1\17\1\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\2\1\43\1\3\1\4\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\76\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\30\3\23\0\1\4\11\0\2\4\1\67\30\0"+
    "\1\4\26\0\1\70\2\0\1\71\6\0\2\70\31\0"+
    "\1\70\34\0\1\72\64\0\2\3\6\0\1\3\1\73"+
    "\3\3\1\0\2\3\2\0\1\3\1\74\3\3\1\75"+
    "\1\3\1\76\20\3\22\0\2\3\6\0\1\77\4\3"+
    "\1\0\2\3\2\0\1\100\11\3\1\101\15\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\102\1\3\2\0\3\3"+
    "\1\103\1\3\1\104\1\3\1\105\20\3\23\0\1\106"+
    "\11\0\2\106\31\0\1\106\25\0\2\3\6\0\1\107"+
    "\1\3\1\110\2\3\1\0\2\3\2\0\1\111\3\3"+
    "\1\112\7\3\1\113\13\3\23\0\1\70\11\0\2\70"+
    "\31\0\1\70\24\0\6\114\1\0\13\114\1\115\51\114"+
    "\1\0\2\3\6\0\1\3\1\116\3\3\1\0\1\117"+
    "\1\3\2\0\1\3\1\120\1\121\1\122\1\3\1\123"+
    "\1\3\1\124\2\3\1\125\3\3\1\126\1\127\1\130"+
    "\2\3\1\131\4\3\22\0\2\3\6\0\1\3\1\132"+
    "\1\133\2\3\1\0\2\3\2\0\4\3\1\134\1\135"+
    "\1\3\1\136\10\3\1\137\7\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\140\1\3\2\0\1\141\2\3\1\142"+
    "\1\143\1\144\1\3\1\145\10\3\1\146\7\3\22\0"+
    "\2\3\6\0\1\147\4\3\1\0\2\3\2\0\1\150"+
    "\7\3\1\151\1\152\4\3\1\153\11\3\22\0\2\3"+
    "\6\0\1\3\1\154\3\3\1\0\1\155\1\3\2\0"+
    "\3\3\1\156\1\3\1\157\1\3\1\160\20\3\22\0"+
    "\2\3\6\0\1\161\1\162\3\3\1\0\2\3\2\0"+
    "\1\3\1\163\2\3\1\164\1\3\1\165\2\3\1\166"+
    "\1\167\15\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\170\3\3\1\171\20\3\22\0\2\3"+
    "\6\0\1\172\1\173\1\174\2\3\1\0\2\3\2\0"+
    "\1\175\1\176\1\177\1\3\1\200\1\3\1\201\1\3"+
    "\1\202\17\3\22\0\2\3\6\0\1\3\1\203\3\3"+
    "\1\0\1\204\1\3\2\0\3\3\1\205\1\206\1\207"+
    "\1\3\1\210\3\3\1\211\14\3\22\0\2\3\6\0"+
    "\1\3\1\212\1\213\2\3\1\0\1\214\1\3\2\0"+
    "\3\3\1\215\1\216\1\217\1\3\1\220\20\3\22\0"+
    "\2\3\6\0\1\3\1\221\1\222\2\3\1\0\1\223"+
    "\1\3\2\0\3\3\1\224\1\225\1\226\1\3\1\227"+
    "\20\3\22\0\2\3\6\0\1\3\1\230\3\3\1\0"+
    "\1\231\1\3\2\0\3\3\1\232\1\233\1\234\1\3"+
    "\1\235\7\3\1\236\10\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\237\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\3\3\1\240\1\241\1\242"+
    "\1\3\1\243\10\3\1\244\7\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\245\1\3\2\0\3\3\1\246\1\3"+
    "\1\247\1\3\1\250\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\251\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\5\3\1\252\1\3\1\253"+
    "\20\3\22\0\2\3\6\0\2\3\1\254\2\3\1\0"+
    "\1\255\1\3\2\0\4\3\1\256\1\257\22\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\260\1\3\2\0\3\3"+
    "\1\261\24\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\262\22\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\5\3\1\263\22\3\22\0\1\264"+
    "\7\0\3\264\3\0\2\264\2\0\21\264\1\0\2\264"+
    "\1\0\3\264\1\0\1\265\76\0\1\266\73\0\1\267"+
    "\73\0\1\270\73\0\1\271\76\0\1\272\74\0\1\273"+
    "\76\0\1\274\75\0\1\275\75\0\1\276\3\0\1\67"+
    "\11\0\2\67\1\0\2\277\26\0\1\67\24\0\6\71"+
    "\1\0\65\71\7\72\1\300\1\301\63\72\1\0\2\3"+
    "\6\0\2\3\1\302\2\3\1\0\2\3\2\0\16\3"+
    "\1\303\11\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\20\3\1\251\7\3\22\0\2\3\6\0\1\304"+
    "\4\3\1\0\2\3\2\0\1\3\1\305\1\306\25\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\307\13\3\1\310\11\3\22\0\2\3\6\0\1\3"+
    "\1\311\3\3\1\0\2\3\2\0\3\3\1\312\6\3"+
    "\1\313\12\3\1\314\2\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\315\1\3\2\0\3\3\1\316\3\3\1\317"+
    "\20\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\10\3\1\320\1\3\1\321\15\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\6\3\1\322\1\323\1\3"+
    "\1\324\16\3\22\0\2\3\6\0\1\325\4\3\1\0"+
    "\2\3\2\0\25\3\1\326\2\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\3\1\327\5\3\1\330"+
    "\5\3\1\321\4\3\1\331\5\3\22\0\2\3\6\0"+
    "\1\332\4\3\1\0\2\3\2\0\1\255\27\3\23\0"+
    "\1\106\11\0\2\106\1\0\2\333\26\0\1\106\25\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\10\3\1\334"+
    "\17\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\200\27\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\3\1\335\26\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\336\23\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\337\1\3\2\0\1\3\1\340"+
    "\1\341\1\342\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\13\3\1\343\2\3\1\344\11\3\22\0"+
    "\2\3\6\0\2\3\1\345\2\3\1\0\2\3\2\0"+
    "\1\346\1\347\1\350\13\3\1\351\11\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\352\13\3"+
    "\1\353\7\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\354\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\27\3\1\200\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\16\3\1\200\11\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\6\3\1\200"+
    "\21\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\7\3\1\355\20\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\356\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\357\27\3\22\0\2\3"+
    "\6\0\1\3\1\360\3\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\2\3\1\361\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\4\3\1\362\23\3\22\0\2\3\6\0\1\3"+
    "\1\363\3\3\1\0\2\3\2\0\5\3\1\110\22\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\364\1\3\2\0"+
    "\5\3\1\365\22\3\22\0\2\3\6\0\1\366\1\367"+
    "\1\370\2\3\1\0\2\3\2\0\4\3\1\371\2\3"+
    "\1\372\6\3\1\373\11\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\374\1\3\1\375\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\376\1\3\2\0\7\3"+
    "\1\377\20\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\14\3\1\u0100\1\3\1\u0101\11\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u0102\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\16\3\1\u0103"+
    "\11\3\22\0\2\3\6\0\1\3\1\u0104\3\3\1\0"+
    "\2\3\2\0\3\3\1\u0105\3\3\1\u0106\7\3\1\u0107"+
    "\10\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\12\3\1\u0108\15\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\13\3\1\u0109\14\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u010a\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\1\u010b\4\3\1\0\2\3\2\0\1\u010c\1\u010d"+
    "\1\u010e\1\u010f\4\3\1\u0110\1\3\1\u0111\15\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\5\3\1\u0112"+
    "\22\3\22\0\2\3\6\0\5\3\1\0\1\u0113\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u0114\6\3\1\u0115\11\3\22\0\2\3"+
    "\6\0\2\3\1\200\2\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\2\3\1\u0116\2\3\1\0\2\3"+
    "\2\0\1\u0117\1\u0118\1\u0119\3\3\1\u011a\1\u011b\1\3"+
    "\1\u011c\1\u011d\1\u011e\14\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\22\3\1\u011f\5\3\22\0\2\3"+
    "\6\0\2\3\1\u0120\2\3\1\0\2\3\2\0\15\3"+
    "\1\u0121\12\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u0122\24\3\22\0\2\3\6\0\2\3"+
    "\1\u0123\2\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\2\3\1\u0124\25\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u0125\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\10\3\1\u0126\17\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u0127\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\11\3\1\u0128\16\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0129\1\3\2\0\2\3"+
    "\1\u012a\25\3\22\0\2\3\6\0\5\3\1\0\1\u012b"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\2\3\1\u012c"+
    "\2\3\1\0\2\3\2\0\4\3\1\u012d\23\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\10\3\1\u012e"+
    "\6\3\1\177\10\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u012f\25\3\22\0\2\3\6\0"+
    "\2\3\1\u0130\2\3\1\0\2\3\2\0\2\3\1\u0131"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u0132\1\u0133\26\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0134\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\177\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\22\3\1\u0135\5\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\10\3"+
    "\1\u0136\17\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\16\3\1\u0137\11\3\22\0\2\3\6\0\1\u0123"+
    "\1\3\1\u0138\2\3\1\0\2\3\2\0\1\u0139\1\u013a"+
    "\5\3\1\u013b\1\3\1\u013c\16\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\u013d\6\3\1\u013e\20\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\5\3"+
    "\1\u013f\22\3\22\0\2\3\6\0\1\3\1\u0140\3\3"+
    "\1\0\2\3\2\0\16\3\1\u0141\11\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\2\3\1\u0142\14\3"+
    "\1\177\10\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\3\1\237\26\3\22\0\2\3\6\0\1\u0143"+
    "\1\3\1\u0144\2\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\5\3\1\u0145"+
    "\22\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\u0146\25\3\22\0\2\3\6\0\2\3\1\u0147"+
    "\2\3\1\0\2\3\2\0\4\3\1\u0148\23\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0149\1\3\2\0\5\3"+
    "\1\u014a\22\3\22\0\2\3\6\0\1\3\1\u014b\3\3"+
    "\1\0\2\3\2\0\4\3\1\u014c\23\3\22\0\2\3"+
    "\6\0\2\3\1\110\2\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\13\3"+
    "\1\u014d\14\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u010a\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\u014e\23\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\6\3\1\u014f\21\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u0150\1\3\2\0"+
    "\3\3\1\u0151\1\3\1\u0152\22\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\u0153\27\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\u0154\27\3\22\0"+
    "\2\3\6\0\2\3\1\u0155\2\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\u0156\17\3\1\u0157\5\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u0158\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0159\1\3\2\0\5\3"+
    "\1\u015a\22\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\2\3\1\u015b\25\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\3\1\u015c\26\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\3\1\177\26\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u015d\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u015e\24\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\u0155\23\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\3\3\1\u015f\24\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u0160\1\3\2\0"+
    "\3\3\1\154\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\4\3\1\u0161\23\3\22\0\2\3\6\0"+
    "\1\u0162\4\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\1\u0163\4\3\1\0\2\3\2\0\10\3\1\u0164"+
    "\17\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\u0146\11\3\1\u0165\13\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\7\3\1\u0166\20\3\22\0"+
    "\2\3\6\0\1\3\1\u0166\1\u0167\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\6\3\1\u0168\21\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\5\3\1\u0169\22\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\2\3\1\177\25\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\5\3"+
    "\1\u016a\1\3\1\u016b\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u016c\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\17\3\1\u016d\10\3"+
    "\22\0\2\3\6\0\2\3\1\u016e\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u016f\24\3\22\0\2\3\6\0\1\200"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\264\6\0"+
    "\5\264\1\0\2\264\2\0\30\264\1\0\1\u0170\21\0"+
    "\1\u0171\2\0\1\u0172\6\0\2\u0171\3\0\1\u0172\25\0"+
    "\1\u0171\24\0\10\300\1\301\72\300\1\5\1\301\63\300"+
    "\1\0\2\3\6\0\2\3\1\u0173\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\1\u0174"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\177\1\3\2\0\1\3\1\u0175\26\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\20\3\1\u0176\7\3"+
    "\22\0\2\3\6\0\1\3\1\u0177\3\3\1\0\2\3"+
    "\2\0\3\3\1\u0178\24\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u0179\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\u017a\27\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\u010a\15\3"+
    "\1\u017b\4\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\224\24\3\22\0\2\3\6\0\1\u017c"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u017d\23\3\22\0"+
    "\2\3\6\0\1\u017e\4\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\13\3"+
    "\1\u017f\6\3\1\200\5\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\7\3\1\u0180\20\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u0166\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u016e\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\10\3"+
    "\1\u0181\17\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\2\3\1\u0182\25\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u0183\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u0184\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\7\3\1\u016e\20\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\10\3"+
    "\1\177\17\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u0185\24\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\22\3\1\u0186\5\3\23\0\1\u0187"+
    "\2\0\1\u0188\6\0\2\u0187\3\0\1\u0188\25\0\1\u0187"+
    "\25\0\2\3\2\0\1\u0189\3\0\5\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u018a\20\3\22\0\2\3\6\0\2\3"+
    "\1\u018b\2\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\3\1\u018c\26\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u018d\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\1\u018e\1\3"+
    "\2\0\4\3\1\u018f\23\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\u0190\1\3\1\177\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\1\u0191\27\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u0192\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u0193\27\3\22\0\2\3\6\0\1\3\1\u0194\3\3"+
    "\1\0\2\3\2\0\2\3\1\u012a\2\3\1\u014b\22\3"+
    "\22\0\2\3\6\0\1\3\1\u0195\3\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u0196\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\5\3\1\261\22\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u0197\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u0198"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\3\1\200\26\3\22\0\2\3\6\0\2\3\1\u0199"+
    "\2\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u019a\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u019b"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\1\u019c\1\3"+
    "\2\0\1\u019d\1\u019e\13\3\1\u019f\12\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\u01a0\3\3\1\u01a1"+
    "\23\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u01a2\27\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u01a3\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\u01a4\27\3\22\0\2\3\6\0"+
    "\1\u01a5\4\3\1\0\2\3\2\0\1\u01a6\1\3\1\u01a7"+
    "\3\3\1\u01a8\21\3\22\0\2\3\6\0\1\u01a9\4\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\1\3"+
    "\1\u01aa\1\u01ab\2\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\4\3\1\u01ac"+
    "\23\3\22\0\2\3\6\0\2\3\1\u01ad\2\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\12\3\1\u01ae\3\3\1\u01af\11\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\177\1\3\2\0\1\3"+
    "\1\u01b0\1\177\25\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u01b1\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\3\1\u01b2\26\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\4\3\1\u01b3"+
    "\23\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\u01b4\25\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\12\3\1\u01b5\15\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\23\3\1\u01b6\4\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u01b7\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\1\u01b8\4\3\1\0\1\177\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\16\3\1\177\3\3\1\u01b9\5\3\22\0\2\3"+
    "\6\0\1\u01ba\4\3\1\0\2\3\2\0\3\3\1\u01bb"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\21\3\1\u01bc\6\3\22\0\2\3\6\0\2\3\1\u01bd"+
    "\2\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\1\177\4\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u01be\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u01bf\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\2\3\1\u01c0\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\1\u01c1"+
    "\1\3\2\0\5\3\1\u01c2\22\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u01c3\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u01c4\1\3\2\0\3\3"+
    "\1\u01c5\24\3\22\0\2\3\6\0\1\3\1\255\3\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\2\3"+
    "\1\u01c6\2\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\1\u01c7\4\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\22\3\1\u01c8"+
    "\5\3\22\0\2\3\6\0\5\3\1\0\1\u01c9\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u01ca\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u01cb\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\u01cc\22\3"+
    "\22\0\2\3\6\0\1\3\1\u01cd\3\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\1\u01ce"+
    "\1\3\2\0\5\3\1\u01cf\22\3\22\0\2\3\6\0"+
    "\2\3\1\u01d0\2\3\1\0\2\3\2\0\10\3\1\u01d1"+
    "\17\3\22\0\2\3\6\0\5\3\1\0\1\u01d2\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\2\3\1\u01d3\2\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\1\3"+
    "\1\u01d4\3\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\20\3\1\u01d5\7\3"+
    "\22\0\2\3\6\0\2\3\1\u01d6\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\177\1\u01d7\20\3\1\u01d8\5\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\u01d9\27\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\17\3\1\177"+
    "\10\3\22\0\2\3\6\0\5\3\1\0\1\u01da\1\3"+
    "\2\0\12\3\1\u0111\15\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u01db\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u01dc\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u01dd\23\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\u01de"+
    "\27\3\22\0\2\3\6\0\1\u01df\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u01e0\24\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\15\3\1\u01e1\12\3\22\0\2\3"+
    "\6\0\1\3\1\u01e2\3\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\3"+
    "\1\u01e3\11\3\1\u01e4\3\3\1\u0181\10\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\20\3\1\u01e5\7\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\5\3"+
    "\1\u01e6\22\3\22\0\2\3\6\0\5\3\1\0\1\u01e7"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u01e8\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\3\3\1\u01e9\24\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\12\3\1\177\15\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u01ea\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\3\1\u01eb\26\3\22\0\2\3\6\0\2\3\1\u01ec"+
    "\2\3\1\0\2\3\2\0\3\3\1\u01ed\24\3\22\0"+
    "\2\3\6\0\2\3\1\u01ee\2\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\1\u01ef\1\3"+
    "\2\0\7\3\1\u01f0\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\3\1\u01f1\1\u01f2\4\3\1\u01f3"+
    "\15\3\1\177\2\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\22\3\1\u01f4\5\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\12\3\1\u01f5\15\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\13\3\1\154"+
    "\14\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\7\3\1\u0157\20\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u01f6\1\3\2\0\7\3\1\u01f7\20\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\3\1\u01f8\26\3"+
    "\22\0\2\3\6\0\2\3\1\u01f9\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u01fa\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\3\1\u015b\26\3\22\0\2\3"+
    "\6\0\2\3\1\u01fb\2\3\1\0\1\177\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\255\27\3\22\0\2\3\6\0\5\3\1\0\1\u01fc"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\16\3\1\u01fd\11\3\22\0\2\3\6\0"+
    "\1\330\4\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u01fe\1\3\2\0\2\3\1\u01ff"+
    "\25\3\22\0\2\3\6\0\2\3\1\u0200\2\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\3\1\u0201\26\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\5\3\1\255\22\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\1\u0202\1\u0203"+
    "\10\3\1\u01ec\15\3\22\0\2\3\6\0\1\255\4\3"+
    "\1\0\2\3\2\0\5\3\1\u0166\1\u0204\7\3\1\u0205"+
    "\11\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\3\1\u0206\26\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u01f8\24\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\u0207\1\327\26\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\25\3\1\177"+
    "\2\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\15\3\1\u0208\12\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u010a\24\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\21\3\1\u0209\6\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\7\3\1\u0155"+
    "\20\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\15\3\1\110\12\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\20\3\1\177\7\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\25\3\1\u020a\2\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\20\3\1\u020b"+
    "\7\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\u020c\25\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u020d\25\3\22\0\2\3\6\0"+
    "\1\u020e\4\3\1\0\2\3\2\0\4\3\1\u020f\23\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\22\3"+
    "\1\200\5\3\22\0\2\3\6\0\1\3\1\u0210\3\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u0211\1\3\2\0\2\3\1\u015b\25\3\22\0"+
    "\2\3\6\0\1\3\1\154\3\3\1\0\2\3\2\0"+
    "\3\3\1\u0212\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\4\3\1\177\23\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\10\3\1\u0213\17\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u0214"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\13\3\1\327\14\3\22\0\2\3\6\0\1\3\1\u0215"+
    "\3\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\1\255\4\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\177\22\3"+
    "\22\0\2\3\6\0\2\3\1\177\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\1\u0216\4\3\1\0"+
    "\2\3\2\0\30\3\23\0\1\u0171\11\0\2\u0171\31\0"+
    "\1\u0171\25\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\3\3\1\u0217\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\4\3\1\u0218\23\3\22\0\2\3\6\0"+
    "\2\3\1\u0219\2\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u021a\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\4\3"+
    "\1\327\23\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u021b\22\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\177\27\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\7\3\1\u021c\20\3\22\0"+
    "\2\3\6\0\1\3\1\u021d\3\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\5\3\1\u021e\22\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\22\3\1\177\5\3\22\0\2\3\6\0"+
    "\2\3\1\u021f\2\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u0220"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\3\3\1\316\24\3\22\0\2\3\6\0\1\u016c\4\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\1\u0221"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\1\3\1\u0222\3\3\1\0\2\3\2\0\30\3\23\0"+
    "\1\u0187\11\0\2\u0187\31\0\1\u0187\43\0\1\u0223\55\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\12\3\1\200"+
    "\15\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\6\3\1\u016e\21\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\12\3\1\u0224\15\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u0225\23\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\7\3\1\u0226"+
    "\20\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\u0227\25\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0228\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\3\1\u0229\26\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u022a"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\4\3\1\u022b\23\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\321\27\3\22\0\2\3\6\0\1\u022c"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\16\3\1\u022d\11\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u022e"+
    "\24\3\22\0\2\3\6\0\2\3\1\u022f\2\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u0230\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\10\3\1\u017c\17\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u0231\23\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u0232\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u0233\1\3\1\177\20\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\7\3\1\u0234\20\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\5\3"+
    "\1\u0166\22\3\22\0\2\3\6\0\5\3\1\0\1\u0235"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0236\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u0237\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0238\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u0239\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u023a\3\3\1\u023b\20\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u01ce\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u023c"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\16\3\1\u023d\11\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u023e\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u023f\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u0240\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\255"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\7\3\1\u0241\20\3\22\0\2\3\6\0\2\3\1\u0242"+
    "\2\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\25\3\1\u0243\2\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\7\3\1\u0244"+
    "\11\3\1\u0209\6\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\u0245\27\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\5\3\1\u0246\22\3\22\0\2\3"+
    "\6\0\1\3\1\327\3\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\u0247"+
    "\26\3\1\u0248\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\3\1\u0249\26\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\22\3\1\321\5\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\u024a\27\3\22\0"+
    "\2\3\6\0\2\3\1\u0181\2\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\3\1\u024b\26\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u024c\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\u024d\23\3\22\0\2\3"+
    "\6\0\1\u024e\4\3\1\0\2\3\2\0\4\3\1\u024f"+
    "\23\3\22\0\2\3\6\0\1\3\1\u0250\3\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\4\3\1\u0251\15\3\1\321\5\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u0252"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\14\3\1\u0253\13\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\3\1\u0254\26\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\7\3\1\u01f8\20\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u0255"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\1\u0256\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\10\3\1\u0257\17\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u0258\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u0259\1\u025a"+
    "\22\3\22\0\2\3\6\0\1\u025b\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\4\3\1\u010a\23\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\255\23\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\25\3\1\200\2\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u025c\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\4\3\1\u025d\23\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\3\3\1\u025e\24\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\3\3\1\u025f\24\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u0260\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\13\3\1\u0261\14\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\5\3\1\u0262\22\3\22\0\2\3"+
    "\6\0\1\3\1\u0263\3\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u019c\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\4\3\1\u0264\23\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0265\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u0266\23\3\22\0"+
    "\2\3\6\0\2\3\1\u0267\2\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\1\u0268\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\4\3\1\u0269\3\3\1\u026a\3\3\1\u026b\6\3"+
    "\1\u026c\4\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u010a\22\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u026d\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\20\3\1\u026e\7\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u026f"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\5\3\1\u0270\22\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\3\1\u0232\26\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u0271\23\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\4\3\1\u01f8"+
    "\23\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\5\3\1\u0272\22\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0273\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u0274\23\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\7\3\1\u025a"+
    "\20\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\16\3\1\u0275\11\3\22\0\2\3\6\0\2\3\1\u0276"+
    "\2\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u0277\23\3\22\0"+
    "\2\3\6\0\1\3\1\u0278\3\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\5\3\1\u0279\22\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u027a\1\u027b\23\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\13\3\1\u027c\14\3"+
    "\22\0\2\3\6\0\1\u027d\4\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\u027e\25\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\13\3\1\u027f\14\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u012a\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u0280"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\11\3\1\u0281\16\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0282\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\3\3\1\u0283\24\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\4\3\1\222"+
    "\23\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\3\3\1\237\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u0284\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u0285\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\3\3\1\u0286\24\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u0287"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\7\3\1\u0288\20\3\22\0\2\3\6\0\4\3\1\u0289"+
    "\1\0\1\u028a\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\15\3\1\u028b\12\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u028c\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\2\3\1\u028d\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\1\3\1\u0137\3\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u01d1\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\11\3\1\u01a0\16\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u028e\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u028f\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\2\3\1\200\25\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\17\3\1\u0290\10\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\11\3\1\u0291\16\3\22\0"+
    "\2\3\6\0\2\3\1\u0292\2\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\1\u0293\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\12\3\1\u0294\15\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\11\3\1\177\16\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\3\3\1\u0295\24\3"+
    "\22\0\2\3\6\0\1\3\1\u0296\3\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\3\1\u0155\26\3\22\0\2\3\6\0\1\u0297"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\13\3\1\u0298\14\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0299\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\15\3"+
    "\1\u010a\12\3\22\0\2\3\6\0\5\3\1\0\1\u029a"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u029b\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\7\3\1\u0161\20\3\60\0\1\u029c"+
    "\35\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u029d\25\3\22\0\2\3\6\0\1\327\4\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\3\1\255\26\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\u029e\27\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u0181\23\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u029f\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u02a0\22\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\3\3\1\u02a1\24\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\2\3\1\u02a2\25\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\7\3"+
    "\1\177\20\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\u02a3\27\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u016b\4\3\1\u02a4\17\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\16\3\1\u02a5"+
    "\11\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\4\3\1\u01a0\23\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u0210\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\10\3\1\200\17\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\4\3\1\u02a6"+
    "\23\3\22\0\2\3\6\0\1\u02a7\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\1\u02a8"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u02a9\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\3\1\u0224\26\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u02aa\23\3"+
    "\22\0\2\3\6\0\1\u02ab\4\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\3\3\1\u02ac\24\3\22\0\2\3\6\0\1\u02ad\4\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u02ae\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\u02af\27\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\1\355\27\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\10\3"+
    "\1\u02b0\17\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u017e\22\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\12\3\1\u02b1\15\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\3\1\u02b2\26\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\3\3"+
    "\1\122\24\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\4\3\1\u02b3\23\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u02b4\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\u02b5\22\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\7\3"+
    "\1\u02b6\20\3\22\0\2\3\6\0\2\3\1\u01ab\2\3"+
    "\1\0\2\3\2\0\7\3\1\u0143\20\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\u02b7\22\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\u02b8"+
    "\27\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u02b9\27\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\2\3\1\u02ba\25\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\10\3\1\u02bb\17\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\u02bc\5\3\1\327"+
    "\21\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\7\3\1\u02bd\20\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u02be\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\3\3\1\u02bf\24\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u0232"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\3\3\1\124\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u0226\24\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\200\23\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\11\3\1\u02c0"+
    "\16\3\22\0\2\3\6\0\5\3\1\0\1\u02c1\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\1\u02c2"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\3\1\u01c6\26\3\22\0\2\3\6\0"+
    "\2\3\1\u02c3\2\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\7\3\1\u021a"+
    "\20\3\22\0\2\3\6\0\1\3\1\u016b\3\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u02c4\24\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\7\3\1\u02c5\20\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u01a4"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\5\3\1\u02c6\22\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u02c7\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\16\3\1\u016e\11\3\22\0"+
    "\2\3\6\0\1\3\1\u02c8\3\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u02c9\27\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u02ca\20\3\22\0\2\3\6\0\1\u02cb"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u02cc\23\3\22\0"+
    "\2\3\6\0\1\u02cd\4\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u02ce\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\3\3\1\u02cf\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u02d0\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\u02d1\23\3\22\0"+
    "\2\3\6\0\2\3\1\u02d2\2\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\1\u02d3\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\1\u02d4\4\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u02d5\24\3\22\0\2\3\6\0"+
    "\2\3\1\u02d6\2\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\5\3\1\u022e"+
    "\22\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\3\3\1\u02d7\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u02d8\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\7\3\1\u02d9\20\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u02da\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\22\3"+
    "\1\u02db\5\3\22\0\2\3\6\0\1\u02dc\4\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\4\3\1\124\23\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\1\u012a\27\3\22\0\2\3"+
    "\6\0\2\3\1\u02dd\2\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\4\3"+
    "\1\u02de\23\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u02df\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\10\3\1\u02e0\17\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\u02e1\22\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\u02e2\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\1\u02e3\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\6\3\1\321\21\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\17\3\1\u02e4\10\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\u021a\22\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\22\3"+
    "\1\u02e5\5\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\3\1\u02e6\26\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\u02e7\27\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\7\3\1\u02e8\20\3\22\0"+
    "\2\3\6\0\2\3\1\u02e9\2\3\1\0\2\3\2\0"+
    "\30\3\40\0\1\u02ea\55\0\2\3\6\0\1\u02eb\4\3"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u02ec\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\3\3\1\u02ed\24\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u02ee\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u02ef\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\21\3\1\u02f0\6\3\22\0\2\3"+
    "\6\0\1\u0181\4\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u02f1"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\4\3\1\u02f2\23\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u02f3\20\3\22\0\2\3\6\0"+
    "\1\3\1\200\3\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\1\u02f4\4\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\177\1\3\2\0"+
    "\3\3\1\u01e0\24\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\12\3\1\u02f5\15\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u02f6\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\5\3\1\u02f7\22\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u02f8\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u02f9\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\7\3\1\u02fa\20\3\22\0\2\3"+
    "\6\0\1\u02fb\4\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u02fc"+
    "\25\3\22\0\2\3\6\0\1\u02fd\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u02fe\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\3\3\1\u01ca\24\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u02ff\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0226\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\2\3\1\u0300\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\2\3\1\u01a0\25\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u0301\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\3\3\1\u0302\24\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\14\3"+
    "\1\255\13\3\22\0\2\3\6\0\1\u0303\4\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\10\3\1\u0304\17\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\10\3\1\u0305\17\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\12\3\1\u01a4"+
    "\15\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\15\3\1\u0306\12\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0307\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u02f9\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u0308\23\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\7\3"+
    "\1\u0309\20\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u030a\24\3\22\0\2\3\6\0\4\3"+
    "\1\u030b\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\12\3\1\u02be\1\200\14\3"+
    "\22\0\2\3\6\0\2\3\1\u030c\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\1\330"+
    "\1\3\2\0\7\3\1\u030d\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u030e\25\3\22\0"+
    "\2\3\6\0\1\u02bc\4\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\3"+
    "\1\u030f\26\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\13\3\1\u0310\14\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u0311\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\16\3\1\u0312\11\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\1\u0313\27\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\3"+
    "\1\u02be\26\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\14\3\1\u0314\13\3\22\0\2\3\6\0\1\u0315"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u0316\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0317\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\17\3"+
    "\1\u0318\10\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\13\3\1\u0319\14\3\22\0\2\3\6\0\1\3"+
    "\1\u025a\3\3\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u031a\23\3"+
    "\22\0\2\3\6\0\1\u031b\4\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\1\u031c\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\2\3\1\u031d\25\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u031e\1\3\2\0\30\3\45\0\1\u031f\50\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\17\3\1\u0320"+
    "\10\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\3\1\u0321\26\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\3\3\1\u0322\24\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u0323\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\21\3\1\u0324"+
    "\6\3\22\0\2\3\6\0\5\3\1\0\1\u0325\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\3\3\1\u0326\24\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\u0327\27\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\5\3\1\u0328\22\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u016b"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\1\u0329\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\4\3\1\u0123\23\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\16\3\1\u032a\11\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u032b\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u032c\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\6\3"+
    "\1\u01a8\21\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\16\3\1\u032d\11\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\17\3\1\u032e\10\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\22\3\1\u02e0\5\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\3"+
    "\1\u032f\26\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\3\1\u0330\26\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\u0331\27\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\7\3\1\u0332\20\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\4\3\1\u0333"+
    "\23\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\27\3\1\u01c6\22\0\2\3\6\0\5\3\1\0\1\u0334"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\13\3\1\u0335\14\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\21\3\1\u0336\6\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u0337"+
    "\25\3\22\0\2\3\6\0\1\3\1\u0338\3\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u0339\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u033a\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u0327\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\22\3\1\u033b"+
    "\5\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u033c\27\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\10\3\1\u033d\17\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\22\3\1\234\5\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u033e\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\7\3\1\u033f"+
    "\20\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u0340\24\3\1\u0341\2\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\1\3\1\u01a4\26\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u0342\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\1\3\1\u0195\3\3\1\0\2\3\2\0"+
    "\2\3\1\u0343\5\3\1\u0232\17\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\10\3\1\u0344\17\3\22\0"+
    "\2\3\6\0\1\u0345\4\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u0346\25\3\22\0\2\3\6\0\1\323\4\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\4\3\1\u0347\23\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\12\3\1\u0348\15\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\21\3\1\u0349"+
    "\6\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\12\3\1\154\15\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\3\1\u0330\17\3\1\u034a\6\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u034b\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\5\3"+
    "\1\u016e\22\3\22\0\2\3\6\0\5\3\1\0\1\255"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\1\u034c\27\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\17\3\1\u034d\10\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\14\3\1\u034e\13\3"+
    "\22\0\2\3\6\0\2\3\1\u034f\2\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\u0350\27\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0351\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\5\3\1\u0352\16\3\1\u0353"+
    "\3\3\22\0\2\3\6\0\5\3\1\0\1\u01a4\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u0354\22\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\u0355\23\3\22\0\2\3"+
    "\6\0\1\3\1\u0356\3\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\3\3"+
    "\1\u0357\24\3\22\0\2\3\6\0\5\3\1\0\1\u0358"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u0359\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\3\3\1\u035a\24\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u035b"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\7\3\1\u0140\20\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\16\3\1\u035c\1\3\1\u035d\7\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\3\3\1\u035e"+
    "\24\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\1\u035f\27\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u0360\22\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u0361\1\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u0362\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\3\1\u0363\26\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\330\1\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\11\3\1\u0364\16\3\22\0\2\3\6\0\2\3\1\u01ae"+
    "\2\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u0365\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\10\3\1\u01af\17\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\16\3"+
    "\1\u0366\11\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\17\3\1\u0367\10\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\3\3\1\u0368\24\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\16\3\1\u0369\11\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\3\3"+
    "\1\u036a\24\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\5\3\1\u036b\22\3\22\0\2\3\6\0\1\u036c"+
    "\4\3\1\0\2\3\2\0\30\3\22\0\2\3\6\0"+
    "\1\3\1\u036d\3\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\1\3\1\u036e"+
    "\26\3\22\0\2\3\6\0\1\u025c\4\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\20\3\1\u036f\7\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\11\3\1\u0370\16\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\10\3\1\u0371\17\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\3\3"+
    "\1\u0372\24\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\12\3\1\u0373\15\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\16\3\1\u0374\11\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u0375\1\3\2\0\30\3\22\0"+
    "\2\3\6\0\1\u01ae\4\3\1\0\2\3\2\0\30\3"+
    "\22\0\2\3\6\0\1\3\1\u0166\3\3\1\0\2\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\u01a8\27\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\4\3\1\355\23\3\22\0\2\3\6\0"+
    "\1\3\1\u0376\3\3\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\5\3\1\0\1\u0377\1\3\2\0\30\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\u0378"+
    "\27\3\22\0\2\3\6\0\2\3\1\u0379\2\3\1\0"+
    "\2\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\20\3\1\u037a\7\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u037b\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\1\u037c\27\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\2\3\1\u037d"+
    "\25\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\16\3\1\u037e\11\3\22\0\2\3\6\0\5\3\1\0"+
    "\1\u037f\1\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\7\3\1\u0380\20\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\4\3\1\u0381\23\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u0382\25\3\22\0\2\3\6\0\5\3\1\0\1\u0383"+
    "\1\3\2\0\30\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\u0384\20\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\2\3\1\u0385\25\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\4\3\1\u0386"+
    "\23\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\7\3\1\u0387\20\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\7\3\1\203\20\3\22\0\2\3\6\0"+
    "\4\3\1\u0388\1\0\2\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\3\3\1\u0389\24\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\1\u038a"+
    "\27\3\22\0\2\3\6\0\5\3\1\0\2\3\2\0"+
    "\12\3\1\u038b\15\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\2\3\1\u038c\25\3\22\0\2\3\6\0"+
    "\5\3\1\0\1\u038d\1\3\2\0\30\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\7\3\1\u038e\20\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\17\3"+
    "\1\u038f\10\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\10\3\1\u0390\17\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u0346\5\3\1\u0391\17\3"+
    "\22\0\2\3\6\0\4\3\1\u0392\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\1\u0393\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u0394\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\u0395\25\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\10\3\1\u0396\17\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\7\3"+
    "\1\u0397\20\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\7\3\1\u0398\20\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\3\3\1\u0399\24\3\22\0\2\3"+
    "\6\0\4\3\1\u039a\1\0\2\3\2\0\30\3\22\0"+
    "\2\3\6\0\2\3\1\u039b\2\3\1\0\2\3\2\0"+
    "\30\3\22\0\2\3\6\0\5\3\1\0\1\u039c\1\3"+
    "\2\0\30\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\u038d\27\3\22\0\2\3\6\0\5\3\1\0"+
    "\2\3\2\0\14\3\1\u039d\13\3\22\0\2\3\6\0"+
    "\5\3\1\0\2\3\2\0\3\3\1\u039e\24\3\22\0"+
    "\2\3\6\0\5\3\1\0\2\3\2\0\1\u039f\27\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\2\3"+
    "\1\u03a0\25\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\1\u03a1\27\3\22\0\2\3\6\0\4\3\1\u03a2"+
    "\1\0\2\3\2\0\30\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\12\3\1\u03a3\15\3\22\0\2\3"+
    "\6\0\5\3\1\0\2\3\2\0\7\3\1\u03a4\20\3"+
    "\22\0\2\3\6\0\5\3\1\0\2\3\2\0\4\3"+
    "\1\u03a5\23\3\22\0\2\3\6\0\5\3\1\0\2\3"+
    "\2\0\2\3\1\u03a6\25\3\22\0\2\3\6\0\5\3"+
    "\1\0\2\3\2\0\3\3\1\327\24\3\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[49260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\1\11\36\1\2\11"+
    "\6\1\1\11\1\1\1\11\1\1\2\11\26\1\1\0"+
    "\1\11\146\1\1\0\12\11\3\0\31\1\1\0\224\1"+
    "\1\11\1\1\1\0\25\1\2\0\231\1\1\0\170\1"+
    "\1\0\115\1\1\0\64\1\1\11\207\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[934];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int getLine() { return yyline; }
public int getColumn() { return yycolumn; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            } 
            // fall through
          case 136: break;
          case 2: 
            { lexeme=yytext(); return ID;
            } 
            // fall through
          case 137: break;
          case 3: 
            { lexeme=yytext(); return INT;
            } 
            // fall through
          case 138: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 139: break;
          case 5: 
            { lexeme=yytext(); return COMA;
            } 
            // fall through
          case 140: break;
          case 6: 
            { lexeme=yytext(); return MENOS;
            } 
            // fall through
          case 141: break;
          case 7: 
            { lexeme=yytext(); return DIV;
            } 
            // fall through
          case 142: break;
          case 8: 
            { lexeme=yytext(); return MULT;
            } 
            // fall through
          case 143: break;
          case 9: 
            { lexeme=yytext(); return BIT;
            } 
            // fall through
          case 144: break;
          case 10: 
            { lexeme=yytext(); return PUNTO;
            } 
            // fall through
          case 145: break;
          case 11: 
            { lexeme=yytext(); return MAS;
            } 
            // fall through
          case 146: break;
          case 12: 
            { lexeme=yytext(); return CORCHETE_ABIERTO;
            } 
            // fall through
          case 147: break;
          case 13: 
            { lexeme=yytext(); return CORCHETE_CERRADO;
            } 
            // fall through
          case 148: break;
          case 14: 
            { lexeme=yytext(); return RES;
            } 
            // fall through
          case 149: break;
          case 15: 
            { lexeme=yytext(); return MENOR;
            } 
            // fall through
          case 150: break;
          case 16: 
            { lexeme=yytext(); return IGUAL;
            } 
            // fall through
          case 151: break;
          case 17: 
            { lexeme=yytext(); return MAYOR;
            } 
            // fall through
          case 152: break;
          case 18: 
            { lexeme=yytext(); return EXCLAMACION;
            } 
            // fall through
          case 153: break;
          case 19: 
            { lexeme=yytext(); return PUNTO_COMA;
            } 
            // fall through
          case 154: break;
          case 20: 
            { lexeme=yytext(); return PARENTESIS_ABIERTO;
            } 
            // fall through
          case 155: break;
          case 21: 
            { lexeme=yytext(); return PARENTESIS_CERRADO;
            } 
            // fall through
          case 156: break;
          case 22: 
            { lexeme=yytext(); return LLAVE_ABIERTO;
            } 
            // fall through
          case 157: break;
          case 23: 
            { lexeme=yytext(); return LLAVE_CERRADO;
            } 
            // fall through
          case 158: break;
          case 24: 
            { lexeme=yytext(); return ARROBA;
            } 
            // fall through
          case 159: break;
          case 25: 
            { lexeme=yytext(); return NUMERAL;
            } 
            // fall through
          case 160: break;
          case 26: 
            { lexeme=yytext(); return FLOAT;
            } 
            // fall through
          case 161: break;
          case 27: 
            { lexeme=yytext(); return COMENTARIO_M;
            } 
            // fall through
          case 162: break;
          case 28: 
            { lexeme=yytext(); return PALABRA_RESERVADA;
            } 
            // fall through
          case 163: break;
          case 29: 
            { lexeme=yytext(); return ERROR_F;
            } 
            // fall through
          case 164: break;
          case 30: 
            { lexeme=yytext(); return STRING;
            } 
            // fall through
          case 165: break;
          case 31: 
            { lexeme=yytext(); return IF;
            } 
            // fall through
          case 166: break;
          case 32: 
            { lexeme=yytext(); return ON;
            } 
            // fall through
          case 167: break;
          case 33: 
            { lexeme=yytext(); return OR;
            } 
            // fall through
          case 168: break;
          case 34: 
            { lexeme=yytext(); return AS;
            } 
            // fall through
          case 169: break;
          case 35: 
            { lexeme=yytext(); return BY;
            } 
            // fall through
          case 170: break;
          case 36: 
            { lexeme=yytext(); return GO;
            } 
            // fall through
          case 171: break;
          case 37: 
            { lexeme=yytext(); return CORCHETES;
            } 
            // fall through
          case 172: break;
          case 38: 
            { lexeme=yytext(); return MENOR_O_IGUAL;
            } 
            // fall through
          case 173: break;
          case 39: 
            { lexeme=yytext(); return IGUAL_A;
            } 
            // fall through
          case 174: break;
          case 40: 
            { lexeme=yytext(); return MAYOR_O_IGUAL;
            } 
            // fall through
          case 175: break;
          case 41: 
            { lexeme=yytext(); return DIFERENTE;
            } 
            // fall through
          case 176: break;
          case 42: 
            { lexeme=yytext(); return AND_O;
            } 
            // fall through
          case 177: break;
          case 43: 
            { lexeme=yytext(); return OR_O;
            } 
            // fall through
          case 178: break;
          case 44: 
            { lexeme=yytext(); return PARENTESIS;
            } 
            // fall through
          case 179: break;
          case 45: 
            { lexeme=yytext(); return LLAVES;
            } 
            // fall through
          case 180: break;
          case 46: 
            { lexeme=yytext(); return DOBLE_NUMERAL;
            } 
            // fall through
          case 181: break;
          case 47: 
            { lexeme=yytext(); return NOT;
            } 
            // fall through
          case 182: break;
          case 48: 
            { lexeme=yytext(); return SUM;
            } 
            // fall through
          case 183: break;
          case 49: 
            { lexeme=yytext(); return SET;
            } 
            // fall through
          case 184: break;
          case 50: 
            { lexeme=yytext(); return TOP;
            } 
            // fall through
          case 185: break;
          case 51: 
            { lexeme=yytext(); return INT_P;
            } 
            // fall through
          case 186: break;
          case 52: 
            { lexeme=yytext(); return AND;
            } 
            // fall through
          case 187: break;
          case 53: 
            { lexeme=yytext(); return ALL;
            } 
            // fall through
          case 188: break;
          case 54: 
            { lexeme=yytext(); return ASC;
            } 
            // fall through
          case 189: break;
          case 55: 
            { lexeme=yytext(); return AVG;
            } 
            // fall through
          case 190: break;
          case 56: 
            { lexeme=yytext(); return ADD;
            } 
            // fall through
          case 191: break;
          case 57: 
            { lexeme=yytext(); return FOR;
            } 
            // fall through
          case 192: break;
          case 58: 
            { lexeme=yytext(); return BIT_P;
            } 
            // fall through
          case 193: break;
          case 59: 
            { lexeme=yytext(); return MIN;
            } 
            // fall through
          case 194: break;
          case 60: 
            { lexeme=yytext(); return MAX;
            } 
            // fall through
          case 195: break;
          case 61: 
            { lexeme=yytext(); return KEY;
            } 
            // fall through
          case 196: break;
          case 62: 
            { lexeme=yytext(); return NULL;
            } 
            // fall through
          case 197: break;
          case 63: 
            { lexeme=yytext(); return NAME;
            } 
            // fall through
          case 198: break;
          case 64: 
            { lexeme=yytext(); return USER;
            } 
            // fall through
          case 199: break;
          case 65: 
            { lexeme=yytext(); return LEFT;
            } 
            // fall through
          case 200: break;
          case 66: 
            { lexeme=yytext(); return LIKE;
            } 
            // fall through
          case 201: break;
          case 67: 
            { lexeme=yytext(); return CHAR;
            } 
            // fall through
          case 202: break;
          case 68: 
            { lexeme=yytext(); return TEXT;
            } 
            // fall through
          case 203: break;
          case 69: 
            { lexeme=yytext(); return TIME;
            } 
            // fall through
          case 204: break;
          case 70: 
            { lexeme=yytext(); return INTO;
            } 
            // fall through
          case 205: break;
          case 71: 
            { lexeme=yytext(); return REAL;
            } 
            // fall through
          case 206: break;
          case 72: 
            { lexeme=yytext(); return VIEW;
            } 
            // fall through
          case 207: break;
          case 73: 
            { lexeme=yytext(); return DESC;
            } 
            // fall through
          case 208: break;
          case 74: 
            { lexeme=yytext(); return DROP;
            } 
            // fall through
          case 209: break;
          case 75: 
            { lexeme=yytext(); return DATE;
            } 
            // fall through
          case 210: break;
          case 76: 
            { lexeme=yytext(); return FULL;
            } 
            // fall through
          case 211: break;
          case 77: 
            { lexeme=yytext(); return FROM;
            } 
            // fall through
          case 212: break;
          case 78: 
            { lexeme=yytext(); return WITH;
            } 
            // fall through
          case 213: break;
          case 79: 
            { lexeme=yytext(); return JOIN;
            } 
            // fall through
          case 214: break;
          case 80: 
            { lexeme=yytext(); return LOGIN;
            } 
            // fall through
          case 215: break;
          case 81: 
            { lexeme=yytext(); return COUNT;
            } 
            // fall through
          case 216: break;
          case 82: 
            { lexeme=yytext(); return CHECK;
            } 
            // fall through
          case 217: break;
          case 83: 
            { lexeme=yytext(); return TABLE;
            } 
            // fall through
          case 218: break;
          case 84: 
            { lexeme=yytext(); return INNER;
            } 
            // fall through
          case 219: break;
          case 85: 
            { lexeme=yytext(); return INDEX;
            } 
            // fall through
          case 220: break;
          case 86: 
            { lexeme=yytext(); return IMAGE;
            } 
            // fall through
          case 221: break;
          case 87: 
            { lexeme=yytext(); return RIGHT;
            } 
            // fall through
          case 222: break;
          case 88: 
            { lexeme=yytext(); return OUTER;
            } 
            // fall through
          case 223: break;
          case 89: 
            { lexeme=yytext(); return ORDER;
            } 
            // fall through
          case 224: break;
          case 90: 
            { lexeme=yytext(); return ALTER;
            } 
            // fall through
          case 225: break;
          case 91: 
            { lexeme=yytext(); return FLOAT_P;
            } 
            // fall through
          case 226: break;
          case 92: 
            { lexeme=yytext(); return WHERE;
            } 
            // fall through
          case 227: break;
          case 93: 
            { lexeme=yytext(); return MONEY;
            } 
            // fall through
          case 228: break;
          case 94: 
            { lexeme=yytext(); return GROUP;
            } 
            // fall through
          case 229: break;
          case 95: 
            { lexeme=yytext(); return UNIQUE;
            } 
            // fall through
          case 230: break;
          case 96: 
            { lexeme=yytext(); return USABLE;
            } 
            // fall through
          case 231: break;
          case 97: 
            { lexeme=yytext(); return UPDATE;
            } 
            // fall through
          case 232: break;
          case 98: 
            { lexeme=yytext(); return EXISTS;
            } 
            // fall through
          case 233: break;
          case 99: 
            { lexeme=yytext(); return SELECT;
            } 
            // fall through
          case 234: break;
          case 100: 
            { lexeme=yytext(); return CREATE;
            } 
            // fall through
          case 235: break;
          case 101: 
            { lexeme=yytext(); return COLUMN;
            } 
            // fall through
          case 236: break;
          case 102: 
            { lexeme=yytext(); return INSERT;
            } 
            // fall through
          case 237: break;
          case 103: 
            { lexeme=yytext(); return VALUES;
            } 
            // fall through
          case 238: break;
          case 104: 
            { lexeme=yytext(); return DELETE;
            } 
            // fall through
          case 239: break;
          case 105: 
            { lexeme=yytext(); return MODIFY;
            } 
            // fall through
          case 240: break;
          case 106: 
            { lexeme=yytext(); return HAVING;
            } 
            // fall through
          case 241: break;
          case 107: 
            { lexeme=yytext(); return NUMERIC;
            } 
            // fall through
          case 242: break;
          case 108: 
            { lexeme=yytext(); return CURRENT;
            } 
            // fall through
          case 243: break;
          case 109: 
            { lexeme=yytext(); return INCLUDE;
            } 
            // fall through
          case 244: break;
          case 110: 
            { lexeme=yytext(); return REBUILD;
            } 
            // fall through
          case 245: break;
          case 111: 
            { lexeme=yytext(); return VARCHAR;
            } 
            // fall through
          case 246: break;
          case 112: 
            { lexeme=yytext(); return DECIMAL;
            } 
            // fall through
          case 247: break;
          case 113: 
            { lexeme=yytext(); return DEFAULT;
            } 
            // fall through
          case 248: break;
          case 114: 
            { lexeme=yytext(); return DISABLE;
            } 
            // fall through
          case 249: break;
          case 115: 
            { lexeme=yytext(); return FOREIGN;
            } 
            // fall through
          case 250: break;
          case 116: 
            { lexeme=yytext(); return PERCENT;
            } 
            // fall through
          case 251: break;
          case 117: 
            { lexeme=yytext(); return PRIMARY;
            } 
            // fall through
          case 252: break;
          case 118: 
            { lexeme=yytext(); return BETWEEN;
            } 
            // fall through
          case 253: break;
          case 119: 
            { lexeme=yytext(); return UNUSABLE;
            } 
            // fall through
          case 254: break;
          case 120: 
            { lexeme=yytext(); return TRUNCATE;
            } 
            // fall through
          case 255: break;
          case 121: 
            { lexeme=yytext(); return IDENTITY;
            } 
            // fall through
          case 256: break;
          case 122: 
            { lexeme=yytext(); return DISTINCT;
            } 
            // fall through
          case 257: break;
          case 123: 
            { lexeme=yytext(); return DATETIME;
            } 
            // fall through
          case 258: break;
          case 124: 
            { lexeme=yytext(); return DATABASE;
            } 
            // fall through
          case 259: break;
          case 125: 
            { lexeme=yytext(); return PASSWORD;
            } 
            // fall through
          case 260: break;
          case 126: 
            { lexeme=yytext(); return CLUSTERED;
            } 
            // fall through
          case 261: break;
          case 127: 
            { lexeme=yytext(); return TIMESTAMP;
            } 
            // fall through
          case 262: break;
          case 128: 
            { lexeme=yytext(); return VARBINARY;
            } 
            // fall through
          case 263: break;
          case 129: 
            { lexeme=yytext(); return DATETIME2;
            } 
            // fall through
          case 264: break;
          case 130: 
            { lexeme=yytext(); return CONSTRAINT;
            } 
            // fall through
          case 265: break;
          case 131: 
            { lexeme=yytext(); return REFERENCES;
            } 
            // fall through
          case 266: break;
          case 132: 
            { lexeme=yytext(); return NONCLUSTERED;
            } 
            // fall through
          case 267: break;
          case 133: 
            { lexeme=yytext(); return SMALLDATETIME;
            } 
            // fall through
          case 268: break;
          case 134: 
            { lexeme=yytext(); return DEFAULT_SCHEMA;
            } 
            // fall through
          case 269: break;
          case 135: 
            { lexeme=yytext(); return DATETIMEOFFSET;
            } 
            // fall through
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
