
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Oct 27 16:45:19 CST 2019
//----------------------------------------------------

package Classes;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.10k generated parser.
  * @version Sun Oct 27 16:45:19 CST 2019
  */
public class Syntax
 extends java_cup.runtime.lr_parser
{
  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\002\000\002\005\005\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\013\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\004\000\002\007\005\000\002\077\003\000\002" +
    "\077\003\000\002\025\004\000\002\026\005\000\002\026" +
    "\002\000\002\027\004\000\002\027\002\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\002\000\002" +
    "\033\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\002\000\002\035\005\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\022\005\000\002\036\004\000" +
    "\002\036\004\000\002\036\002\000\002\014\013\000\002" +
    "\040\004\000\002\041\003\000\002\041\003\000\002\041" +
    "\004\000\002\041\002\000\002\042\003\000\002\042\005" +
    "\000\002\043\005\000\002\044\003\000\002\044\003\000" +
    "\002\044\005\000\002\044\003\000\002\045\004\000\002" +
    "\045\002\000\002\046\006\000\002\046\006\000\002\046" +
    "\006\000\002\046\006\000\002\046\006\000\002\047\003" +
    "\000\002\047\003\000\002\047\004\000\002\050\003\000" +
    "\002\050\002\000\002\051\004\000\002\051\002\000\002" +
    "\052\005\000\002\053\004\000\002\053\002\000\002\054" +
    "\004\000\002\054\003\000\002\054\002\000\002\055\003" +
    "\000\002\055\003\000\002\056\013\000\002\056\002\000" +
    "\002\057\003\000\002\057\004\000\002\057\004\000\002" +
    "\057\004\000\002\057\002\000\002\060\003\000\002\060" +
    "\002\000\002\061\003\000\002\062\007\000\002\062\002" +
    "\000\002\063\004\000\002\063\002\000\002\064\006\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\006\000\002\067\006\000" +
    "\002\067\002\000\002\070\005\000\002\070\002\000\002" +
    "\071\004\000\002\071\002\000\002\072\006\000\002\073" +
    "\004\000\002\073\002\000\002\074\007\000\002\074\002" +
    "\000\002\075\005\000\002\075\002\000\002\076\003\000" +
    "\002\076\003\000\002\076\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\012\002\ufffe\003\026\056\011\061\012\001" +
    "\002\000\006\033\ufff6\141\ufff6\001\002\000\006\033\ufff2" +
    "\141\ufff2\001\002\000\006\033\ufff1\141\ufff1\001\002\000" +
    "\004\002\000\001\002\000\006\033\ufff9\141\ufff9\001\002" +
    "\000\034\005\uffca\006\uffca\011\uffca\016\uffca\040\uffca\104" +
    "\061\156\063\164\057\200\uffca\201\uffca\202\uffca\203\uffca" +
    "\204\uffca\001\002\000\004\071\042\001\002\000\006\033" +
    "\030\141\031\001\002\000\006\033\uffef\141\uffef\001\002" +
    "\000\006\033\ufff8\141\ufff8\001\002\000\006\033\ufff0\141" +
    "\ufff0\001\002\000\006\033\ufff5\141\ufff5\001\002\000\004" +
    "\002\uffff\001\002\000\006\033\ufff3\141\ufff3\001\002\000" +
    "\004\002\037\001\002\000\006\033\ufffa\141\ufffa\001\002" +
    "\000\006\033\ufff7\141\ufff7\001\002\000\006\033\ufffb\141" +
    "\ufffb\001\002\000\006\033\030\141\031\001\002\000\006" +
    "\033\ufff4\141\ufff4\001\002\000\014\002\uffed\003\uffed\056" +
    "\uffed\061\uffed\141\035\001\002\000\014\002\uffee\003\uffee" +
    "\033\034\056\uffee\061\uffee\001\002\000\012\002\ufffe\003" +
    "\026\056\011\061\012\001\002\000\004\002\ufffc\001\002" +
    "\000\012\002\uffeb\003\uffeb\056\uffeb\061\uffeb\001\002\000" +
    "\014\002\uffec\003\uffec\033\036\056\uffec\061\uffec\001\002" +
    "\000\012\002\uffea\003\uffea\056\uffea\061\uffea\001\002\000" +
    "\004\002\001\001\002\000\012\002\ufffe\003\026\056\011" +
    "\061\012\001\002\000\004\002\ufffd\001\002\000\012\011" +
    "\044\033\uffd0\034\043\141\uffd0\001\002\000\012\011\044" +
    "\033\uffd0\034\043\141\uffd0\001\002\000\064\011\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\025\uffe5\033\uffe5\034\uffe5" +
    "\035\050\041\uffe5\076\uffe5\141\uffe5\160\uffe5\161\uffe5\163" +
    "\uffe5\165\uffe5\166\uffe5\167\uffe5\170\uffe5\171\uffe5\172\uffe5" +
    "\174\uffe5\175\uffe5\176\uffe5\177\uffe5\001\002\000\002\001" +
    "\002\000\006\033\uffd3\141\uffd3\001\002\000\006\033\uffd2" +
    "\141\uffd2\001\002\000\004\011\052\001\002\000\062\011" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\025\uffe7\033\uffe7" +
    "\034\uffe7\041\uffe7\076\uffe7\141\uffe7\160\uffe7\161\uffe7\163" +
    "\uffe7\165\uffe7\166\uffe7\167\uffe7\170\uffe7\171\uffe7\172\uffe7" +
    "\174\uffe7\175\uffe7\176\uffe7\177\uffe7\001\002\000\064\011" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\025\uffe3\033\uffe3" +
    "\034\uffe3\035\053\041\uffe3\076\uffe3\141\uffe3\160\uffe3\161" +
    "\uffe3\163\uffe3\165\uffe3\166\uffe3\167\uffe3\170\uffe3\171\uffe3" +
    "\172\uffe3\174\uffe3\175\uffe3\176\uffe3\177\uffe3\001\002\000" +
    "\004\011\055\001\002\000\062\011\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\025\uffe6\033\uffe6\034\uffe6\041\uffe6\076" +
    "\uffe6\141\uffe6\160\uffe6\161\uffe6\163\uffe6\165\uffe6\166\uffe6" +
    "\167\uffe6\170\uffe6\171\uffe6\172\uffe6\174\uffe6\175\uffe6\176" +
    "\uffe6\177\uffe6\001\002\000\062\011\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\025\uffe4\033\uffe4\034\uffe4\041\uffe4\076" +
    "\uffe4\141\uffe4\160\uffe4\161\uffe4\163\uffe4\165\uffe4\166\uffe4" +
    "\167\uffe4\170\uffe4\171\uffe4\172\uffe4\174\uffe4\175\uffe4\176" +
    "\uffe4\177\uffe4\001\002\000\006\033\uffd1\141\uffd1\001\002" +
    "\000\026\005\uffcd\006\uffcd\011\uffcd\016\uffcd\040\uffcd\200" +
    "\uffcd\201\uffcd\202\uffcd\203\uffcd\204\uffcd\001\002\000\026" +
    "\005\256\006\265\011\044\016\260\040\263\200\165\201" +
    "\164\202\166\203\170\204\163\001\002\000\026\005\uffcc" +
    "\006\uffcc\011\uffcc\016\uffcc\040\uffcc\200\uffcc\201\uffcc\202" +
    "\uffcc\203\uffcc\204\uffcc\001\002\000\004\160\073\001\002" +
    "\000\010\004\065\005\070\040\066\001\002\000\026\005" +
    "\uffc9\006\uffc9\011\uffc9\016\uffc9\040\uffc9\200\uffc9\201\uffc9" +
    "\202\uffc9\203\uffc9\204\uffc9\001\002\000\056\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\011\uffe8\016\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\040\uffe8\041\uffe8\141\uffe8\150\uffe8\151\uffe8\167" +
    "\uffe8\170\uffe8\171\uffe8\200\uffe8\201\uffe8\202\uffe8\203\uffe8" +
    "\204\uffe8\001\002\000\006\004\065\005\070\001\002\000" +
    "\026\005\uffcb\006\uffcb\011\uffcb\016\uffcb\040\uffcb\200\uffcb" +
    "\201\uffcb\202\uffcb\203\uffcb\204\uffcb\001\002\000\056\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\016\uffe9\030\uffe9" +
    "\031\uffe9\033\uffe9\040\uffe9\041\uffe9\141\uffe9\150\uffe9\151" +
    "\uffe9\167\uffe9\170\uffe9\171\uffe9\200\uffe9\201\uffe9\202\uffe9" +
    "\203\uffe9\204\uffe9\001\002\000\004\041\072\001\002\000" +
    "\026\005\uffc8\006\uffc8\011\uffc8\016\uffc8\040\uffc8\200\uffc8" +
    "\201\uffc8\202\uffc8\203\uffc8\204\uffc8\001\002\000\004\011" +
    "\044\001\002\000\036\011\233\033\uffaf\034\uffaf\141\uffaf" +
    "\161\uffaf\163\234\165\uffaf\166\uffaf\167\uffaf\170\uffaf\171" +
    "\uffaf\172\uffaf\174\uffaf\175\uffaf\001\002\000\030\033\uffab" +
    "\141\uffab\161\uffab\165\076\166\100\167\uffab\170\uffab\171" +
    "\uffab\172\uffa6\174\077\175\103\001\002\000\006\172\uffa4" +
    "\173\105\001\002\000\004\172\uffaa\001\002\000\006\172" +
    "\uffa4\173\105\001\002\000\004\172\231\001\002\000\016" +
    "\033\uffa1\141\uffa1\161\107\167\uffa1\170\uffa1\171\uffa1\001" +
    "\002\000\006\172\uffa4\173\105\001\002\000\004\172\uffa7" +
    "\001\002\000\004\172\uffa5\001\002\000\014\033\uff90\141" +
    "\uff90\167\144\170\uff90\171\uff90\001\002\000\004\011\110" +
    "\001\002\000\022\021\111\022\113\023\115\024\117\026" +
    "\116\027\120\140\114\142\121\001\002\000\012\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\001\002\000\012\004\065\005" +
    "\070\006\130\007\125\001\002\000\012\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\001\002\000\006\004\065\005\070\001" +
    "\002\000\012\004\uff98\005\uff98\006\uff98\007\uff98\001\002" +
    "\000\012\004\uff94\005\uff94\006\uff94\007\uff94\001\002\000" +
    "\012\004\uff96\005\uff96\006\uff96\007\uff96\001\002\000\012" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\001\002\000\012\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\001\002\000\004\030\123" +
    "\001\002\000\006\004\065\005\070\001\002\000\012\004" +
    "\uff92\005\uff92\006\uff92\007\uff92\001\002\000\024\030\uffe2" +
    "\031\uffe2\033\uffe2\141\uffe2\150\uffe2\151\uffe2\167\uffe2\170" +
    "\uffe2\171\uffe2\001\002\000\024\030\uffe1\031\uffe1\033\uffe1" +
    "\141\uffe1\150\uffe1\151\uffe1\167\uffe1\170\uffe1\171\uffe1\001" +
    "\002\000\024\030\132\031\136\033\uff9f\141\uff9f\150\133" +
    "\151\135\167\uff9f\170\uff9f\171\uff9f\001\002\000\024\030" +
    "\uffe0\031\uffe0\033\uffe0\141\uffe0\150\uffe0\151\uffe0\167\uffe0" +
    "\170\uffe0\171\uffe0\001\002\000\014\033\uffa2\141\uffa2\167" +
    "\uffa2\170\uffa2\171\uffa2\001\002\000\016\011\uff9d\200\uff9d" +
    "\201\uff9d\202\uff9d\203\uff9d\204\uff9d\001\002\000\016\011" +
    "\uff9b\200\uff9b\201\uff9b\202\uff9b\203\uff9b\204\uff9b\001\002" +
    "\000\004\011\137\001\002\000\016\011\uff9a\200\uff9a\201" +
    "\uff9a\202\uff9a\203\uff9a\204\uff9a\001\002\000\016\011\uff9c" +
    "\200\uff9c\201\uff9c\202\uff9c\203\uff9c\204\uff9c\001\002\000" +
    "\022\021\111\022\113\023\115\024\117\026\116\027\120" +
    "\140\114\142\121\001\002\000\014\033\uffa0\141\uffa0\167" +
    "\uffa0\170\uffa0\171\uffa0\001\002\000\012\004\065\005\070" +
    "\006\130\007\125\001\002\000\024\030\132\031\136\033" +
    "\uff9f\141\uff9f\150\133\151\135\167\uff9f\170\uff9f\171\uff9f" +
    "\001\002\000\014\033\uff9e\141\uff9e\167\uff9e\170\uff9e\171" +
    "\uff9e\001\002\000\004\211\223\001\002\000\012\033\uff8c" +
    "\141\uff8c\170\uff8c\171\146\001\002\000\014\200\165\201" +
    "\164\202\166\203\170\204\163\001\002\000\010\033\uff87" +
    "\141\uff87\170\150\001\002\000\004\211\152\001\002\000" +
    "\006\033\uffcf\141\uffcf\001\002\000\004\011\044\001\002" +
    "\000\014\033\uff82\034\uff82\141\uff82\176\155\177\154\001" +
    "\002\000\010\033\uff84\034\uff84\141\uff84\001\002\000\010" +
    "\033\uff83\034\uff83\141\uff83\001\002\000\010\033\uff85\034" +
    "\157\141\uff85\001\002\000\004\011\044\001\002\000\006" +
    "\033\uff88\141\uff88\001\002\000\010\033\uff85\034\157\141" +
    "\uff85\001\002\000\006\033\uff86\141\uff86\001\002\000\004" +
    "\040\220\001\002\000\004\040\215\001\002\000\004\040" +
    "\212\001\002\000\004\040\207\001\002\000\010\033\uff8d" +
    "\141\uff8d\170\uff8d\001\002\000\004\040\177\001\002\000" +
    "\022\021\111\022\113\023\115\024\117\026\116\027\120" +
    "\140\114\142\121\001\002\000\012\004\065\005\070\006" +
    "\130\007\125\001\002\000\020\030\132\031\136\033\uff89" +
    "\141\uff89\150\133\151\135\170\uff89\001\002\000\010\033" +
    "\uff8b\141\uff8b\170\uff8b\001\002\000\014\200\165\201\164" +
    "\202\166\203\170\204\163\001\002\000\010\033\uff8a\141" +
    "\uff8a\170\uff8a\001\002\000\014\004\065\005\070\011\uffb7" +
    "\016\201\164\200\001\002\000\004\011\uffb8\001\002\000" +
    "\004\041\uffba\001\002\000\004\041\uffbb\001\002\000\004" +
    "\011\044\001\002\000\004\041\205\001\002\000\030\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\034\uffbc" +
    "\140\uffbc\142\uffbc\160\uffbc\163\uffbc\001\002\000\004\041" +
    "\uffb9\001\002\000\014\004\065\005\070\011\uffb7\016\201" +
    "\164\200\001\002\000\004\041\211\001\002\000\030\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\034\uffbe" +
    "\140\uffbe\142\uffbe\160\uffbe\163\uffbe\001\002\000\014\004" +
    "\065\005\070\011\uffb7\016\201\164\200\001\002\000\004" +
    "\041\214\001\002\000\030\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\026\uffbf\027\uffbf\034\uffbf\140\uffbf\142\uffbf\160\uffbf" +
    "\163\uffbf\001\002\000\014\004\065\005\070\011\uffb7\016" +
    "\201\164\200\001\002\000\004\041\217\001\002\000\030" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\034" +
    "\uffc0\140\uffc0\142\uffc0\160\uffc0\163\uffc0\001\002\000\014" +
    "\004\065\005\070\011\uffb7\016\201\164\200\001\002\000" +
    "\004\041\222\001\002\000\030\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\026\uffbd\027\uffbd\034\uffbd\140\uffbd\142\uffbd\160" +
    "\uffbd\163\uffbd\001\002\000\004\011\044\001\002\000\014" +
    "\033\uff8e\034\225\141\uff8e\170\uff8e\171\uff8e\001\002\000" +
    "\004\011\044\001\002\000\012\033\uff91\141\uff91\170\uff91" +
    "\171\uff91\001\002\000\014\033\uff8e\034\225\141\uff8e\170" +
    "\uff8e\171\uff8e\001\002\000\012\033\uff8f\141\uff8f\170\uff8f" +
    "\171\uff8f\001\002\000\004\011\044\001\002\000\010\011" +
    "\233\076\uffaf\163\234\001\002\000\034\033\uffb0\034\uffb0" +
    "\076\uffb0\141\uffb0\161\uffb0\165\uffb0\166\uffb0\167\uffb0\170" +
    "\uffb0\171\uffb0\172\uffb0\174\uffb0\175\uffb0\001\002\000\006" +
    "\007\245\011\244\001\002\000\004\076\236\001\002\000" +
    "\004\011\044\001\002\000\004\025\240\001\002\000\004" +
    "\011\044\001\002\000\030\033\uffab\141\uffab\161\uffab\165" +
    "\076\166\100\167\uffab\170\uffab\171\uffab\172\uffa6\174\077" +
    "\175\103\001\002\000\016\033\uffa3\141\uffa3\161\uffa3\167" +
    "\uffa3\170\uffa3\171\uffa3\001\002\000\016\033\uffac\141\uffac" +
    "\161\uffac\167\uffac\170\uffac\171\uffac\001\002\000\036\033" +
    "\uffad\034\uffad\076\uffad\141\uffad\160\uffad\161\uffad\165\uffad" +
    "\166\uffad\167\uffad\170\uffad\171\uffad\172\uffad\174\uffad\175" +
    "\uffad\001\002\000\036\033\uffae\034\uffae\076\uffae\141\uffae" +
    "\160\uffae\161\uffae\165\uffae\166\uffae\167\uffae\170\uffae\171" +
    "\uffae\172\uffae\174\uffae\175\uffae\001\002\000\034\033\uffb1" +
    "\034\uffb1\076\uffb1\141\uffb1\161\uffb1\165\uffb1\166\uffb1\167" +
    "\uffb1\170\uffb1\171\uffb1\172\uffb1\174\uffb1\175\uffb1\001\002" +
    "\000\004\172\uffa8\001\002\000\004\172\uffa9\001\002\000" +
    "\032\033\uffb2\034\252\141\uffb2\161\uffb2\165\uffb2\166\uffb2" +
    "\167\uffb2\170\uffb2\171\uffb2\172\uffb2\174\uffb2\175\uffb2\001" +
    "\002\000\004\011\044\001\002\000\030\033\uffb4\141\uffb4" +
    "\161\uffb4\165\uffb4\166\uffb4\167\uffb4\170\uffb4\171\uffb4\172" +
    "\uffb4\174\uffb4\175\uffb4\001\002\000\030\033\uffb3\141\uffb3" +
    "\161\uffb3\165\uffb3\166\uffb3\167\uffb3\170\uffb3\171\uffb3\172" +
    "\uffb3\174\uffb3\175\uffb3\001\002\000\004\160\uffce\001\002" +
    "\000\022\014\uffd6\015\uffd6\016\uffd6\017\uffd6\034\uffd6\041" +
    "\uffd6\160\uffd6\163\uffd6\001\002\000\022\014\uffd8\015\uffd8" +
    "\016\310\017\312\034\uffd8\041\uffd8\160\uffd8\163\uffd8\001" +
    "\002\000\010\034\uffc3\160\uffc3\163\uffc3\001\002\000\010" +
    "\034\uffc6\160\uffc6\163\uffc6\001\002\000\010\034\uffc5\160" +
    "\uffc5\163\uffc5\001\002\000\012\005\256\006\265\011\044" +
    "\040\263\001\002\000\010\034\uffb5\160\uffb5\163\300\001" +
    "\002\000\022\014\uffd5\015\uffd5\016\uffd5\017\uffd5\034\uffd5" +
    "\041\uffd5\160\uffd5\163\uffd5\001\002\000\016\014\274\015" +
    "\275\034\uffdc\041\uffdc\160\uffdc\163\uffdc\001\002\000\022" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\025\270\034\uffd4\160" +
    "\uffd4\163\uffd4\001\002\000\012\005\256\006\265\011\044" +
    "\040\263\001\002\000\022\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\034\uffd4\041\uffd4\160\uffd4\163\uffd4\001\002\000\010" +
    "\034\uffc4\160\uffc4\163\uffc4\001\002\000\012\034\uffdf\041" +
    "\uffdf\160\uffdf\163\uffdf\001\002\000\012\005\256\006\265" +
    "\011\044\040\263\001\002\000\012\005\256\006\265\011" +
    "\044\040\263\001\002\000\012\034\uffdd\041\uffdd\160\uffdd" +
    "\163\uffdd\001\002\000\012\034\uffde\041\uffde\160\uffde\163" +
    "\uffde\001\002\000\006\007\245\011\244\001\002\000\006" +
    "\034\302\160\uffc1\001\002\000\026\005\256\006\265\011" +
    "\044\016\260\040\263\200\165\201\164\202\166\203\170" +
    "\204\163\001\002\000\004\160\uffc7\001\002\000\004\160" +
    "\uffc2\001\002\000\006\034\uffb6\160\uffb6\001\002\000\004" +
    "\041\307\001\002\000\022\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\034\uffd7\041\uffd7\160\uffd7\163\uffd7\001\002\000\012" +
    "\005\256\006\265\011\044\040\263\001\002\000\016\014" +
    "\uffdb\015\uffdb\034\uffdb\041\uffdb\160\uffdb\163\uffdb\001\002" +
    "\000\012\005\256\006\265\011\044\040\263\001\002\000" +
    "\016\014\uffd9\015\uffd9\034\uffd9\041\uffd9\160\uffd9\163\uffd9" +
    "\001\002\000\016\014\uffda\015\uffda\034\uffda\041\uffda\160" +
    "\uffda\163\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\044\003\021\004\006\005\017\006\012\010" +
    "\024\011\022\012\007\013\014\014\023\015\003\016\016" +
    "\017\026\020\020\021\004\022\005\023\015\024\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\061\041" +
    "\057\001\001\000\002\001\001\000\004\007\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\032\005\017\006" +
    "\012\010\024\011\022\012\007\013\014\014\023\015\003" +
    "\016\016\017\026\020\020\021\004\022\005\023\015\024" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\040\005\017\006\012\010\024\011\022\012\007\013\014" +
    "\014\023\015\003\016\016\017\026\020\020\021\004\022" +
    "\005\023\015\024\013\001\001\000\002\001\001\000\006" +
    "\025\044\036\045\001\001\000\006\025\044\036\055\001" +
    "\001\000\004\026\050\001\001\000\004\037\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\025\266\031\261\033\265\035\256" +
    "\043\254\044\263\046\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\066\077\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\073\052\074\001\001\000\004\054" +
    "\250\001\001\000\006\056\101\057\100\001\001\000\004" +
    "\060\247\001\001\000\002\001\001\000\004\060\246\001" +
    "\001\000\002\001\001\000\004\062\105\001\001\000\004" +
    "\060\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\144\001\001\000\002\001\001\000\004\066\111" +
    "\001\001\000\002\001\001\000\006\030\126\077\125\001" +
    "\001\000\002\001\001\000\004\077\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\063\130\065\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\140\001\001\000\002\001\001\000\006\030" +
    "\141\077\125\001\001\000\006\063\142\065\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\146\001" +
    "\001\000\006\046\170\072\166\001\001\000\004\074\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\152\001\001\000\004\076\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\157\001\001\000\004\025" +
    "\160\001\001\000\002\001\001\000\004\075\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\171\001\001\000\006\030\172\077" +
    "\125\001\001\000\006\065\174\073\173\001\001\000\002" +
    "\001\001\000\006\046\170\072\175\001\001\000\002\001" +
    "\001\000\010\047\203\050\202\077\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\047\207\050\202\077\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\047\212\050\202" +
    "\077\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\047\215\050\202\077\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\220\050\202\077\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\223" +
    "\001\001\000\004\070\225\001\001\000\004\025\226\001" +
    "\001\000\002\001\001\000\004\070\227\001\001\000\002" +
    "\001\001\000\004\025\231\001\001\000\004\054\234\001" +
    "\001\000\002\001\001\000\004\055\245\001\001\000\002" +
    "\001\001\000\004\025\236\001\001\000\002\001\001\000" +
    "\004\025\240\001\001\000\010\056\241\057\100\061\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\252\001\001\000\006\025" +
    "\073\052\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\270\031\305\033\265\035\256\001\001\000" +
    "\004\051\300\001\001\000\002\001\001\000\004\032\272" +
    "\001\001\000\002\001\001\000\012\025\270\031\271\033" +
    "\265\035\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\270\033\276\035\256\001" +
    "\001\000\010\025\270\033\275\035\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\304\001\001\000" +
    "\004\045\302\001\001\000\020\025\266\031\261\033\265" +
    "\035\256\043\303\044\263\046\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\270\035\313\001\001\000" +
    "\002\001\001\000\006\025\270\035\312\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private String errors_list = ""; 

    public String getErrorString(){
        return errors_list;
    }

    public String symbl_name_from_id(int id){
	Field[] fields = getSymbolContainer().getFields();
	for(Field f : fields){
		try {
                    if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException ex) { 
                        //e.printStackTrace();
                } 
	  }
	return "invalid symbol id";
    }

    public void syntax_error(Symbol s){
        this.s=s; 
        List<Integer> ids = expected_token_ids();
	LinkedList<String> list = new LinkedList<String>();
	for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
            list.add("\n");
        }
        errors_list += "Line: " + (s.right + 1) + " and column: " + (s.left + 1) + ", '" + s.value +"', recuperable error: missing symbol " + list + "\n";
        System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" linea "+(s.right+1)+"tokens esperados"+list+"\n\n" );  
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	int parse_state = ((Symbol)stack.peek()).parse_state ;
	short[] row = action_tab[parse_state];
	for (int i = 0; i<row.length; i+=2){
            if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
	}
	return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
	short lhs,rhs_size;
	int act;
	try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            /* parse until we fail or get past the lookahead input */
            for (;;)
            {
                /* look up the action from the current state (on top of stack) */
                act = get_action(vstack.top(), id);
                
                /* if its an error, we fail */
		if (act == 0) return false;

        	/* > 0 encodes a shift */
		if (act > 0){
                    /* push the new state on the stack */
                    vstack.push(act-1);

        	    /* advance simulated input, if we run off the end, we are done */
                    if (!advance_lookahead()) return true;
                }
                /* < 0 encodes a reduce */
		else
		{
                    /* if this is a reduce with the start production we are done */
                    if ((-act)-1 == start_production())  return true;

                    /* get the lhs Symbol and the rhs size */
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    /* pop handle off the stack */
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
	} catch (Exception e) {
            e.printStackTrace();
	}
	return true;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        List<Integer> ids = new LinkedList<>();
        ids=expected_token_ids();
	LinkedList<String> list = new LinkedList<String>();
	for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
            list.add("\n");
        }

        errors_list += "Line: " + (s.right + 1) + " and column: " + (s.left + 1) + ", '" + s.value +"', Non recuperable error: missing symbol " + list + "\n";
        System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" linea "+(s.right+1)+"tokens esperados"+list+"\n\n" );   
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo_orden ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(60/*tipo_orden*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo_orden ::= DESC 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(60/*tipo_orden*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo_orden ::= ASC 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(60/*tipo_orden*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // orden1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(59/*orden1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // orden1 ::= COMA obj_n orden1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(59/*orden1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // orden ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(58/*orden*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // orden ::= ORDER BY obj_n tipo_orden orden1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(58/*orden*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // teniendo2 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(57/*teniendo2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // teniendo2 ::= operadores_logicos teniendo1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(57/*teniendo2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // teniendo1 ::= funciones operadores tipo_dato teniendo2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(56/*teniendo1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // teniendo ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(55/*teniendo*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // teniendo ::= HAVING teniendo1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(55/*teniendo*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // agrupado1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(54/*agrupado1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // agrupado1 ::= COMA obj_n agrupado1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(54/*agrupado1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // agrupado ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(53/*agrupado*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // agrupado ::= GROUP BY obj_n agrupado1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(53/*agrupado*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadores ::= BETWEEN num AND num 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadores ::= LIKE 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadores ::= IGUAL_A 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadores ::= DIFERENTE 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadores ::= MAYOR_O_IGUAL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadores ::= MENOR_O_IGUAL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadores ::= MAYOR 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadores ::= MENOR 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(52/*operadores*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadores_logicos ::= OR_O 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(51/*operadores_logicos*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadores_logicos ::= AND_O 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(51/*operadores_logicos*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadores_logicos ::= OR 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(51/*operadores_logicos*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadores_logicos ::= AND 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(51/*operadores_logicos*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // otra_condicion ::= ID operadores tipo_dato condicionales1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(50/*otra_condicion*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicionales1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(49/*condicionales1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicionales1 ::= operadores_logicos otra_condicion 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(49/*condicionales1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicionales ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(48/*condicionales*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicionales ::= WHERE ID operadores tipo_dato condicionales1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(48/*condicionales*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // joins1 ::= joins 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(47/*joins1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_join1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(46/*tipo_join1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_join1 ::= OUTER 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(46/*tipo_join1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_join ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(45/*tipo_join*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_join ::= FULL tipo_join1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(45/*tipo_join*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_join ::= RIGHT tipo_join1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(45/*tipo_join*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipo_join ::= LEFT tipo_join1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(45/*tipo_join*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipo_join ::= INNER 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(45/*tipo_join*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // joins ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(44/*joins*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // joins ::= tipo_join JOIN obj_n alias_tabla ON obj_n IGUAL obj_n joins1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(44/*joins*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // opcion_alias ::= ID 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(43/*opcion_alias*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opcion_alias ::= STRING 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(43/*opcion_alias*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // alias_tabla ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(42/*alias_tabla*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // alias_tabla ::= ID 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(42/*alias_tabla*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // alias_tabla ::= AS opcion_alias 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(42/*alias_tabla*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // origen1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(41/*origen1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // origen1 ::= COMA origen 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(41/*origen1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // origen ::= obj_n alias_tabla origen1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(40/*origen*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // alias_columna ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(39/*alias_columna*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // alias_columna ::= AS opcion_alias 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(39/*alias_columna*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // puede ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(38/*puede*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // puede ::= DISTINCT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(38/*puede*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= puede obj_n 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(37/*valor*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= MULT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(37/*valor*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= num 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(37/*valor*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funciones ::= MAX PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(36/*funciones*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funciones ::= MIN PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(36/*funciones*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funciones ::= COUNT PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(36/*funciones*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funciones ::= AVG PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(36/*funciones*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funciones ::= SUM PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(36/*funciones*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // columna2 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(35/*columna2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // columna2 ::= COMA columna 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(35/*columna2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // columna1 ::= MULT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(34/*columna1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // columna1 ::= obj_n IGUAL aritmetica 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(34/*columna1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // columna1 ::= aritmetica 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(34/*columna1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // columna1 ::= funciones 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(34/*columna1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // columna ::= columna1 alias_columna columna2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(33/*columna*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= PARENTESIS_ABIERTO num PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(32/*expresion*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= num 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(32/*expresion*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // seleccion ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(31/*seleccion*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // seleccion ::= TOP expresion 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(31/*seleccion*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // seleccion ::= ALL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(31/*seleccion*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // seleccion ::= DISTINCT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(31/*seleccion*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opcion_select ::= seleccion columna 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(30/*opcion_select*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // select ::= SELECT opcion_select FROM origen joins condicionales agrupado teniendo orden 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(10/*select*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_table ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(28/*list_table*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_table ::= COMA list_table 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(28/*list_table*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_table ::= obj_n list_table1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(28/*list_table*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // truncate ::= TRUNCATE TABLE list_table 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(16/*truncate*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parte2 ::= obj_n 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parte2 ::= FLOAT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parte2 ::= INT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parte2 ::= PARENTESIS_ABIERTO aritmetica PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parte1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(26/*parte1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parte1 ::= DIV parte2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(26/*parte1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parte1 ::= MULT parte2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(26/*parte1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parte ::= parte2 parte1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(25/*parte*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aritmetica1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(24/*aritmetica1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aritmetica1 ::= MENOS parte 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(24/*aritmetica1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aritmetica1 ::= MAS parte 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(24/*aritmetica1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aritmetica ::= parte aritmetica1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(23/*aritmetica*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_dato ::= FLOAT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(22/*tipo_dato*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato ::= num 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(22/*tipo_dato*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_dato ::= STRING 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(22/*tipo_dato*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // obj_n2 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(21/*obj_n2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // obj_n2 ::= PUNTO ID 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(21/*obj_n2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // obj_n1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(20/*obj_n1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // obj_n1 ::= PUNTO ID obj_n2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(20/*obj_n1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // obj_n ::= ID obj_n1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(19/*obj_n*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // num ::= BIT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(61/*num*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // num ::= INT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(61/*num*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EndStmt ::= PUNTO_COMA GO PUNTO_COMA 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EndStmt ::= GO PUNTO_COMA 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EndStmt ::= PUNTO_COMA GO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EndStmt ::= PUNTO_COMA 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EndStmt ::= GO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StmtTSQL ::= cursor 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(9/*StmtTSQL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StmtDDL ::= drop 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StmtDDL ::= truncate 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StmtDDL ::= alter 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StmtDDL ::= create 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StmtDML ::= delete 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StmtDML ::= update 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StmtDML ::= insert 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StmtDML ::= select 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmt ::= StmtTSQL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmt ::= StmtTCL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmt ::= StmtDDL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stmt ::= StmtDML 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // general ::= error EndStmt general1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(3/*general*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // general ::= Stmt EndStmt general1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(3/*general*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // general1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(2/*general1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // general1 ::= general 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(2/*general1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= general1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(1/*Start*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          default:
            {
              throw new Exception(
                 "Invalid action number found in internal parse table");
            }

        }
    }
}

