
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Oct 27 14:15:02 CST 2019
//----------------------------------------------------

package Classes;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.10k generated parser.
  * @version Sun Oct 27 14:15:02 CST 2019
  */
public class Syntax
 extends java_cup.runtime.lr_parser
{
  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\002\000\002\005\005\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\013\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\004\000\002\007\005\000\002\025\004\000\002" +
    "\026\005\000\002\026\002\000\002\027\004\000\002\027" +
    "\002\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\002\000\002\033\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\002\000\002\035" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\022\005\000\002\036\004\000\002\036\004\000" +
    "\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\010\002\ufffe\003\025\061\011\001\002\000" +
    "\006\033\ufff6\141\ufff6\001\002\000\006\033\ufff2\141\ufff2" +
    "\001\002\000\006\033\ufff1\141\ufff1\001\002\000\004\002" +
    "\000\001\002\000\006\033\ufff9\141\ufff9\001\002\000\004" +
    "\071\041\001\002\000\006\033\027\141\030\001\002\000" +
    "\006\033\uffef\141\uffef\001\002\000\006\033\ufff8\141\ufff8" +
    "\001\002\000\006\033\ufff0\141\ufff0\001\002\000\006\033" +
    "\ufff5\141\ufff5\001\002\000\004\002\uffff\001\002\000\006" +
    "\033\ufff3\141\ufff3\001\002\000\004\002\036\001\002\000" +
    "\006\033\ufffa\141\ufffa\001\002\000\006\033\ufff7\141\ufff7" +
    "\001\002\000\006\033\ufffb\141\ufffb\001\002\000\006\033" +
    "\027\141\030\001\002\000\006\033\ufff4\141\ufff4\001\002" +
    "\000\012\002\uffed\003\uffed\061\uffed\141\034\001\002\000" +
    "\012\002\uffee\003\uffee\033\033\061\uffee\001\002\000\010" +
    "\002\ufffe\003\025\061\011\001\002\000\004\002\ufffc\001" +
    "\002\000\010\002\uffeb\003\uffeb\061\uffeb\001\002\000\012" +
    "\002\uffec\003\uffec\033\035\061\uffec\001\002\000\010\002" +
    "\uffea\003\uffea\061\uffea\001\002\000\004\002\001\001\002" +
    "\000\010\002\ufffe\003\025\061\011\001\002\000\004\002" +
    "\ufffd\001\002\000\012\011\043\033\uffd1\034\042\141\uffd1" +
    "\001\002\000\012\011\043\033\uffd1\034\042\141\uffd1\001" +
    "\002\000\004\035\047\001\002\000\006\033\uffd4\141\uffd4" +
    "\001\002\000\002\001\002\000\006\033\uffd3\141\uffd3\001" +
    "\002\000\004\011\051\001\002\000\002\001\002\000\004" +
    "\035\052\001\002\000\004\011\054\001\002\000\002\001" +
    "\002\000\002\001\002\000\006\033\uffd2\141\uffd2\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\044\003\020\004\006\005\016\006\011\010" +
    "\023\011\021\012\007\013\013\014\022\015\003\016\015" +
    "\017\025\020\017\021\004\022\005\023\014\024\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\031\005\016\006\011\010\023\011\021\012\007\013" +
    "\013\014\022\015\003\016\015\017\025\020\017\021\004" +
    "\022\005\023\014\024\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\037\005\016\006\011\010\023\011" +
    "\021\012\007\013\013\014\022\015\003\016\015\017\025" +
    "\020\017\021\004\022\005\023\014\024\012\001\001\000" +
    "\002\001\001\000\006\025\044\036\043\001\001\000\006" +
    "\025\044\036\054\001\001\000\004\026\047\001\001\000" +
    "\002\001\001\000\004\037\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private String errors_list = ""; 

    public String getErrorString(){
        return errors_list;
    }

    public String symbl_name_from_id(int id){
	Field[] fields = getSymbolContainer().getFields();
	for(Field f : fields){
		try {
                    if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException ex) { 
                        //e.printStackTrace();
                } 
	  }
	return "invalid symbol id";
    }

    public void syntax_error(Symbol s){
        this.s=s; 
        List<Integer> ids = expected_token_ids();
	LinkedList<String> list = new LinkedList<String>();
	for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
            list.add("\n");
        }
        errors_list += "Line: " + (s.right + 1) + " and column: " + (s.left + 1) + ", '" + s.value +"', recuperable error: missing symbol " + list + "\n";
        System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" linea "+(s.right+1)+"tokens esperados"+list+"\n\n" );  
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	int parse_state = ((Symbol)stack.peek()).parse_state ;
	short[] row = action_tab[parse_state];
	for (int i = 0; i<row.length; i+=2){
            if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
	}
	return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
	short lhs,rhs_size;
	int act;
	try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            /* parse until we fail or get past the lookahead input */
            for (;;)
            {
                /* look up the action from the current state (on top of stack) */
                act = get_action(vstack.top(), id);
                
                /* if its an error, we fail */
		if (act == 0) return false;

        	/* > 0 encodes a shift */
		if (act > 0){
                    /* push the new state on the stack */
                    vstack.push(act-1);

        	    /* advance simulated input, if we run off the end, we are done */
                    if (!advance_lookahead()) return true;
                }
                /* < 0 encodes a reduce */
		else
		{
                    /* if this is a reduce with the start production we are done */
                    if ((-act)-1 == start_production())  return true;

                    /* get the lhs Symbol and the rhs size */
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    /* pop handle off the stack */
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
	} catch (Exception e) {
            e.printStackTrace();
	}
	return true;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        List<Integer> ids = new LinkedList<>();
        ids=expected_token_ids();
	LinkedList<String> list = new LinkedList<String>();
	for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
            list.add("\n");
        }

        errors_list += "Line: " + (s.right + 1) + " and column: " + (s.left + 1) + ", '" + s.value +"', Non recuperable error: missing symbol " + list + "\n";
        System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" linea "+(s.right+1)+"tokens esperados"+list+"\n\n" );   
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_table ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(28/*list_table*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_table ::= COMA list_table 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(28/*list_table*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_table ::= obj_n list_table1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(28/*list_table*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // truncate ::= TRUNCATE TABLE list_table 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(16/*truncate*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parte2 ::= obj_n 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parte2 ::= FLOAT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parte2 ::= INT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parte2 ::= PARENTESIS_ABIERTO aritmetica PARENTESIS_CERRADO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(27/*parte2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parte1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(26/*parte1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parte1 ::= DIV parte2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(26/*parte1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parte1 ::= MULT parte2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(26/*parte1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parte ::= parte2 parte1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(25/*parte*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aritmetica1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(24/*aritmetica1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aritmetica1 ::= MENOS parte 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(24/*aritmetica1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aritmetica1 ::= MAS parte 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(24/*aritmetica1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aritmetica ::= parte aritmetica1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(23/*aritmetica*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato ::= FLOAT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(22/*tipo_dato*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_dato ::= INT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(22/*tipo_dato*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_dato ::= BIT 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(22/*tipo_dato*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_dato ::= STRING 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(22/*tipo_dato*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // obj_n2 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(21/*obj_n2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // obj_n2 ::= PUNTO ID 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(21/*obj_n2*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // obj_n1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(20/*obj_n1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // obj_n1 ::= PUNTO ID obj_n2 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(20/*obj_n1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // obj_n ::= ID obj_n1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(19/*obj_n*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EndStmt ::= PUNTO_COMA GO PUNTO_COMA 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EndStmt ::= GO PUNTO_COMA 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EndStmt ::= PUNTO_COMA GO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EndStmt ::= PUNTO_COMA 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EndStmt ::= GO 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(5/*EndStmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StmtTSQL ::= cursor 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(9/*StmtTSQL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StmtDDL ::= drop 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StmtDDL ::= truncate 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StmtDDL ::= alter 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StmtDDL ::= create 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(7/*StmtDDL*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StmtDML ::= delete 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StmtDML ::= update 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StmtDML ::= insert 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StmtDML ::= select 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(6/*StmtDML*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmt ::= StmtTSQL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmt ::= StmtTCL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmt ::= StmtDDL 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stmt ::= StmtDML 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(4/*Stmt*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // general ::= error EndStmt general1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(3/*general*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // general ::= Stmt EndStmt general1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(3/*general*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // general1 ::= 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(2/*general1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // general1 ::= general 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(2/*general1*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= general1 
            {
              Object RESULT = null;

              CUP$Syntax$result = new java_cup.runtime.Symbol(1/*Start*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          default:
            {
              throw new Exception(
                 "Invalid action number found in internal parse table");
            }

        }
    }
}

