
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 13:44:09 CST 2019
//----------------------------------------------------

package Classes;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 13:44:09 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0212\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\002\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\006" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\102\003\000\002\102" +
    "\003\000\002\023\004\000\002\024\005\000\002\024\002" +
    "\000\002\025\004\000\002\025\002\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\004\000\002\027\006\000\002\031" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\004" +
    "\000\002\031\002\000\002\032\004\000\002\032\004\000" +
    "\002\032\002\000\002\033\004\000\002\033\006\000\002" +
    "\034\004\000\002\034\004\000\002\034\002\000\002\035" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\020\005\000\002\131\004\000" +
    "\002\132\004\000\002\132\002\000\002\011\013\000\002" +
    "\036\004\000\002\037\003\000\002\037\003\000\002\037" +
    "\004\000\002\037\002\000\002\040\003\000\002\040\005" +
    "\000\002\041\005\000\002\042\003\000\002\042\003\000" +
    "\002\042\005\000\002\042\003\000\002\043\004\000\002" +
    "\043\002\000\002\044\003\000\002\044\004\000\002\044" +
    "\003\000\002\045\006\000\002\045\006\000\002\045\006" +
    "\000\002\045\006\000\002\045\006\000\002\045\003\000" +
    "\002\110\006\000\002\110\004\000\002\046\003\000\002" +
    "\046\003\000\002\046\004\000\002\047\004\000\002\047" +
    "\002\000\002\050\004\000\002\050\004\000\002\051\003" +
    "\000\002\051\002\000\002\052\004\000\002\052\002\000" +
    "\002\053\005\000\002\054\004\000\002\054\002\000\002" +
    "\055\004\000\002\055\003\000\002\055\002\000\002\056" +
    "\003\000\002\056\003\000\002\057\013\000\002\057\002" +
    "\000\002\060\003\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\002\000\002\061\003\000\002" +
    "\061\002\000\002\062\003\000\002\063\006\000\002\063" +
    "\002\000\002\064\004\000\002\064\002\000\002\065\005" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\070\004\000\002\070\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\006\000\002\071\006\000" +
    "\002\104\004\000\002\105\004\000\002\105\002\000\002" +
    "\072\006\000\002\072\002\000\002\073\005\000\002\073" +
    "\002\000\002\074\004\000\002\074\002\000\002\075\006" +
    "\000\002\076\004\000\002\076\002\000\002\077\007\000" +
    "\002\077\002\000\002\100\005\000\002\100\002\000\002" +
    "\101\003\000\002\101\003\000\002\101\002\000\002\103" +
    "\003\000\002\103\003\000\002\021\004\000\002\133\003" +
    "\000\002\133\003\000\002\133\003\000\002\133\003\000" +
    "\002\133\003\000\002\134\004\000\002\134\002\000\002" +
    "\135\005\000\002\136\005\000\002\137\004\000\002\140" +
    "\004\000\002\140\002\000\002\141\005\000\002\142\006" +
    "\000\002\143\004\000\002\143\002\000\002\144\005\000" +
    "\002\145\004\000\002\146\004\000\002\146\002\000\002" +
    "\147\005\000\002\012\007\000\002\111\003\000\002\111" +
    "\002\000\002\112\005\000\002\112\002\000\002\113\004" +
    "\000\002\114\004\000\002\114\002\000\002\115\004\000" +
    "\002\115\004\000\002\116\006\000\002\117\004\000\002" +
    "\117\002\000\002\120\004\000\002\121\004\000\002\121" +
    "\002\000\002\013\012\000\002\122\004\000\002\124\006" +
    "\000\002\124\002\000\002\123\003\000\002\123\003\000" +
    "\002\125\005\000\002\125\002\000\002\126\003\000\002" +
    "\126\002\000\002\014\007\000\002\130\003\000\002\130" +
    "\002\000\002\127\005\000\002\127\002\000\002\150\010" +
    "\000\002\154\003\000\002\154\003\000\002\155\005\000" +
    "\002\155\002\000\002\156\003\000\002\156\002\000\002" +
    "\164\004\000\002\164\004\000\002\164\002\000\002\165" +
    "\003\000\002\166\004\000\002\166\004\000\002\151\005" +
    "\000\002\157\004\000\002\157\002\000\002\160\003\000" +
    "\002\160\004\000\002\160\002\000\002\161\010\000\002" +
    "\161\002\000\002\163\003\000\002\163\003\000\002\152" +
    "\005\000\002\153\005\000\002\212\003\000\002\212\003" +
    "\000\002\167\011\000\002\170\004\000\002\170\002\000" +
    "\002\171\006\000\002\171\002\000\002\172\005\000\002" +
    "\172\005\000\002\172\004\000\002\173\003\000\002\173" +
    "\003\000\002\174\004\000\002\174\002\000\002\175\003" +
    "\000\002\175\002\000\002\176\004\000\002\176\002\000" +
    "\002\177\004\000\002\177\002\000\002\200\004\000\002" +
    "\201\003\000\002\201\003\000\002\201\005\000\002\202" +
    "\004\000\002\202\002\000\002\203\003\000\002\203\003" +
    "\000\002\204\003\000\002\204\003\000\002\204\003\000" +
    "\002\204\003\000\002\205\004\000\002\205\002\000\002" +
    "\206\006\000\002\207\004\000\002\210\003\000\002\210" +
    "\002\000\002\213\014\000\002\214\003\000\002\214\002" +
    "\000\002\215\011\000\002\216\004\000\002\216\002\000" +
    "\002\217\003\000\002\217\002\000\002\220\003\000\002" +
    "\220\002\000\002\221\004\000\002\221\002\000\002\222" +
    "\004\000\002\223\004\000\002\223\002\000\002\224\003" +
    "\000\002\224\003\000\002\224\003\000\002\224\005\000" +
    "\002\224\004\000\002\224\004\000\002\225\005\000\002" +
    "\226\007\000\002\227\004\000\002\227\006\000\002\230" +
    "\003\000\002\230\004\000\002\022\017\000\002\231\003" +
    "\000\002\231\003\000\002\231\002\000\002\232\003\000" +
    "\002\232\003\000\002\232\002\000\002\233\003\000\002" +
    "\233\003\000\002\233\003\000\002\233\003\000\002\233" +
    "\002\000\002\234\003\000\002\234\003\000\002\234\003" +
    "\000\002\234\002\000\002\235\003\000\002\235\002\000" +
    "\002\236\003\000\002\236\002\000\002\237\003\000\002" +
    "\237\002\000\002\240\005\000\002\240\002\000\002\241" +
    "\004\000\002\241\002\000\002\242\004\000\002\243\004" +
    "\000\002\243\002\000\002\015\004\000\002\016\005\000" +
    "\002\244\004\000\002\244\002\000\002\245\004\000\002" +
    "\245\006\000\002\245\004\000\002\245\004\000\002\245" +
    "\004\000\002\322\003\000\002\322\003\000\002\246\004" +
    "\000\002\251\005\000\002\251\004\000\002\251\002\000" +
    "\002\247\003\000\002\247\002\000\002\252\015\000\002" +
    "\253\004\000\002\253\002\000\002\323\003\000\002\323" +
    "\003\000\002\254\003\000\002\254\003\000\002\254\003" +
    "\000\002\255\005\000\002\255\002\000\002\256\003\000" +
    "\002\256\003\000\002\256\003\000\002\257\003\000\002" +
    "\260\006\000\002\261\003\000\002\261\003\000\002\261" +
    "\003\000\002\261\003\000\002\261\002\000\002\262\005" +
    "\000\002\263\004\000\002\263\002\000\002\264\006\000" +
    "\002\265\003\000\002\265\003\000\002\266\003\000\002" +
    "\266\002\000\002\267\011\000\002\270\004\000\002\272" +
    "\004\000\002\272\002\000\002\271\004\000\002\273\006" +
    "\000\002\273\002\000\002\274\007\000\002\275\004\000" +
    "\002\277\004\000\002\277\002\000\002\276\005\000\002" +
    "\276\005\000\002\276\006\000\002\276\014\000\002\300" +
    "\006\000\002\300\006\000\002\300\006\000\002\300\003" +
    "\000\002\300\003\000\002\300\003\000\002\300\006\000" +
    "\002\300\003\000\002\300\003\000\002\300\003\000\002" +
    "\300\003\000\002\300\003\000\002\300\003\000\002\300" +
    "\003\000\002\300\006\000\002\300\003\000\002\300\003" +
    "\000\002\300\003\000\002\300\004\000\002\300\010\000" +
    "\002\300\010\000\002\330\005\000\002\330\002\000\002" +
    "\301\004\000\002\301\002\000\002\303\003\000\002\302" +
    "\003\000\002\302\004\000\002\302\006\000\002\302\014" +
    "\000\002\302\004\000\002\302\006\000\002\302\004\000" +
    "\002\302\010\000\002\326\005\000\002\326\002\000\002" +
    "\327\003\000\002\327\003\000\002\327\002\000\002\324" +
    "\005\000\002\325\004\000\002\325\002\000\002\304\004" +
    "\000\002\306\004\000\002\306\002\000\002\305\004\000" +
    "\002\250\004\000\002\250\002\000\002\307\005\000\002" +
    "\310\005\000\002\310\002\000\002\311\003\000\002\311" +
    "\003\000\002\312\004\000\002\312\002\000\002\313\004" +
    "\000\002\314\004\000\002\314\002\000\002\315\005\000" +
    "\002\315\005\000\002\316\006\000\002\317\004\000\002" +
    "\317\002\000\002\321\005\000\002\321\002\000\002\320" +
    "\003\000\002\017\004\000\002\331\004\000\002\331\004" +
    "\000\002\331\004\000\002\331\004\000\002\331\004\000" +
    "\002\331\003\000\002\331\003\000\002\332\004\000\002" +
    "\333\003\000\002\333\003\000\002\334\006\000\002\334" +
    "\004\000\002\334\005\000\002\335\006\000\002\336\003" +
    "\000\002\336\003\000\002\337\003\000\002\337\003\000" +
    "\002\337\003\000\002\337\003\000\002\340\004\000\002" +
    "\341\005\000\002\341\004\000\002\341\004\000\002\342" +
    "\006\000\002\342\003\000\002\342\014\000\002\345\004" +
    "\000\002\343\004\000\002\343\002\000\002\344\005\000" +
    "\002\346\004\000\002\346\004\000\002\346\004\000\002" +
    "\353\003\000\002\353\004\000\002\353\006\000\002\353" +
    "\014\000\002\353\004\000\002\353\006\000\002\353\004" +
    "\000\002\353\010\000\002\347\003\000\002\347\005\000" +
    "\002\350\004\000\002\352\004\000\002\352\002\000\002" +
    "\351\005\000\002\351\005\000\002\351\003\000\002\351" +
    "\005\000\002\351\005\000\002\211\005\000\002\107\004" +
    "\000\002\107\005\000\002\107\002\000\002\106\004\000" +
    "\002\106\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03cc\000\042\002\ufffe\003\033\054\026\055\037\056" +
    "\040\057\010\060\025\061\031\062\011\063\032\143\024" +
    "\233\004\234\042\236\035\240\022\247\041\001\002\000" +
    "\006\011\ufeec\165\ufeec\001\002\000\012\033\276\143\277" +
    "\313\275\314\301\001\002\000\012\033\276\143\277\313" +
    "\275\314\301\001\002\000\012\033\276\143\277\313\275" +
    "\314\301\001\002\000\040\004\uffb0\005\uffb0\006\uffb0\011" +
    "\uffb0\016\uffb0\040\uffb0\047\uffb0\105\u0352\160\u0354\166\u0350" +
    "\202\uffb0\203\uffb0\204\uffb0\205\uffb0\206\uffb0\001\002\000" +
    "\004\072\u034e\001\002\000\004\002\uffff\001\002\000\012" +
    "\033\276\143\277\313\275\314\301\001\002\000\042\002" +
    "\ufffe\003\033\054\026\055\037\056\040\057\010\060\025" +
    "\061\031\062\011\063\032\143\024\233\004\234\042\236" +
    "\035\240\022\247\041\001\002\000\012\033\276\143\277" +
    "\313\275\314\301\001\002\000\012\033\276\143\277\313" +
    "\275\314\301\001\002\000\012\033\276\143\277\313\275" +
    "\314\301\001\002\000\004\002\000\001\002\000\012\033" +
    "\276\143\277\313\275\314\301\001\002\000\006\242\315" +
    "\243\313\001\002\000\004\002\u0331\001\002\000\042\002" +
    "\ufffe\003\033\054\026\055\037\056\040\057\010\060\025" +
    "\061\031\062\011\063\032\143\024\233\004\234\042\236" +
    "\035\240\022\247\041\001\002\000\032\031\u02ac\067\u02a6" +
    "\070\ufe7c\071\u02a7\072\u02aa\073\u02a9\116\u02a8\207\ufe7c\210" +
    "\ufe7c\227\ufea5\230\ufea5\315\ufea5\001\002\000\006\011\uff3c" +
    "\064\u028b\001\002\000\004\011\110\001\002\000\012\033" +
    "\276\143\277\313\275\314\301\001\002\000\022\067\u010d" +
    "\070\u010e\071\u010f\072\u0114\073\u0115\227\u0110\230\u0117\315" +
    "\u0112\001\002\000\014\067\344\070\345\071\346\072\352" +
    "\073\351\001\002\000\012\033\276\143\277\313\275\314" +
    "\301\001\002\000\006\244\310\245\312\001\002\000\004" +
    "\011\110\001\002\000\012\033\276\143\277\313\275\314" +
    "\301\001\002\000\010\011\uff20\160\265\162\uff20\001\002" +
    "\000\006\011\uff27\160\106\001\002\000\004\011\043\001" +
    "\002\000\006\011\ufeeb\165\ufeeb\001\002\000\010\251\ufeb0" +
    "\300\ufeb0\311\045\001\002\000\006\251\ufeb2\300\047\001" +
    "\002\000\006\251\ufeb1\300\ufeb1\001\002\000\004\251\050" +
    "\001\002\000\004\251\ufeb3\001\002\000\034\211\ufec2\271" +
    "\ufec2\272\ufec2\273\ufec2\274\ufec2\275\ufec2\276\ufec2\277\ufec2" +
    "\300\ufec2\301\ufec2\302\ufec2\304\052\305\051\001\002\000" +
    "\030\211\ufec3\271\ufec3\272\ufec3\273\ufec3\274\ufec3\275\ufec3" +
    "\276\ufec3\277\ufec3\300\ufec3\301\ufec3\302\ufec3\001\002\000" +
    "\030\211\ufec4\271\ufec4\272\ufec4\273\ufec4\274\ufec4\275\ufec4" +
    "\276\ufec4\277\ufec4\300\ufec4\301\ufec4\302\ufec4\001\002\000" +
    "\030\211\ufebf\271\ufebf\272\054\273\ufebf\274\ufebf\275\ufebf" +
    "\276\ufebf\277\ufebf\300\056\301\ufebf\302\ufebf\001\002\000" +
    "\024\211\ufec1\271\ufec1\273\ufec1\274\ufec1\275\ufec1\276\ufec1" +
    "\277\ufec1\301\ufec1\302\ufec1\001\002\000\024\211\ufeba\271" +
    "\057\273\060\274\063\275\061\276\ufeba\277\ufeba\301\ufeba" +
    "\302\ufeba\001\002\000\024\211\ufec0\271\ufec0\273\ufec0\274" +
    "\ufec0\275\ufec0\276\ufec0\277\ufec0\301\ufec0\302\ufec0\001\002" +
    "\000\014\211\ufebe\276\ufebe\277\ufebe\301\ufebe\302\ufebe\001" +
    "\002\000\014\211\ufebd\276\ufebd\277\ufebd\301\ufebd\302\ufebd" +
    "\001\002\000\014\211\ufebc\276\ufebc\277\ufebc\301\ufebc\302" +
    "\ufebc\001\002\000\014\211\ufeb6\276\067\277\066\301\065" +
    "\302\ufeb6\001\002\000\014\211\ufebb\276\ufebb\277\ufebb\301" +
    "\ufebb\302\ufebb\001\002\000\006\211\ufeb4\302\071\001\002" +
    "\000\006\211\ufeb7\302\ufeb7\001\002\000\006\211\ufeb8\302" +
    "\ufeb8\001\002\000\006\211\ufeb9\302\ufeb9\001\002\000\004" +
    "\211\072\001\002\000\004\211\ufeb5\001\002\000\004\057" +
    "\010\001\002\000\014\033\ufeae\143\ufeae\211\075\313\ufeae" +
    "\314\ufeae\001\002\000\012\033\ufec5\143\ufec5\313\ufec5\314" +
    "\ufec5\001\002\000\004\056\076\001\002\000\014\033\ufeac" +
    "\051\100\143\ufeac\313\ufeac\314\ufeac\001\002\000\012\033" +
    "\ufeaf\143\ufeaf\313\ufeaf\314\ufeaf\001\002\000\004\011\101" +
    "\001\002\000\014\033\ufea9\034\103\143\ufea9\313\ufea9\314" +
    "\ufea9\001\002\000\012\033\ufead\143\ufead\313\ufead\314\ufead" +
    "\001\002\000\004\011\101\001\002\000\012\033\ufeab\143" +
    "\ufeab\313\ufeab\314\ufeab\001\002\000\012\033\ufeaa\143\ufeaa" +
    "\313\ufeaa\314\ufeaa\001\002\000\010\004\216\005\217\040" +
    "\257\001\002\000\004\011\110\001\002\000\306\003\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\033\uffd5\034\uffd5\035\250\040" +
    "\uffd5\041\uffd5\045\uffd5\047\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5\066" +
    "\uffd5\077\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\106\uffd5" +
    "\110\uffd5\111\uffd5\114\uffd5\116\uffd5\117\uffd5\120\uffd5\121" +
    "\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5" +
    "\130\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5\136" +
    "\uffd5\137\uffd5\140\uffd5\141\uffd5\142\uffd5\143\uffd5\144\uffd5" +
    "\145\uffd5\146\uffd5\150\uffd5\154\uffd5\155\uffd5\162\uffd5\163" +
    "\uffd5\164\uffd5\165\uffd5\167\uffd5\170\uffd5\171\uffd5\172\uffd5" +
    "\173\uffd5\174\uffd5\176\uffd5\177\uffd5\200\uffd5\201\uffd5\211" +
    "\uffd5\233\uffd5\234\uffd5\236\uffd5\240\uffd5\244\uffd5\245\uffd5" +
    "\246\uffd5\247\uffd5\306\uffd5\313\uffd5\314\uffd5\316\uffd5\001" +
    "\002\000\004\164\112\001\002\000\004\011\110\001\002" +
    "\000\004\025\114\001\002\000\016\004\117\005\116\006" +
    "\125\007\121\011\110\040\124\001\002\000\016\033\uff2b" +
    "\034\243\143\uff2b\163\uff2b\313\uff2b\314\uff2b\001\002\000" +
    "\034\014\uffbd\015\uffbd\016\uffbd\017\uffbd\033\uffbd\034\uffbd" +
    "\041\uffbd\143\uffbd\162\uffbd\163\uffbd\165\uffbd\313\uffbd\314" +
    "\uffbd\001\002\000\034\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\033\uffbc\034\uffbc\041\uffbc\143\uffbc\162\uffbc\163\uffbc\165" +
    "\uffbc\313\uffbc\314\uffbc\001\002\000\034\014\133\015\135" +
    "\016\134\017\136\033\uffc7\034\uffc7\041\uffc7\143\uffc7\162" +
    "\uffc7\163\uffc7\165\uffc7\313\uffc7\314\uffc7\001\002\000\016" +
    "\033\uff2a\034\uff2a\143\uff2a\163\uff2a\313\uff2a\314\uff2a\001" +
    "\002\000\014\033\uff7d\143\uff7d\163\164\313\uff7d\314\uff7d" +
    "\001\002\000\016\033\uff29\034\uff29\143\uff29\163\uff29\313" +
    "\uff29\314\uff29\001\002\000\014\004\117\005\116\006\125" +
    "\011\110\040\124\001\002\000\034\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\033\uffbb\034\uffbb\041\uffbb\143\uffbb\162\uffbb" +
    "\163\uffbb\165\uffbb\313\uffbb\314\uffbb\001\002\000\034\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\033\uffba\034\uffba\041\uffba" +
    "\143\uffba\162\uffba\163\uffba\165\uffba\313\uffba\314\uffba\001" +
    "\002\000\004\041\130\001\002\000\034\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\033\uffbe\034\uffbe\041\uffbe\143\uffbe\162" +
    "\uffbe\163\uffbe\165\uffbe\313\uffbe\314\uffbe\001\002\000\034" +
    "\014\133\015\135\016\134\017\136\033\uffc7\034\uffc7\041" +
    "\uffc7\143\uffc7\162\uffc7\163\uffc7\165\uffc7\313\uffc7\314\uffc7" +
    "\001\002\000\024\033\uffcc\034\uffcc\041\uffcc\143\uffcc\162" +
    "\uffcc\163\uffcc\165\uffcc\313\uffcc\314\uffcc\001\002\000\014" +
    "\004\117\005\116\006\125\011\110\040\124\001\002\000" +
    "\014\004\117\005\116\006\125\011\110\040\141\001\002" +
    "\000\014\004\117\005\116\006\125\011\110\040\124\001" +
    "\002\000\014\004\117\005\116\006\125\011\110\040\141" +
    "\001\002\000\030\014\152\015\153\033\uffc4\034\uffc4\041" +
    "\uffc4\143\uffc4\162\uffc4\163\uffc4\165\uffc4\313\uffc4\314\uffc4" +
    "\001\002\000\034\014\uffbf\015\uffbf\016\145\017\146\033" +
    "\uffbf\034\uffbf\041\uffbf\143\uffbf\162\uffbf\163\uffbf\165\uffbf" +
    "\313\uffbf\314\uffbf\001\002\000\014\004\117\005\116\006" +
    "\125\011\110\040\124\001\002\000\004\041\130\001\002" +
    "\000\034\014\uffbf\015\uffbf\016\145\017\146\033\uffbf\034" +
    "\uffbf\041\uffbf\143\uffbf\162\uffbf\163\uffbf\165\uffbf\313\uffbf" +
    "\314\uffbf\001\002\000\030\014\uffc2\015\uffc2\033\uffc2\034" +
    "\uffc2\041\uffc2\143\uffc2\162\uffc2\163\uffc2\165\uffc2\313\uffc2" +
    "\314\uffc2\001\002\000\014\004\117\005\116\006\125\011" +
    "\110\040\141\001\002\000\014\004\117\005\116\006\125" +
    "\011\110\040\141\001\002\000\030\014\uffc0\015\uffc0\033" +
    "\uffc0\034\uffc0\041\uffc0\143\uffc0\162\uffc0\163\uffc0\165\uffc0" +
    "\313\uffc0\314\uffc0\001\002\000\030\014\uffc1\015\uffc1\033" +
    "\uffc1\034\uffc1\041\uffc1\143\uffc1\162\uffc1\163\uffc1\165\uffc1" +
    "\313\uffc1\314\uffc1\001\002\000\030\014\uffc3\015\uffc3\033" +
    "\uffc3\034\uffc3\041\uffc3\143\uffc3\162\uffc3\163\uffc3\165\uffc3" +
    "\313\uffc3\314\uffc3\001\002\000\014\004\117\005\116\006" +
    "\125\011\110\040\124\001\002\000\014\004\117\005\116" +
    "\006\125\011\110\040\124\001\002\000\024\033\uffca\034" +
    "\uffca\041\uffca\143\uffca\162\uffca\163\uffca\165\uffca\313\uffca" +
    "\314\uffca\001\002\000\024\033\uffc5\034\uffc5\041\uffc5\143" +
    "\uffc5\162\uffc5\163\uffc5\165\uffc5\313\uffc5\314\uffc5\001\002" +
    "\000\024\033\uffc6\034\uffc6\041\uffc6\143\uffc6\162\uffc6\163" +
    "\uffc6\165\uffc6\313\uffc6\314\uffc6\001\002\000\024\033\uffc8" +
    "\034\uffc8\041\uffc8\143\uffc8\162\uffc8\163\uffc8\165\uffc8\313" +
    "\uffc8\314\uffc8\001\002\000\030\014\152\015\153\033\uffc4" +
    "\034\uffc4\041\uffc4\143\uffc4\162\uffc4\163\uffc4\165\uffc4\313" +
    "\uffc4\314\uffc4\001\002\000\024\033\uffcb\034\uffcb\041\uffcb" +
    "\143\uffcb\162\uffcb\163\uffcb\165\uffcb\313\uffcb\314\uffcb\001" +
    "\002\000\024\033\uffc9\034\uffc9\041\uffc9\143\uffc9\162\uffc9" +
    "\163\uffc9\165\uffc9\313\uffc9\314\uffc9\001\002\000\012\033" +
    "\uff2e\143\uff2e\313\uff2e\314\uff2e\001\002\000\004\011\110" +
    "\001\002\000\026\021\166\022\170\023\173\024\200\025" +
    "\174\026\176\027\201\110\167\142\172\144\202\001\002" +
    "\000\016\004\uff73\005\uff73\006\uff73\007\uff73\047\uff73\111" +
    "\uff73\001\002\000\004\040\233\001\002\000\016\004\uff71" +
    "\005\uff71\006\uff71\007\uff71\047\uff71\111\uff71\001\002\000" +
    "\016\004\225\005\231\006\230\007\223\047\227\111\226" +
    "\001\002\000\006\004\216\005\217\001\002\000\016\004" +
    "\uff72\005\uff72\006\uff72\007\uff72\047\uff72\111\uff72\001\002" +
    "\000\016\004\uff6d\005\uff6d\006\uff6d\007\uff6d\047\uff6d\111" +
    "\uff6d\001\002\000\034\030\uff74\031\uff74\033\uff74\041\uff74" +
    "\143\uff74\152\uff74\153\uff74\171\uff74\172\uff74\173\uff74\211" +
    "\uff74\313\uff74\314\uff74\001\002\000\016\004\uff6e\005\uff6e" +
    "\006\uff6e\007\uff6e\047\uff6e\111\uff6e\001\002\000\032\030" +
    "\204\031\210\033\uff7b\143\uff7b\152\205\153\207\171\uff7b" +
    "\172\uff7b\173\uff7b\211\uff7b\313\uff7b\314\uff7b\001\002\000" +
    "\016\004\uff70\005\uff70\006\uff70\007\uff70\047\uff70\111\uff70" +
    "\001\002\000\016\004\uff6f\005\uff6f\006\uff6f\007\uff6f\047" +
    "\uff6f\111\uff6f\001\002\000\016\004\uff6c\005\uff6c\006\uff6c" +
    "\007\uff6c\047\uff6c\111\uff6c\001\002\000\022\033\uff7e\143" +
    "\uff7e\171\uff7e\172\uff7e\173\uff7e\211\uff7e\313\uff7e\314\uff7e" +
    "\001\002\000\016\011\uff79\202\uff79\203\uff79\204\uff79\205" +
    "\uff79\206\uff79\001\002\000\016\011\uff77\202\uff77\203\uff77" +
    "\204\uff77\205\uff77\206\uff77\001\002\000\004\011\110\001" +
    "\002\000\016\011\uff76\202\uff76\203\uff76\204\uff76\205\uff76" +
    "\206\uff76\001\002\000\016\011\uff78\202\uff78\203\uff78\204" +
    "\uff78\205\uff78\206\uff78\001\002\000\026\021\166\022\170" +
    "\023\173\024\200\025\174\026\176\027\201\110\167\142" +
    "\172\144\202\001\002\000\022\033\uff7c\143\uff7c\171\uff7c" +
    "\172\uff7c\173\uff7c\211\uff7c\313\uff7c\314\uff7c\001\002\000" +
    "\032\030\204\031\210\033\uff7b\143\uff7b\152\205\153\207" +
    "\171\uff7b\172\uff7b\173\uff7b\211\uff7b\313\uff7b\314\uff7b\001" +
    "\002\000\022\033\uff7a\143\uff7a\171\uff7a\172\uff7a\173\uff7a" +
    "\211\uff7a\313\uff7a\314\uff7a\001\002\000\004\030\220\001" +
    "\002\000\070\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8" +
    "\016\uffd8\020\uffd8\030\uffd8\034\uffd8\040\uffd8\041\uffd8\047" +
    "\uffd8\106\uffd8\111\uffd8\161\uffd8\162\uffd8\165\uffd8\202\uffd8" +
    "\203\uffd8\204\uffd8\205\uffd8\206\uffd8\211\uffd8\222\uffd8\223" +
    "\uffd8\224\uffd8\225\uffd8\001\002\000\070\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\011\uffd9\016\uffd9\020\uffd9\030\uffd9\034" +
    "\uffd9\040\uffd9\041\uffd9\047\uffd9\106\uffd9\111\uffd9\161\uffd9" +
    "\162\uffd9\165\uffd9\202\uffd9\203\uffd9\204\uffd9\205\uffd9\206" +
    "\uffd9\211\uffd9\222\uffd9\223\uffd9\224\uffd9\225\uffd9\001\002" +
    "\000\006\004\216\005\217\001\002\000\016\004\uff6b\005" +
    "\uff6b\006\uff6b\007\uff6b\047\uff6b\111\uff6b\001\002\000\034" +
    "\030\uff75\031\uff75\033\uff75\041\uff75\143\uff75\152\uff75\153" +
    "\uff75\171\uff75\172\uff75\173\uff75\211\uff75\313\uff75\314\uff75" +
    "\001\002\000\040\030\uffd2\031\uffd2\033\uffd2\034\uffd2\041" +
    "\uffd2\143\uffd2\152\uffd2\153\uffd2\171\uffd2\172\uffd2\173\uffd2" +
    "\211\uffd2\241\uffd2\313\uffd2\314\uffd2\001\002\000\036\030" +
    "\ufec7\031\ufec7\033\ufec7\041\ufec7\143\ufec7\152\ufec7\153\ufec7" +
    "\171\ufec7\172\ufec7\173\ufec7\211\ufec7\241\ufec7\313\ufec7\314" +
    "\ufec7\001\002\000\040\030\uffcf\031\uffcf\033\uffcf\034\uffcf" +
    "\041\uffcf\143\uffcf\152\uffcf\153\uffcf\171\uffcf\172\uffcf\173" +
    "\uffcf\211\uffcf\241\uffcf\313\uffcf\314\uffcf\001\002\000\040" +
    "\030\uffd1\031\uffd1\033\uffd1\034\uffd1\041\uffd1\143\uffd1\152" +
    "\uffd1\153\uffd1\171\uffd1\172\uffd1\173\uffd1\211\uffd1\241\uffd1" +
    "\313\uffd1\314\uffd1\001\002\000\004\011\232\001\002\000" +
    "\040\030\uffce\031\uffce\033\uffce\034\uffce\041\uffce\143\uffce" +
    "\152\uffce\153\uffce\171\uffce\172\uffce\173\uffce\211\uffce\241" +
    "\uffce\313\uffce\314\uffce\001\002\000\040\030\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\041\uffd0\143\uffd0\152\uffd0\153\uffd0\171" +
    "\uffd0\172\uffd0\173\uffd0\211\uffd0\241\uffd0\313\uffd0\314\uffd0" +
    "\001\002\000\036\030\ufec6\031\ufec6\033\ufec6\041\ufec6\143" +
    "\ufec6\152\ufec6\153\ufec6\171\ufec6\172\ufec6\173\ufec6\211\ufec6" +
    "\241\ufec6\313\ufec6\314\ufec6\001\002\000\014\004\225\005" +
    "\231\006\230\007\223\111\226\001\002\000\004\041\241" +
    "\001\002\000\006\034\236\041\uff67\001\002\000\014\004" +
    "\225\005\231\006\230\007\223\111\226\001\002\000\004" +
    "\041\uff69\001\002\000\004\041\uff68\001\002\000\034\030" +
    "\uff6a\031\uff6a\033\uff6a\041\uff6a\143\uff6a\152\uff6a\153\uff6a" +
    "\171\uff6a\172\uff6a\173\uff6a\211\uff6a\313\uff6a\314\uff6a\001" +
    "\002\000\024\033\uffcd\034\uffcd\041\uffcd\143\uffcd\162\uffcd" +
    "\163\uffcd\165\uffcd\313\uffcd\314\uffcd\001\002\000\004\011" +
    "\110\001\002\000\014\033\uff2d\143\uff2d\163\uff2d\313\uff2d" +
    "\314\uff2d\001\002\000\004\025\246\001\002\000\016\004" +
    "\117\005\116\006\125\007\121\011\110\040\124\001\002" +
    "\000\014\033\uff2c\143\uff2c\163\uff2c\313\uff2c\314\uff2c\001" +
    "\002\000\004\011\252\001\002\000\304\003\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\011\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7\045" +
    "\uffd7\047\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\065\uffd7\066\uffd7\077\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\106\uffd7\110\uffd7\111\uffd7" +
    "\114\uffd7\116\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7\123" +
    "\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7" +
    "\132\uffd7\133\uffd7\134\uffd7\135\uffd7\136\uffd7\137\uffd7\140" +
    "\uffd7\141\uffd7\142\uffd7\143\uffd7\144\uffd7\145\uffd7\146\uffd7" +
    "\150\uffd7\154\uffd7\155\uffd7\162\uffd7\163\uffd7\164\uffd7\165" +
    "\uffd7\167\uffd7\170\uffd7\171\uffd7\172\uffd7\173\uffd7\174\uffd7" +
    "\176\uffd7\177\uffd7\200\uffd7\201\uffd7\211\uffd7\233\uffd7\234" +
    "\uffd7\236\uffd7\240\uffd7\244\uffd7\245\uffd7\246\uffd7\247\uffd7" +
    "\306\uffd7\313\uffd7\314\uffd7\316\uffd7\001\002\000\306\003" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\033\uffd3\034\uffd3\035\253" +
    "\040\uffd3\041\uffd3\045\uffd3\047\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3" +
    "\066\uffd3\077\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\106" +
    "\uffd3\110\uffd3\111\uffd3\114\uffd3\116\uffd3\117\uffd3\120\uffd3" +
    "\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3\126\uffd3\127" +
    "\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3\134\uffd3\135\uffd3" +
    "\136\uffd3\137\uffd3\140\uffd3\141\uffd3\142\uffd3\143\uffd3\144" +
    "\uffd3\145\uffd3\146\uffd3\150\uffd3\154\uffd3\155\uffd3\162\uffd3" +
    "\163\uffd3\164\uffd3\165\uffd3\167\uffd3\170\uffd3\171\uffd3\172" +
    "\uffd3\173\uffd3\174\uffd3\176\uffd3\177\uffd3\200\uffd3\201\uffd3" +
    "\211\uffd3\233\uffd3\234\uffd3\236\uffd3\240\uffd3\244\uffd3\245" +
    "\uffd3\246\uffd3\247\uffd3\306\uffd3\313\uffd3\314\uffd3\316\uffd3" +
    "\001\002\000\004\011\255\001\002\000\304\003\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\033\uffd6\034\uffd6\040\uffd6\041\uffd6" +
    "\045\uffd6\047\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\065\uffd6\066\uffd6\077\uffd6" +
    "\101\uffd6\102\uffd6\103\uffd6\104\uffd6\106\uffd6\110\uffd6\111" +
    "\uffd6\114\uffd6\116\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6" +
    "\123\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131" +
    "\uffd6\132\uffd6\133\uffd6\134\uffd6\135\uffd6\136\uffd6\137\uffd6" +
    "\140\uffd6\141\uffd6\142\uffd6\143\uffd6\144\uffd6\145\uffd6\146" +
    "\uffd6\150\uffd6\154\uffd6\155\uffd6\162\uffd6\163\uffd6\164\uffd6" +
    "\165\uffd6\167\uffd6\170\uffd6\171\uffd6\172\uffd6\173\uffd6\174" +
    "\uffd6\176\uffd6\177\uffd6\200\uffd6\201\uffd6\211\uffd6\233\uffd6" +
    "\234\uffd6\236\uffd6\240\uffd6\244\uffd6\245\uffd6\246\uffd6\247" +
    "\uffd6\306\uffd6\313\uffd6\314\uffd6\316\uffd6\001\002\000\304" +
    "\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\033\uffd4\034\uffd4\040" +
    "\uffd4\041\uffd4\045\uffd4\047\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\066" +
    "\uffd4\077\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\106\uffd4" +
    "\110\uffd4\111\uffd4\114\uffd4\116\uffd4\117\uffd4\120\uffd4\121" +
    "\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4" +
    "\130\uffd4\131\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4\136" +
    "\uffd4\137\uffd4\140\uffd4\141\uffd4\142\uffd4\143\uffd4\144\uffd4" +
    "\145\uffd4\146\uffd4\150\uffd4\154\uffd4\155\uffd4\162\uffd4\163" +
    "\uffd4\164\uffd4\165\uffd4\167\uffd4\170\uffd4\171\uffd4\172\uffd4" +
    "\173\uffd4\174\uffd4\176\uffd4\177\uffd4\200\uffd4\201\uffd4\211" +
    "\uffd4\233\uffd4\234\uffd4\236\uffd4\240\uffd4\244\uffd4\245\uffd4" +
    "\246\uffd4\247\uffd4\306\uffd4\313\uffd4\314\uffd4\316\uffd4\001" +
    "\002\000\036\004\uffaf\005\uffaf\006\uffaf\011\uffaf\016\uffaf" +
    "\040\uffaf\047\uffaf\161\uffaf\162\uffaf\202\uffaf\203\uffaf\204" +
    "\uffaf\205\uffaf\206\uffaf\001\002\000\006\004\216\005\217" +
    "\001\002\000\006\011\uff25\161\262\001\002\000\004\011" +
    "\uff28\001\002\000\006\011\uff26\162\uff26\001\002\000\004" +
    "\041\264\001\002\000\036\004\uffae\005\uffae\006\uffae\011" +
    "\uffae\016\uffae\040\uffae\047\uffae\161\uffae\162\uffae\202\uffae" +
    "\203\uffae\204\uffae\205\uffae\206\uffae\001\002\000\010\004" +
    "\216\005\217\040\257\001\002\000\006\011\uff22\162\267" +
    "\001\002\000\004\011\uff23\001\002\000\004\011\110\001" +
    "\002\000\014\033\uff7d\143\uff7d\163\164\313\uff7d\314\uff7d" +
    "\001\002\000\012\033\uff24\143\uff24\313\uff24\314\uff24\001" +
    "\002\000\010\011\uff25\161\262\162\uff25\001\002\000\006" +
    "\011\uff21\162\uff21\001\002\000\054\002\uffda\003\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda" +
    "\063\uffda\143\uffda\231\uffda\233\uffda\234\uffda\236\uffda\240" +
    "\uffda\241\uffda\244\uffda\245\uffda\246\uffda\247\uffda\001\002" +
    "\000\054\002\uffdc\003\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\143\uffdc\231\uffdc" +
    "\233\uffdc\234\uffdc\236\uffdc\240\uffdc\241\uffdc\244\uffdc\245" +
    "\uffdc\246\uffdc\247\uffdc\001\002\000\054\002\uffdd\003\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\143\uffdd\231\uffdd\233\uffdd\234\uffdd\236\uffdd" +
    "\240\uffdd\241\uffdd\244\uffdd\245\uffdd\246\uffdd\247\uffdd\001" +
    "\002\000\042\002\ufffe\003\033\054\026\055\037\056\040" +
    "\057\010\060\025\061\031\062\011\063\032\143\024\233" +
    "\004\234\042\236\035\240\022\247\041\001\002\000\054" +
    "\002\uffdb\003\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\143\uffdb\231\uffdb\233\uffdb" +
    "\234\uffdb\236\uffdb\240\uffdb\241\uffdb\244\uffdb\245\uffdb\246" +
    "\uffdb\247\uffdb\001\002\000\004\002\ufffa\001\002\000\012" +
    "\033\276\143\277\313\275\314\301\001\002\000\042\002" +
    "\ufffe\003\033\054\026\055\037\056\040\057\010\060\025" +
    "\061\031\062\011\063\032\143\024\233\004\234\042\236" +
    "\035\240\022\247\041\001\002\000\004\002\uffef\001\002" +
    "\000\012\033\276\143\277\313\275\314\301\001\002\000" +
    "\042\002\ufffe\003\033\054\026\055\037\056\040\057\010" +
    "\060\025\061\031\062\011\063\032\143\024\233\004\234" +
    "\042\236\035\240\022\247\041\001\002\000\020\033\uff10" +
    "\106\uff10\143\uff10\242\315\243\313\313\uff10\314\uff10\001" +
    "\002\000\012\033\276\143\277\313\275\314\301\001\002" +
    "\000\006\242\315\243\313\001\002\000\062\003\uff1d\011" +
    "\uff1d\033\uff1d\047\uff1d\054\uff1d\055\uff1d\056\uff1d\057\uff1d" +
    "\060\uff1d\061\uff1d\062\uff1d\063\uff1d\106\uff1d\143\uff1d\233" +
    "\uff1d\234\uff1d\236\uff1d\240\uff1d\244\uff1d\245\uff1d\246\uff1d" +
    "\247\uff1d\313\uff1d\314\uff1d\001\002\000\016\011\110\033" +
    "\uff0d\047\320\143\uff0d\313\uff0d\314\uff0d\001\002\000\062" +
    "\003\uff1e\011\uff1e\033\uff1e\047\uff1e\054\uff1e\055\uff1e\056" +
    "\uff1e\057\uff1e\060\uff1e\061\uff1e\062\uff1e\063\uff1e\106\uff1e" +
    "\143\uff1e\233\uff1e\234\uff1e\236\uff1e\240\uff1e\244\uff1e\245" +
    "\uff1e\246\uff1e\247\uff1e\313\uff1e\314\uff1e\001\002\000\012" +
    "\033\uff08\143\uff08\313\uff08\314\uff08\001\002\000\056\003" +
    "\uff0f\033\uff0f\054\uff0f\055\uff0f\056\uff0f\057\uff0f\060\uff0f" +
    "\061\uff0f\062\uff0f\063\uff0f\106\uff0f\143\uff0f\233\uff0f\234" +
    "\uff0f\236\uff0f\240\uff0f\244\uff0f\245\uff0f\246\uff0f\247\uff0f" +
    "\313\uff0f\314\uff0f\001\002\000\004\011\321\001\002\000" +
    "\056\003\uff0e\033\uff0e\054\uff0e\055\uff0e\056\uff0e\057\uff0e" +
    "\060\uff0e\061\uff0e\062\uff0e\063\uff0e\106\uff0e\143\uff0e\233" +
    "\uff0e\234\uff0e\236\uff0e\240\uff0e\244\uff0e\245\uff0e\246\uff0e" +
    "\247\uff0e\313\uff0e\314\uff0e\001\002\000\052\002\uff14\003" +
    "\uff14\054\uff14\055\uff14\056\uff14\057\uff14\060\uff14\061\uff14" +
    "\062\uff14\063\uff14\143\uff14\233\uff14\234\uff14\236\uff14\240" +
    "\uff14\241\uff14\244\uff14\245\uff14\246\uff14\247\uff14\001\002" +
    "\000\014\033\uff0b\106\327\143\uff0b\313\uff0b\314\uff0b\001" +
    "\002\000\020\011\110\033\uff0d\047\320\106\uff0d\143\uff0d" +
    "\313\uff0d\314\uff0d\001\002\000\014\033\uff11\106\uff11\143" +
    "\uff11\313\uff11\314\uff11\001\002\000\012\033\uff12\143\uff12" +
    "\313\uff12\314\uff12\001\002\000\004\040\330\001\002\000" +
    "\004\310\331\001\002\000\004\025\332\001\002\000\006" +
    "\077\334\264\335\001\002\000\004\041\336\001\002\000" +
    "\022\033\uff0a\034\uff0a\041\uff0a\143\uff0a\165\uff0a\240\uff0a" +
    "\313\uff0a\314\uff0a\001\002\000\022\033\uff09\034\uff09\041" +
    "\uff09\143\uff09\165\uff09\240\uff09\313\uff09\314\uff09\001\002" +
    "\000\012\033\uff0c\143\uff0c\313\uff0c\314\uff0c\001\002\000" +
    "\004\002\ufff3\001\002\000\052\002\uff13\003\uff13\054\uff13" +
    "\055\uff13\056\uff13\057\uff13\060\uff13\061\uff13\062\uff13\063" +
    "\uff13\143\uff13\233\uff13\234\uff13\236\uff13\240\uff13\241\uff13" +
    "\244\uff13\245\uff13\246\uff13\247\uff13\001\002\000\042\002" +
    "\ufffe\003\033\054\026\055\037\056\040\057\010\060\025" +
    "\061\031\062\011\063\032\143\024\233\004\234\042\236" +
    "\035\240\022\247\041\001\002\000\004\002\ufff1\001\002" +
    "\000\012\033\uff54\143\uff54\313\uff54\314\uff54\001\002\000" +
    "\006\011\uff4d\156\356\001\002\000\006\011\uff4d\156\356" +
    "\001\002\000\006\011\uff4d\156\356\001\002\000\012\033" +
    "\uff52\143\uff52\313\uff52\314\uff52\001\002\000\012\033\uff4f" +
    "\143\uff4f\313\uff4f\314\uff4f\001\002\000\006\011\uff4d\156" +
    "\356\001\002\000\006\011\uff4d\156\356\001\002\000\012" +
    "\033\uff53\143\uff53\313\uff53\314\uff53\001\002\000\012\033" +
    "\uff50\143\uff50\313\uff50\314\uff50\001\002\000\012\033\uff51" +
    "\143\uff51\313\uff51\314\uff51\001\002\000\004\157\365\001" +
    "\002\000\004\011\110\001\002\000\012\033\uff4c\143\uff4c" +
    "\313\uff4c\314\uff4c\001\002\000\014\033\uffb6\034\362\143" +
    "\uffb6\313\uffb6\314\uffb6\001\002\000\004\011\110\001\002" +
    "\000\012\033\uffb8\143\uffb8\313\uffb8\314\uffb8\001\002\000" +
    "\012\033\uffb7\143\uffb7\313\uffb7\314\uffb7\001\002\000\004" +
    "\011\uff4e\001\002\000\004\011\110\001\002\000\014\033" +
    "\uff40\034\371\143\uff40\313\uff40\314\uff40\001\002\000\012" +
    "\033\uff43\143\uff43\313\uff43\314\uff43\001\002\000\004\011" +
    "\110\001\002\000\012\033\uff42\143\uff42\313\uff42\314\uff42" +
    "\001\002\000\012\033\uff41\143\uff41\313\uff41\314\uff41\001" +
    "\002\000\004\011\375\001\002\000\012\033\uff3f\143\uff3f" +
    "\313\uff3f\314\uff3f\001\002\000\004\011\110\001\002\000" +
    "\012\033\uff47\143\uff47\313\uff47\314\uff47\001\002\000\004" +
    "\077\u0101\001\002\000\004\011\110\001\002\000\014\033" +
    "\uff44\034\u0103\143\uff44\313\uff44\314\uff44\001\002\000\004" +
    "\011\110\001\002\000\012\033\uff46\143\uff46\313\uff46\314" +
    "\uff46\001\002\000\012\033\uff45\143\uff45\313\uff45\314\uff45" +
    "\001\002\000\004\011\110\001\002\000\012\033\uff4b\143" +
    "\uff4b\313\uff4b\314\uff4b\001\002\000\014\033\uff48\034\u0109" +
    "\143\uff48\313\uff48\314\uff48\001\002\000\004\011\110\001" +
    "\002\000\012\033\uff4a\143\uff4a\313\uff4a\314\uff4a\001\002" +
    "\000\012\033\uff49\143\uff49\313\uff49\314\uff49\001\002\000" +
    "\012\033\ufe24\143\ufe24\313\ufe24\314\ufe24\001\002\000\006" +
    "\011\u0271\074\u0272\001\002\000\006\011\110\105\u0266\001" +
    "\002\000\004\011\u0252\001\002\000\004\011\uff05\001\002" +
    "\000\012\033\ufe23\143\ufe23\313\ufe23\314\ufe23\001\002\000" +
    "\004\011\uff06\001\002\000\004\011\110\001\002\000\004" +
    "\011\110\001\002\000\004\011\110\001\002\000\012\033" +
    "\ufe2a\143\ufe2a\313\ufe2a\314\ufe2a\001\002\000\004\011\110" +
    "\001\002\000\004\040\u0119\001\002\000\006\041\ufede\047" +
    "\u011b\001\002\000\004\041\ufedf\001\002\000\004\011\u0172" +
    "\001\002\000\004\041\u011d\001\002\000\004\232\u011e\001" +
    "\002\000\052\117\u0127\120\u0124\121\u0129\122\u0125\123\u0131" +
    "\124\u0123\125\u012a\126\u0130\127\u0126\130\u0121\131\u0128\132" +
    "\u012e\133\u012b\134\u0120\135\u012f\136\u011f\137\u0132\140\u012c" +
    "\141\u012d\316\u0133\001\002\000\056\025\ufe5d\033\ufe5d\034" +
    "\ufe5d\041\ufe5d\066\ufe5d\106\ufe5d\111\ufe5d\116\ufe5d\143\ufe5d" +
    "\145\ufe5d\146\ufe5d\150\ufe5d\154\ufe5d\155\ufe5d\165\ufe5d\211" +
    "\ufe5d\240\ufe5d\260\ufe5d\261\ufe5d\262\ufe5d\313\ufe5d\314\ufe5d" +
    "\001\002\000\056\025\ufe60\033\ufe60\034\ufe60\041\ufe60\066" +
    "\ufe60\106\ufe60\111\ufe60\116\ufe60\143\ufe60\145\ufe60\146\ufe60" +
    "\150\ufe60\154\ufe60\155\ufe60\165\ufe60\211\ufe60\240\ufe60\260" +
    "\ufe60\261\ufe60\262\ufe60\313\ufe60\314\ufe60\001\002\000\056" +
    "\025\ufe64\033\ufe64\034\ufe64\041\ufe64\066\ufe64\106\ufe64\111" +
    "\ufe64\116\ufe64\143\ufe64\145\ufe64\146\ufe64\150\ufe64\154\ufe64" +
    "\155\ufe64\165\ufe64\211\ufe64\240\ufe64\260\ufe64\261\ufe64\262" +
    "\ufe64\313\ufe64\314\ufe64\001\002\000\010\106\u0152\165\ufed5" +
    "\240\ufed5\001\002\000\056\025\ufe68\033\ufe68\034\ufe68\041" +
    "\ufe68\066\ufe68\106\ufe68\111\ufe68\116\ufe68\143\ufe68\145\ufe68" +
    "\146\ufe68\150\ufe68\154\ufe68\155\ufe68\165\ufe68\211\ufe68\240" +
    "\ufe68\260\ufe68\261\ufe68\262\ufe68\313\ufe68\314\ufe68\001\002" +
    "\000\004\040\u014e\001\002\000\004\040\u0149\001\002\000" +
    "\056\025\ufe65\033\ufe65\034\ufe65\041\ufe65\066\ufe65\106\ufe65" +
    "\111\ufe65\116\ufe65\143\ufe65\145\ufe65\146\ufe65\150\ufe65\154" +
    "\ufe65\155\ufe65\165\ufe65\211\ufe65\240\ufe65\260\ufe65\261\ufe65" +
    "\262\ufe65\313\ufe65\314\ufe65\001\002\000\004\040\u0146\001" +
    "\002\000\056\025\ufe63\033\ufe63\034\ufe63\041\ufe63\066\ufe63" +
    "\106\ufe63\111\ufe63\116\ufe63\143\ufe63\145\ufe63\146\ufe63\150" +
    "\ufe63\154\ufe63\155\ufe63\165\ufe63\211\ufe63\240\ufe63\260\ufe63" +
    "\261\ufe63\262\ufe63\313\ufe63\314\ufe63\001\002\000\004\040" +
    "\u0143\001\002\000\060\025\ufe67\033\ufe67\034\ufe67\040\u0140" +
    "\041\ufe67\066\ufe67\106\ufe67\111\ufe67\116\ufe67\143\ufe67\145" +
    "\ufe67\146\ufe67\150\ufe67\154\ufe67\155\ufe67\165\ufe67\211\ufe67" +
    "\240\ufe67\260\ufe67\261\ufe67\262\ufe67\313\ufe67\314\ufe67\001" +
    "\002\000\056\025\ufe61\033\ufe61\034\ufe61\041\ufe61\066\ufe61" +
    "\106\ufe61\111\ufe61\116\ufe61\143\ufe61\145\ufe61\146\ufe61\150" +
    "\ufe61\154\ufe61\155\ufe61\165\ufe61\211\ufe61\240\ufe61\260\ufe61" +
    "\261\ufe61\262\ufe61\313\ufe61\314\ufe61\001\002\000\056\025" +
    "\ufe5b\033\ufe5b\034\ufe5b\041\ufe5b\066\ufe5b\106\ufe5b\111\ufe5b" +
    "\116\ufe5b\143\ufe5b\145\ufe5b\146\ufe5b\150\ufe5b\154\ufe5b\155" +
    "\ufe5b\165\ufe5b\211\ufe5b\240\ufe5b\260\ufe5b\261\ufe5b\262\ufe5b" +
    "\313\ufe5b\314\ufe5b\001\002\000\060\025\ufe56\033\ufe56\034" +
    "\ufe56\040\u013d\041\ufe56\066\ufe56\106\ufe56\111\ufe56\116\ufe56" +
    "\143\ufe56\145\ufe56\146\ufe56\150\ufe56\154\ufe56\155\ufe56\165" +
    "\ufe56\211\ufe56\240\ufe56\260\ufe56\261\ufe56\262\ufe56\313\ufe56" +
    "\314\ufe56\001\002\000\056\025\ufe62\033\ufe62\034\ufe62\041" +
    "\ufe62\066\ufe62\106\ufe62\111\ufe62\116\ufe62\143\ufe62\145\ufe62" +
    "\146\ufe62\150\ufe62\154\ufe62\155\ufe62\165\ufe62\211\ufe62\240" +
    "\ufe62\260\ufe62\261\ufe62\262\ufe62\313\ufe62\314\ufe62\001\002" +
    "\000\056\025\ufe5f\033\ufe5f\034\ufe5f\041\ufe5f\066\ufe5f\106" +
    "\ufe5f\111\ufe5f\116\ufe5f\143\ufe5f\145\ufe5f\146\ufe5f\150\ufe5f" +
    "\154\ufe5f\155\ufe5f\165\ufe5f\211\ufe5f\240\ufe5f\260\ufe5f\261" +
    "\ufe5f\262\ufe5f\313\ufe5f\314\ufe5f\001\002\000\056\025\ufe69" +
    "\033\ufe69\034\ufe69\041\ufe69\066\ufe69\106\ufe69\111\ufe69\116" +
    "\ufe69\143\ufe69\145\ufe69\146\ufe69\150\ufe69\154\ufe69\155\ufe69" +
    "\165\ufe69\211\ufe69\240\ufe69\260\ufe69\261\ufe69\262\ufe69\313" +
    "\ufe69\314\ufe69\001\002\000\004\040\u0137\001\002\000\056" +
    "\025\ufe5c\033\ufe5c\034\ufe5c\041\ufe5c\066\ufe5c\106\ufe5c\111" +
    "\ufe5c\116\ufe5c\143\ufe5c\145\ufe5c\146\ufe5c\150\ufe5c\154\ufe5c" +
    "\155\ufe5c\165\ufe5c\211\ufe5c\240\ufe5c\260\ufe5c\261\ufe5c\262" +
    "\ufe5c\313\ufe5c\314\ufe5c\001\002\000\004\040\u0134\001\002" +
    "\000\006\004\216\005\217\001\002\000\004\041\u0136\001" +
    "\002\000\056\025\ufe6a\033\ufe6a\034\ufe6a\041\ufe6a\066\ufe6a" +
    "\106\ufe6a\111\ufe6a\116\ufe6a\143\ufe6a\145\ufe6a\146\ufe6a\150" +
    "\ufe6a\154\ufe6a\155\ufe6a\165\ufe6a\211\ufe6a\240\ufe6a\260\ufe6a" +
    "\261\ufe6a\262\ufe6a\313\ufe6a\314\ufe6a\001\002\000\006\004" +
    "\216\005\217\001\002\000\004\034\u0139\001\002\000\006" +
    "\004\216\005\217\001\002\000\004\041\u013b\001\002\000" +
    "\056\025\ufe58\033\ufe58\034\ufe58\041\ufe58\066\ufe58\106\ufe58" +
    "\111\ufe58\116\ufe58\143\ufe58\145\ufe58\146\ufe58\150\ufe58\154" +
    "\ufe58\155\ufe58\165\ufe58\211\ufe58\240\ufe58\260\ufe58\261\ufe58" +
    "\262\ufe58\313\ufe58\314\ufe58\001\002\000\056\025\ufe5a\033" +
    "\ufe5a\034\ufe5a\041\ufe5a\066\ufe5a\106\ufe5a\111\ufe5a\116\ufe5a" +
    "\143\ufe5a\145\ufe5a\146\ufe5a\150\ufe5a\154\ufe5a\155\ufe5a\165" +
    "\ufe5a\211\ufe5a\240\ufe5a\260\ufe5a\261\ufe5a\262\ufe5a\313\ufe5a" +
    "\314\ufe5a\001\002\000\006\004\216\005\217\001\002\000" +
    "\004\041\u013f\001\002\000\056\025\ufe57\033\ufe57\034\ufe57" +
    "\041\ufe57\066\ufe57\106\ufe57\111\ufe57\116\ufe57\143\ufe57\145" +
    "\ufe57\146\ufe57\150\ufe57\154\ufe57\155\ufe57\165\ufe57\211\ufe57" +
    "\240\ufe57\260\ufe57\261\ufe57\262\ufe57\313\ufe57\314\ufe57\001" +
    "\002\000\004\205\u0141\001\002\000\004\041\u0142\001\002" +
    "\000\056\025\ufe66\033\ufe66\034\ufe66\041\ufe66\066\ufe66\106" +
    "\ufe66\111\ufe66\116\ufe66\143\ufe66\145\ufe66\146\ufe66\150\ufe66" +
    "\154\ufe66\155\ufe66\165\ufe66\211\ufe66\240\ufe66\260\ufe66\261" +
    "\ufe66\262\ufe66\313\ufe66\314\ufe66\001\002\000\006\004\216" +
    "\005\217\001\002\000\004\041\u0145\001\002\000\056\025" +
    "\ufe6b\033\ufe6b\034\ufe6b\041\ufe6b\066\ufe6b\106\ufe6b\111\ufe6b" +
    "\116\ufe6b\143\ufe6b\145\ufe6b\146\ufe6b\150\ufe6b\154\ufe6b\155" +
    "\ufe6b\165\ufe6b\211\ufe6b\240\ufe6b\260\ufe6b\261\ufe6b\262\ufe6b" +
    "\313\ufe6b\314\ufe6b\001\002\000\006\004\216\005\217\001" +
    "\002\000\004\041\u0148\001\002\000\056\025\ufe5e\033\ufe5e" +
    "\034\ufe5e\041\ufe5e\066\ufe5e\106\ufe5e\111\ufe5e\116\ufe5e\143" +
    "\ufe5e\145\ufe5e\146\ufe5e\150\ufe5e\154\ufe5e\155\ufe5e\165\ufe5e" +
    "\211\ufe5e\240\ufe5e\260\ufe5e\261\ufe5e\262\ufe5e\313\ufe5e\314" +
    "\ufe5e\001\002\000\006\004\216\005\217\001\002\000\004" +
    "\034\u014b\001\002\000\006\004\216\005\217\001\002\000" +
    "\004\041\u014d\001\002\000\056\025\ufe59\033\ufe59\034\ufe59" +
    "\041\ufe59\066\ufe59\106\ufe59\111\ufe59\116\ufe59\143\ufe59\145" +
    "\ufe59\146\ufe59\150\ufe59\154\ufe59\155\ufe59\165\ufe59\211\ufe59" +
    "\240\ufe59\260\ufe59\261\ufe59\262\ufe59\313\ufe59\314\ufe59\001" +
    "\002\000\006\004\216\005\217\001\002\000\004\041\u0150" +
    "\001\002\000\056\025\ufe6c\033\ufe6c\034\ufe6c\041\ufe6c\066" +
    "\ufe6c\106\ufe6c\111\ufe6c\116\ufe6c\143\ufe6c\145\ufe6c\146\ufe6c" +
    "\150\ufe6c\154\ufe6c\155\ufe6c\165\ufe6c\211\ufe6c\240\ufe6c\260" +
    "\ufe6c\261\ufe6c\262\ufe6c\313\ufe6c\314\ufe6c\001\002\000\006" +
    "\165\u0166\240\ufed9\001\002\000\016\232\u0154\235\u0157\254" +
    "\u0158\265\u0156\266\u015a\267\u0155\001\002\000\010\034\u0162" +
    "\165\ufed2\240\ufed2\001\002\000\004\111\u0160\001\002\000" +
    "\004\077\u015d\001\002\000\010\034\ufed0\165\ufed0\240\ufed0" +
    "\001\002\000\010\034\ufecf\165\ufecf\240\ufecf\001\002\000" +
    "\010\034\ufed1\165\ufed1\240\ufed1\001\002\000\006\165\ufed6" +
    "\240\ufed6\001\002\000\006\077\334\264\335\001\002\000" +
    "\010\034\ufecc\165\ufecc\240\ufecc\001\002\000\010\034\ufecd" +
    "\165\ufecd\240\ufecd\001\002\000\004\111\u015e\001\002\000" +
    "\004\303\u015f\001\002\000\010\034\ufecb\165\ufecb\240\ufecb" +
    "\001\002\000\004\077\u015d\001\002\000\010\034\ufece\165" +
    "\ufece\240\ufece\001\002\000\016\232\u0154\235\u0157\254\u0158" +
    "\265\u0156\266\u015a\267\u0155\001\002\000\006\165\ufed4\240" +
    "\ufed4\001\002\000\006\165\ufed3\240\ufed3\001\002\000\004" +
    "\240\u0167\001\002\000\054\117\ufeda\120\ufeda\121\ufeda\122" +
    "\ufeda\123\ufeda\124\ufeda\125\ufeda\126\ufeda\127\ufeda\130\ufeda" +
    "\131\ufeda\132\ufeda\133\ufeda\134\ufeda\135\ufeda\136\ufeda\137" +
    "\ufeda\140\ufeda\141\ufeda\240\ufeda\316\ufeda\001\002\000\004" +
    "\057\010\001\002\000\060\002\ufee0\003\ufee0\033\ufee0\054" +
    "\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\061\ufee0\062\ufee0" +
    "\063\ufee0\143\ufee0\233\ufee0\234\ufee0\236\ufee0\240\ufee0\241" +
    "\ufee0\244\ufee0\245\ufee0\246\ufee0\247\ufee0\313\ufee0\314\ufee0" +
    "\001\002\000\012\033\276\143\277\313\275\314\301\001" +
    "\002\000\004\231\u016b\001\002\000\020\004\225\005\231" +
    "\006\230\007\223\040\u016e\047\227\111\226\001\002\000" +
    "\004\241\u016d\001\002\000\060\002\ufeca\003\ufeca\033\ufeca" +
    "\054\ufeca\055\ufeca\056\ufeca\057\ufeca\060\ufeca\061\ufeca\062" +
    "\ufeca\063\ufeca\143\ufeca\233\ufeca\234\ufeca\236\ufeca\240\ufeca" +
    "\241\ufeca\244\ufeca\245\ufeca\246\ufeca\247\ufeca\313\ufeca\314" +
    "\ufeca\001\002\000\016\004\225\005\231\006\230\007\223" +
    "\047\227\111\226\001\002\000\004\241\ufec9\001\002\000" +
    "\004\041\u0171\001\002\000\004\241\ufec8\001\002\000\054" +
    "\117\ufed9\120\ufed9\121\ufed9\122\ufed9\123\ufed9\124\ufed9\125" +
    "\ufed9\126\ufed9\127\ufed9\130\ufed9\131\ufed9\132\ufed9\133\ufed9" +
    "\134\ufed9\135\ufed9\136\ufed9\137\ufed9\140\ufed9\141\ufed9\165" +
    "\u0166\316\ufed9\001\002\000\052\117\u0127\120\u0124\121\u0129" +
    "\122\u0125\123\u0131\124\u0123\125\u012a\126\u0130\127\u0126\130" +
    "\u0121\131\u0128\132\u012e\133\u012b\134\u0120\135\u012f\136\u011f" +
    "\137\u0132\140\u012c\141\u012d\316\u0133\001\002\000\012\025" +
    "\u0175\034\ufef9\041\ufef9\262\ufef9\001\002\000\004\066\u017c" +
    "\001\002\000\010\034\ufed7\041\ufed7\262\u0178\001\002\000" +
    "\006\034\u0179\041\ufedb\001\002\000\006\034\ufed8\041\ufed8" +
    "\001\002\000\004\047\u011b\001\002\000\004\041\ufedd\001" +
    "\002\000\004\041\ufedc\001\002\000\022\034\ufefa\041\ufefa" +
    "\106\ufefa\165\ufefa\211\ufefa\260\ufefa\261\ufefa\262\ufefa\001" +
    "\002\000\006\011\110\165\ufe2e\001\002\000\012\033\ufe25" +
    "\143\ufe25\313\ufe25\314\ufe25\001\002\000\006\011\110\165" +
    "\ufe2c\001\002\000\010\011\ufe2b\034\ufe2b\165\ufe2b\001\002" +
    "\000\004\165\u0182\001\002\000\004\057\010\001\002\000" +
    "\012\033\ufe30\143\ufe30\313\ufe30\314\ufe30\001\002\000\004" +
    "\165\ufe2f\001\002\000\004\034\u0186\001\002\000\006\011" +
    "\110\165\ufe2e\001\002\000\004\165\ufe2d\001\002\000\010" +
    "\061\u018a\063\u018d\114\u018c\001\002\000\012\033\ufe27\143" +
    "\ufe27\313\ufe27\314\ufe27\001\002\000\004\115\u01ff\001\002" +
    "\000\012\033\ufe15\143\ufe15\313\ufe15\314\ufe15\001\002\000" +
    "\010\011\110\100\u019d\154\u019c\001\002\000\010\070\u0190" +
    "\100\u018f\115\u018e\001\002\000\004\011\u0192\001\002\000" +
    "\004\011\u0192\001\002\000\004\011\u0192\001\002\000\012" +
    "\033\ufe12\143\ufe12\313\ufe12\314\ufe12\001\002\000\022\033" +
    "\uff57\034\uff57\041\uff57\143\uff57\200\u0195\201\u0194\313\uff57" +
    "\314\uff57\001\002\000\012\033\ufe08\143\ufe08\313\ufe08\314" +
    "\ufe08\001\002\000\020\033\uff59\034\uff59\041\uff59\143\uff59" +
    "\211\uff59\313\uff59\314\uff59\001\002\000\020\033\uff58\034" +
    "\uff58\041\uff58\143\uff58\211\uff58\313\uff58\314\uff58\001\002" +
    "\000\016\033\ufe43\034\u0197\041\ufe43\143\ufe43\313\ufe43\314" +
    "\ufe43\001\002\000\004\011\u0192\001\002\000\014\033\ufe45" +
    "\041\ufe45\143\ufe45\313\ufe45\314\ufe45\001\002\000\014\033" +
    "\ufe44\041\ufe44\143\ufe44\313\ufe44\314\ufe44\001\002\000\012" +
    "\033\ufe0a\143\ufe0a\313\ufe0a\314\ufe0a\001\002\000\012\033" +
    "\ufe09\143\ufe09\313\ufe09\314\ufe09\001\002\000\004\147\u01f6" +
    "\001\002\000\004\011\110\001\002\000\012\033\ufe10\143" +
    "\ufe10\313\ufe10\314\ufe10\001\002\000\014\033\ufe0c\034\u01d1" +
    "\143\ufe0c\313\ufe0c\314\ufe0c\001\002\000\052\117\u0127\120" +
    "\u0124\121\u0129\122\u0125\123\u0131\124\u0123\125\u012a\126\u0130" +
    "\127\u0126\130\u0121\131\u0128\132\u012e\133\u012b\134\u0120\135" +
    "\u012f\136\u011f\137\u0132\140\u012c\141\u012d\316\u0133\001\002" +
    "\000\012\033\ufe13\143\ufe13\313\ufe13\314\ufe13\001\002\000" +
    "\034\033\ufe54\034\ufe54\066\u01a8\111\u01a7\116\u01a6\143\ufe54" +
    "\145\u01a9\146\u01ab\150\u01a3\154\u01ac\155\u01aa\313\ufe54\314" +
    "\ufe54\001\002\000\004\040\u01cc\001\002\000\014\033\ufe0b" +
    "\034\ufe0b\143\ufe0b\313\ufe0b\314\ufe0b\001\002\000\036\033" +
    "\ufe54\034\ufe54\041\ufe54\066\u01a8\111\u01a7\116\u01a6\143\ufe54" +
    "\145\u01a9\146\u01ab\150\u01a3\154\u01ac\155\u01aa\313\ufe54\314" +
    "\ufe54\001\002\000\040\033\ufe49\034\ufe49\040\u01bb\041\ufe49" +
    "\066\ufe49\111\ufe49\116\ufe49\143\ufe49\145\ufe49\146\ufe49\150" +
    "\ufe49\154\ufe49\155\ufe49\313\ufe49\314\ufe49\001\002\000\036" +
    "\033\ufe52\034\ufe52\041\ufe52\066\ufe52\111\ufe52\116\ufe52\143" +
    "\ufe52\145\ufe52\146\ufe52\150\ufe52\154\ufe52\155\ufe52\313\ufe52" +
    "\314\ufe52\001\002\000\052\117\u0127\120\u0124\121\u0129\122" +
    "\u0125\123\u0131\124\u0123\125\u012a\126\u0130\127\u0126\130\u0121" +
    "\131\u0128\132\u012e\133\u012b\134\u0120\135\u012f\136\u011f\137" +
    "\u0132\140\u012c\141\u012d\316\u0133\001\002\000\004\111\u01c7" +
    "\001\002\000\004\040\u01be\001\002\000\004\147\u01b6\001" +
    "\002\000\004\147\u01ad\001\002\000\004\040\u01ae\001\002" +
    "\000\004\011\110\001\002\000\004\041\u01b0\001\002\000" +
    "\004\151\u01b1\001\002\000\004\011\110\001\002\000\004" +
    "\040\u01b3\001\002\000\004\011\110\001\002\000\004\041" +
    "\u01b5\001\002\000\036\033\ufe4f\034\ufe4f\041\ufe4f\066\ufe4f" +
    "\111\ufe4f\116\ufe4f\143\ufe4f\145\ufe4f\146\ufe4f\150\ufe4f\154" +
    "\ufe4f\155\ufe4f\313\ufe4f\314\ufe4f\001\002\000\044\033\ufe46" +
    "\034\ufe46\040\ufe46\041\ufe46\066\ufe46\111\ufe46\116\ufe46\143" +
    "\ufe46\145\ufe46\146\ufe46\150\ufe46\154\ufe46\155\ufe46\207\u01b7" +
    "\210\u01b8\313\ufe46\314\ufe46\001\002\000\042\033\ufe48\034" +
    "\ufe48\040\ufe48\041\ufe48\066\ufe48\070\ufe48\111\ufe48\116\ufe48" +
    "\143\ufe48\145\ufe48\146\ufe48\150\ufe48\154\ufe48\155\ufe48\313" +
    "\ufe48\314\ufe48\001\002\000\042\033\ufe47\034\ufe47\040\ufe47" +
    "\041\ufe47\066\ufe47\070\ufe47\111\ufe47\116\ufe47\143\ufe47\145" +
    "\ufe47\146\ufe47\150\ufe47\154\ufe47\155\ufe47\313\ufe47\314\ufe47" +
    "\001\002\000\040\033\ufe49\034\ufe49\040\u01bb\041\ufe49\066" +
    "\ufe49\111\ufe49\116\ufe49\143\ufe49\145\ufe49\146\ufe49\150\ufe49" +
    "\154\ufe49\155\ufe49\313\ufe49\314\ufe49\001\002\000\036\033" +
    "\ufe50\034\ufe50\041\ufe50\066\ufe50\111\ufe50\116\ufe50\143\ufe50" +
    "\145\ufe50\146\ufe50\150\ufe50\154\ufe50\155\ufe50\313\ufe50\314" +
    "\ufe50\001\002\000\004\011\u0192\001\002\000\004\041\u01bd" +
    "\001\002\000\036\033\ufe4a\034\ufe4a\041\ufe4a\066\ufe4a\111" +
    "\ufe4a\116\ufe4a\143\ufe4a\145\ufe4a\146\ufe4a\150\ufe4a\154\ufe4a" +
    "\155\ufe4a\313\ufe4a\314\ufe4a\001\002\000\004\011\110\001" +
    "\002\000\004\041\u01c6\001\002\000\026\021\166\022\170" +
    "\023\173\024\200\025\174\026\176\027\201\110\167\142" +
    "\172\144\202\001\002\000\014\030\204\031\210\041\ufe40" +
    "\152\205\153\207\001\002\000\004\041\ufe42\001\002\000" +
    "\004\011\110\001\002\000\004\041\ufe41\001\002\000\014" +
    "\030\ufe3f\031\ufe3f\041\ufe3f\152\ufe3f\153\ufe3f\001\002\000" +
    "\036\033\ufe4d\034\ufe4d\041\ufe4d\066\ufe4d\111\ufe4d\116\ufe4d" +
    "\143\ufe4d\145\ufe4d\146\ufe4d\150\ufe4d\154\ufe4d\155\ufe4d\313" +
    "\ufe4d\314\ufe4d\001\002\000\036\033\ufe4e\034\ufe4e\041\ufe4e" +
    "\066\ufe4e\111\ufe4e\116\ufe4e\143\ufe4e\145\ufe4e\146\ufe4e\150" +
    "\ufe4e\154\ufe4e\155\ufe4e\313\ufe4e\314\ufe4e\001\002\000\036" +
    "\033\ufe4c\034\ufe4c\041\ufe4c\066\ufe4c\111\ufe4c\116\ufe4c\143" +
    "\ufe4c\145\ufe4c\146\ufe4c\150\ufe4c\154\ufe4c\155\ufe4c\313\ufe4c" +
    "\314\ufe4c\001\002\000\036\033\ufe51\034\ufe51\041\ufe51\066" +
    "\ufe51\111\ufe51\116\ufe51\143\ufe51\145\ufe51\146\ufe51\150\ufe51" +
    "\154\ufe51\155\ufe51\313\ufe51\314\ufe51\001\002\000\016\033" +
    "\ufe53\034\ufe53\041\ufe53\143\ufe53\313\ufe53\314\ufe53\001\002" +
    "\000\016\033\ufe55\034\ufe55\041\ufe55\143\ufe55\313\ufe55\314" +
    "\ufe55\001\002\000\006\004\216\005\217\001\002\000\004" +
    "\034\u01ce\001\002\000\006\004\216\005\217\001\002\000" +
    "\004\041\u01d0\001\002\000\036\033\ufe4b\034\ufe4b\041\ufe4b" +
    "\066\ufe4b\111\ufe4b\116\ufe4b\143\ufe4b\145\ufe4b\146\ufe4b\150" +
    "\ufe4b\154\ufe4b\155\ufe4b\313\ufe4b\314\ufe4b\001\002\000\010" +
    "\011\110\100\u019d\154\u019c\001\002\000\012\033\ufe0e\143" +
    "\ufe0e\313\ufe0e\314\ufe0e\001\002\000\012\033\ufe0d\143\ufe0d" +
    "\313\ufe0d\314\ufe0d\001\002\000\022\066\u01d9\111\u01d8\116" +
    "\u01d7\145\u01da\146\u01dc\150\u01d6\154\u01dd\155\u01db\001\002" +
    "\000\014\033\ufe0c\034\u01d1\143\ufe0c\313\ufe0c\314\ufe0c\001" +
    "\002\000\004\040\u01f0\001\002\000\016\033\ufe49\034\ufe49" +
    "\040\u01bb\143\ufe49\313\ufe49\314\ufe49\001\002\000\014\033" +
    "\ufe07\034\ufe07\143\ufe07\313\ufe07\314\ufe07\001\002\000\052" +
    "\117\u0127\120\u0124\121\u0129\122\u0125\123\u0131\124\u0123\125" +
    "\u012a\126\u0130\127\u0126\130\u0121\131\u0128\132\u012e\133\u012b" +
    "\134\u0120\135\u012f\136\u011f\137\u0132\140\u012c\141\u012d\316" +
    "\u0133\001\002\000\004\111\u01ed\001\002\000\004\040\u01ea" +
    "\001\002\000\004\147\u01e7\001\002\000\004\147\u01de\001" +
    "\002\000\004\040\u01df\001\002\000\004\011\110\001\002" +
    "\000\004\041\u01e1\001\002\000\004\151\u01e2\001\002\000" +
    "\004\011\110\001\002\000\004\040\u01e4\001\002\000\004" +
    "\011\110\001\002\000\004\041\u01e6\001\002\000\014\033" +
    "\ufe04\034\ufe04\143\ufe04\313\ufe04\314\ufe04\001\002\000\022" +
    "\033\ufe46\034\ufe46\040\ufe46\143\ufe46\207\u01b7\210\u01b8\313" +
    "\ufe46\314\ufe46\001\002\000\016\033\ufe49\034\ufe49\040\u01bb" +
    "\143\ufe49\313\ufe49\314\ufe49\001\002\000\014\033\ufe05\034" +
    "\ufe05\143\ufe05\313\ufe05\314\ufe05\001\002\000\004\011\110" +
    "\001\002\000\004\041\u01ec\001\002\000\014\033\ufe02\034" +
    "\ufe02\143\ufe02\313\ufe02\314\ufe02\001\002\000\014\033\ufe03" +
    "\034\ufe03\143\ufe03\313\ufe03\314\ufe03\001\002\000\014\033" +
    "\ufe01\034\ufe01\143\ufe01\313\ufe01\314\ufe01\001\002\000\014" +
    "\033\ufe06\034\ufe06\143\ufe06\313\ufe06\314\ufe06\001\002\000" +
    "\006\004\216\005\217\001\002\000\004\034\u01f2\001\002" +
    "\000\006\004\216\005\217\001\002\000\004\041\u01f4\001" +
    "\002\000\014\033\ufe00\034\ufe00\143\ufe00\313\ufe00\314\ufe00" +
    "\001\002\000\012\033\ufe11\143\ufe11\313\ufe11\314\ufe11\001" +
    "\002\000\004\040\u01f7\001\002\000\004\011\110\001\002" +
    "\000\004\041\u01f9\001\002\000\004\151\u01fa\001\002\000" +
    "\004\011\110\001\002\000\004\040\u01fc\001\002\000\004" +
    "\011\110\001\002\000\004\041\u01fe\001\002\000\012\033" +
    "\ufe0f\143\ufe0f\313\ufe0f\314\ufe0f\001\002\000\004\011\110" +
    "\001\002\000\012\033\ufe14\143\ufe14\313\ufe14\314\ufe14\001" +
    "\002\000\014\033\u0203\047\uff02\106\uff02\165\uff02\211\uff02" +
    "\001\002\000\012\047\u0205\106\uff00\165\uff00\211\uff00\001" +
    "\002\000\006\004\216\005\217\001\002\000\012\047\uff03" +
    "\106\uff03\165\uff03\211\uff03\001\002\000\004\011\u0241\001" +
    "\002\000\010\106\u0207\165\ufef3\211\ufef3\001\002\000\012" +
    "\233\004\234\042\253\u0237\254\u0236\001\002\000\006\165" +
    "\ufee5\211\u0209\001\002\000\004\263\u0232\001\002\000\004" +
    "\165\u020b\001\002\000\004\240\u020d\001\002\000\060\002" +
    "\uff04\003\uff04\033\uff04\054\uff04\055\uff04\056\uff04\057\uff04" +
    "\060\uff04\061\uff04\062\uff04\063\uff04\143\uff04\233\uff04\234" +
    "\uff04\236\uff04\240\uff04\241\uff04\244\uff04\245\uff04\246\uff04" +
    "\247\uff04\313\uff04\314\uff04\001\002\000\040\003\u021d\054" +
    "\026\055\037\056\040\057\010\060\025\061\031\062\011" +
    "\063\032\143\u0218\233\004\234\042\236\u021f\240\022\247" +
    "\041\001\002\000\012\033\276\143\277\313\275\314\301" +
    "\001\002\000\012\033\276\143\277\313\275\314\301\001" +
    "\002\000\012\033\276\143\277\313\275\314\301\001\002" +
    "\000\042\003\u021d\054\026\055\037\056\040\057\010\060" +
    "\025\061\031\062\011\063\032\143\u0218\233\004\234\042" +
    "\236\u021f\240\022\241\ufee1\247\041\001\002\000\012\033" +
    "\276\143\277\313\275\314\301\001\002\000\050\003\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\143\uffe0\233\uffe0\234\uffe0\236\uffe0\240\uffe0" +
    "\241\uffe0\244\uffe0\245\uffe0\246\uffe0\247\uffe0\001\002\000" +
    "\012\033\276\143\277\313\275\314\301\001\002\000\012" +
    "\033\276\143\277\313\275\314\301\001\002\000\012\033" +
    "\276\143\277\313\275\314\301\001\002\000\012\033\276" +
    "\143\277\313\275\314\301\001\002\000\050\003\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\143\uffeb\233\uffeb\234\uffeb\236\uffeb\240\uffeb\241" +
    "\uffeb\244\uffeb\245\uffeb\246\uffeb\247\uffeb\001\002\000\004" +
    "\241\u0227\001\002\000\050\003\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\143\uffed" +
    "\233\uffed\234\uffed\236\uffed\240\uffed\241\uffed\244\uffed\245" +
    "\uffed\246\uffed\247\uffed\001\002\000\012\033\276\143\277" +
    "\313\275\314\301\001\002\000\050\003\uffee\054\uffee\055" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\143\uffee\233\uffee\234\uffee\236\uffee\240\uffee\241\uffee\244" +
    "\uffee\245\uffee\246\uffee\247\uffee\001\002\000\012\033\276" +
    "\143\277\313\275\314\301\001\002\000\006\244\310\245" +
    "\312\001\002\000\004\011\110\001\002\000\012\033\276" +
    "\143\277\313\275\314\301\001\002\000\050\003\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\143\uffe3\233\uffe3\234\uffe3\236\uffe3\240\uffe3\241" +
    "\uffe3\244\uffe3\245\uffe3\246\uffe3\247\uffe3\001\002\000\012" +
    "\033\276\143\277\313\275\314\301\001\002\000\050\003" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\063\uffe8\143\uffe8\233\uffe8\234\uffe8\236\uffe8\240" +
    "\uffe8\241\uffe8\244\uffe8\245\uffe8\246\uffe8\247\uffe8\001\002" +
    "\000\050\003\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\143\uffea\233\uffea\234\uffea" +
    "\236\uffea\240\uffea\241\uffea\244\uffea\245\uffea\246\uffea\247" +
    "\uffea\001\002\000\050\003\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\143\uffe7\233" +
    "\uffe7\234\uffe7\236\uffe7\240\uffe7\241\uffe7\244\uffe7\245\uffe7" +
    "\246\uffe7\247\uffe7\001\002\000\050\003\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\143\uffe6\233\uffe6\234\uffe6\236\uffe6\240\uffe6\241\uffe6\244" +
    "\uffe6\245\uffe6\246\uffe6\247\uffe6\001\002\000\060\002\ufee4" +
    "\003\ufee4\033\ufee4\054\ufee4\055\ufee4\056\ufee4\057\ufee4\060" +
    "\ufee4\061\ufee4\062\ufee4\063\ufee4\143\ufee4\233\ufee4\234\ufee4" +
    "\236\ufee4\240\ufee4\241\ufee4\244\ufee4\245\ufee4\246\ufee4\247" +
    "\ufee4\313\ufee4\314\ufee4\001\002\000\050\003\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\143\uffe1\233\uffe1\234\uffe1\236\uffe1\240\uffe1\241\uffe1" +
    "\244\uffe1\245\uffe1\246\uffe1\247\uffe1\001\002\000\050\003" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\143\uffe4\233\uffe4\234\uffe4\236\uffe4\240" +
    "\uffe4\241\uffe4\244\uffe4\245\uffe4\246\uffe4\247\uffe4\001\002" +
    "\000\050\003\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\143\uffde\233\uffde\234\uffde" +
    "\236\uffde\240\uffde\241\uffde\244\uffde\245\uffde\246\uffde\247" +
    "\uffde\001\002\000\050\003\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\143\uffe9\233" +
    "\uffe9\234\uffe9\236\uffe9\240\uffe9\241\uffe9\244\uffe9\245\uffe9" +
    "\246\uffe9\247\uffe9\001\002\000\050\003\uffec\054\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec" +
    "\143\uffec\233\uffec\234\uffec\236\uffec\240\uffec\241\uffec\244" +
    "\uffec\245\uffec\246\uffec\247\uffec\001\002\000\004\241\ufee3" +
    "\001\002\000\004\241\ufee2\001\002\000\050\003\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\143\uffdf\233\uffdf\234\uffdf\236\uffdf\240\uffdf\241" +
    "\uffdf\244\uffdf\245\uffdf\246\uffdf\247\uffdf\001\002\000\050" +
    "\003\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\143\uffe5\233\uffe5\234\uffe5\236\uffe5" +
    "\240\uffe5\241\uffe5\244\uffe5\245\uffe5\246\uffe5\247\uffe5\001" +
    "\002\000\050\003\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\143\uffe2\233\uffe2\234" +
    "\uffe2\236\uffe2\240\uffe2\241\uffe2\244\uffe2\245\uffe2\246\uffe2" +
    "\247\uffe2\001\002\000\004\165\ufee6\001\002\000\010\034" +
    "\u023e\165\ufeed\211\ufeed\001\002\000\004\165\u0238\001\002" +
    "\000\006\165\ufef4\211\ufef4\001\002\000\010\034\ufef1\165" +
    "\ufef1\211\ufef1\001\002\000\010\034\ufef0\165\ufef0\211\ufef0" +
    "\001\002\000\012\011\u023a\255\u023c\256\u0239\257\u023b\001" +
    "\002\000\010\034\ufee8\165\ufee8\211\ufee8\001\002\000\010" +
    "\034\ufee7\165\ufee7\211\ufee7\001\002\000\010\034\ufee9\165" +
    "\ufee9\211\ufee9\001\002\000\010\034\ufeea\165\ufeea\211\ufeea" +
    "\001\002\000\010\034\ufeef\165\ufeef\211\ufeef\001\002\000" +
    "\012\233\004\234\042\253\u0237\254\u0236\001\002\000\006" +
    "\165\ufef2\211\ufef2\001\002\000\006\165\ufeee\211\ufeee\001" +
    "\002\000\056\011\u0244\117\u0127\120\u0124\121\u0129\122\u0125" +
    "\123\u0131\124\u0123\125\u012a\126\u0130\127\u0126\130\u0121\131" +
    "\u0128\132\u012e\133\u012b\134\u0120\135\u012f\136\u011f\137\u0132" +
    "\140\u012c\141\u012d\251\u0243\316\u0133\001\002\000\020\025" +
    "\u0175\034\ufef9\106\ufef9\165\ufef9\211\ufef9\260\ufef9\261\ufef9" +
    "\001\002\000\004\250\u024a\001\002\000\004\262\u0249\001" +
    "\002\000\012\034\u0246\106\ufef5\165\ufef5\211\ufef5\001\002" +
    "\000\012\047\u0205\106\uff00\165\uff00\211\uff00\001\002\000" +
    "\010\106\uff01\165\uff01\211\uff01\001\002\000\010\106\ufef6" +
    "\165\ufef6\211\ufef6\001\002\000\012\034\ufefd\106\ufefd\165" +
    "\ufefd\211\ufefd\001\002\000\006\260\u024c\261\u024d\001\002" +
    "\000\012\034\ufeff\106\ufeff\165\ufeff\211\ufeff\001\002\000" +
    "\012\034\ufefc\106\ufefc\165\ufefc\211\ufefc\001\002\000\012" +
    "\034\ufefb\106\ufefb\165\ufefb\211\ufefb\001\002\000\016\034" +
    "\ufef7\106\ufef7\165\ufef7\211\ufef7\260\u024c\261\u024d\001\002" +
    "\000\012\034\ufef8\106\ufef8\165\ufef8\211\ufef8\001\002\000" +
    "\012\034\ufefe\106\ufefe\165\ufefe\211\ufefe\001\002\000\012" +
    "\033\ufe26\143\ufe26\313\ufe26\314\ufe26\001\002\000\014\033" +
    "\ufdff\106\u0253\143\ufdff\313\ufdff\314\ufdff\001\002\000\014" +
    "\075\u0258\107\u0257\111\u0256\112\u0255\113\u0259\001\002\000" +
    "\012\033\ufdfe\143\ufdfe\313\ufdfe\314\ufdfe\001\002\000\004" +
    "\025\u0264\001\002\000\014\033\ufdf8\034\ufdf8\143\ufdf8\313" +
    "\ufdf8\314\ufdf8\001\002\000\004\025\u0262\001\002\000\004" +
    "\025\u0260\001\002\000\004\025\u025e\001\002\000\014\033" +
    "\ufdfb\034\u025b\143\ufdfb\313\ufdfb\314\ufdfb\001\002\000\014" +
    "\075\u0258\107\u0257\111\u0256\112\u0255\113\u0259\001\002\000" +
    "\012\033\ufdfd\143\ufdfd\313\ufdfd\314\ufdfd\001\002\000\012" +
    "\033\ufdfc\143\ufdfc\313\ufdfc\314\ufdfc\001\002\000\004\007" +
    "\u025f\001\002\000\014\033\ufdf6\034\ufdf6\143\ufdf6\313\ufdf6" +
    "\314\ufdf6\001\002\000\004\011\u0261\001\002\000\014\033" +
    "\ufdfa\034\ufdfa\143\ufdfa\313\ufdfa\314\ufdfa\001\002\000\004" +
    "\011\u0263\001\002\000\014\033\ufdf9\034\ufdf9\143\ufdf9\313" +
    "\ufdf9\314\ufdf9\001\002\000\004\011\u0265\001\002\000\014" +
    "\033\ufdf7\034\ufdf7\143\ufdf7\313\ufdf7\314\ufdf7\001\002\000" +
    "\004\077\ufe1a\001\002\000\012\033\ufe28\143\ufe28\313\ufe28" +
    "\314\ufe28\001\002\000\004\077\ufe1b\001\002\000\004\077" +
    "\u026a\001\002\000\004\011\110\001\002\000\012\101\u026e" +
    "\102\u0270\103\u026c\104\u026f\001\002\000\012\033\ufe19\143" +
    "\ufe19\313\ufe19\314\ufe19\001\002\000\012\033\ufe1c\143\ufe1c" +
    "\313\ufe1c\314\ufe1c\001\002\000\012\033\ufe16\143\ufe16\313" +
    "\ufe16\314\ufe16\001\002\000\012\033\ufe17\143\ufe17\313\ufe17" +
    "\314\ufe17\001\002\000\012\033\ufe18\143\ufe18\313\ufe18\314" +
    "\ufe18\001\002\000\010\076\ufe21\164\ufe21\306\ufe21\001\002" +
    "\000\010\076\ufe20\164\ufe20\306\ufe20\001\002\000\012\033" +
    "\ufe29\143\ufe29\313\ufe29\314\ufe29\001\002\000\010\076\u0278" +
    "\164\u0277\306\u0275\001\002\000\004\011\u027e\001\002\000" +
    "\012\033\ufe22\143\ufe22\313\ufe22\314\ufe22\001\002\000\004" +
    "\245\u027c\001\002\000\004\075\u0279\001\002\000\004\025" +
    "\u027a\001\002\000\004\011\u027b\001\002\000\012\033\ufe1f" +
    "\143\ufe1f\313\ufe1f\314\ufe1f\001\002\000\004\307\u027d\001" +
    "\002\000\012\033\ufe1d\143\ufe1d\313\ufe1d\314\ufe1d\001\002" +
    "\000\012\033\ufe1e\143\ufe1e\313\ufe1e\314\ufe1e\001\002\000" +
    "\042\002\ufffe\003\033\054\026\055\037\056\040\057\010" +
    "\060\025\061\031\062\011\063\032\143\024\233\004\234" +
    "\042\236\035\240\022\247\041\001\002\000\004\002\ufffd" +
    "\001\002\000\026\004\225\005\231\006\230\007\223\033" +
    "\ufdf2\047\u0284\111\226\143\ufdf2\313\ufdf2\314\ufdf2\001\002" +
    "\000\014\033\ufdf0\034\u0286\143\ufdf0\313\ufdf0\314\ufdf0\001" +
    "\002\000\012\033\ufdf5\143\ufdf5\313\ufdf5\314\ufdf5\001\002" +
    "\000\004\011\u0285\001\002\000\014\033\ufdf0\034\u0286\143" +
    "\ufdf0\313\ufdf0\314\ufdf0\001\002\000\026\004\225\005\231" +
    "\006\230\007\223\033\ufdf2\047\u0284\111\226\143\ufdf2\313" +
    "\ufdf2\314\ufdf2\001\002\000\012\033\ufdf3\143\ufdf3\313\ufdf3" +
    "\314\ufdf3\001\002\000\012\033\ufdf1\143\ufdf1\313\ufdf1\314" +
    "\ufdf1\001\002\000\012\033\ufdf4\143\ufdf4\313\ufdf4\314\ufdf4" +
    "\001\002\000\004\011\110\001\002\000\004\011\uff3d\001" +
    "\002\000\010\040\u028e\065\uff3a\066\uff3a\001\002\000\006" +
    "\065\u0296\066\u0295\001\002\000\004\011\u028f\001\002\000" +
    "\006\034\u0292\041\uff37\001\002\000\004\041\u0291\001\002" +
    "\000\006\065\uff3b\066\uff3b\001\002\000\004\011\u028f\001" +
    "\002\000\004\041\uff39\001\002\000\004\041\uff38\001\002" +
    "\000\004\065\u02a3\001\002\000\004\040\u0299\001\002\000" +
    "\012\033\uff3e\143\uff3e\313\uff3e\314\uff3e\001\002\000\012" +
    "\033\uff36\143\uff36\313\uff36\314\uff36\001\002\000\014\004" +
    "\225\005\231\006\230\007\223\111\226\001\002\000\004" +
    "\041\u029f\001\002\000\006\034\u029c\041\uff2f\001\002\000" +
    "\014\004\225\005\231\006\230\007\223\111\226\001\002" +
    "\000\004\041\uff31\001\002\000\004\041\uff30\001\002\000" +
    "\014\033\uff32\034\u02a0\143\uff32\313\uff32\314\uff32\001\002" +
    "\000\004\040\u0299\001\002\000\012\033\uff34\143\uff34\313" +
    "\uff34\314\uff34\001\002\000\012\033\uff33\143\uff33\313\uff33" +
    "\314\uff33\001\002\000\012\033\uff35\143\uff35\313\uff35\314" +
    "\uff35\001\002\000\010\227\u0110\230\u0117\315\u0112\001\002" +
    "\000\012\033\ufea8\143\ufea8\313\ufea8\314\ufea8\001\002\000" +
    "\004\011\110\001\002\000\004\011\u02e3\001\002\000\010" +
    "\070\ufe7d\207\ufe7d\210\ufe7d\001\002\000\004\011\110\001" +
    "\002\000\004\011\110\001\002\000\010\070\ufe46\207\u01b7" +
    "\210\u01b8\001\002\000\004\061\u02ad\001\002\000\010\227" +
    "\ufea6\230\ufea6\315\ufea6\001\002\000\004\070\u02af\001\002" +
    "\000\004\011\110\001\002\000\012\033\ufea3\143\ufea3\313" +
    "\ufea3\314\ufea3\001\002\000\004\077\u02b2\001\002\000\004" +
    "\011\110\001\002\000\004\040\u02b4\001\002\000\004\011" +
    "\110\001\002\000\006\034\u02bf\041\ufe78\001\002\000\012" +
    "\034\uff57\041\uff57\200\u0195\201\u0194\001\002\000\004\041" +
    "\u02b8\001\002\000\014\033\ufe75\143\ufe75\212\u02ba\313\ufe75" +
    "\314\ufe75\001\002\000\012\033\ufe7b\143\ufe7b\313\ufe7b\314" +
    "\ufe7b\001\002\000\004\040\u02bb\001\002\000\004\011\110" +
    "\001\002\000\004\041\u02bd\001\002\000\012\033\ufe76\143" +
    "\ufe76\313\ufe76\314\ufe76\001\002\000\006\034\ufe77\041\ufe77" +
    "\001\002\000\004\011\110\001\002\000\004\041\ufe7a\001" +
    "\002\000\004\041\ufe79\001\002\000\004\040\u02c4\001\002" +
    "\000\012\033\ufea2\143\ufea2\313\ufea2\314\ufea2\001\002\000" +
    "\012\011\110\100\u02c6\146\u02c7\154\u02c5\001\002\000\004" +
    "\147\u02d9\001\002\000\004\011\u02d7\001\002\000\004\147" +
    "\u02d4\001\002\000\004\041\u02d0\001\002\000\052\117\u0127" +
    "\120\u0124\121\u0129\122\u0125\123\u0131\124\u0123\125\u012a\126" +
    "\u0130\127\u0126\130\u0121\131\u0128\132\u012e\133\u012b\134\u0120" +
    "\135\u012f\136\u011f\137\u0132\140\u012c\141\u012d\316\u0133\001" +
    "\002\000\006\034\u02cb\041\ufe71\001\002\000\012\011\110" +
    "\100\u02c6\146\u02c7\154\u02c5\001\002\000\004\041\ufe73\001" +
    "\002\000\004\041\ufe72\001\002\000\026\034\ufe54\041\ufe54" +
    "\066\u01a8\111\u01a7\116\u01a6\145\u01a9\146\u01ab\150\u01a3\154" +
    "\u01ac\155\u01aa\001\002\000\006\034\ufe70\041\ufe70\001\002" +
    "\000\014\033\ufe3d\077\u02d2\143\ufe3d\313\ufe3d\314\ufe3d\001" +
    "\002\000\012\033\ufe74\143\ufe74\313\ufe74\314\ufe74\001\002" +
    "\000\004\146\u02d3\001\002\000\012\033\ufe3e\143\ufe3e\313" +
    "\ufe3e\314\ufe3e\001\002\000\014\034\ufe46\040\ufe46\041\ufe46" +
    "\207\u01b7\210\u01b8\001\002\000\010\034\ufe49\040\u01bb\041" +
    "\ufe49\001\002\000\006\034\ufe6e\041\ufe6e\001\002\000\022" +
    "\066\u01a8\111\u01a7\116\u01a6\145\u01a9\146\u01ab\150\u01a3\154" +
    "\u01ac\155\u01aa\001\002\000\006\034\ufe6f\041\ufe6f\001\002" +
    "\000\004\040\u02da\001\002\000\004\011\110\001\002\000" +
    "\004\041\u02dc\001\002\000\004\151\u02dd\001\002\000\004" +
    "\011\110\001\002\000\004\040\u02df\001\002\000\004\011" +
    "\110\001\002\000\004\041\u02e1\001\002\000\006\034\ufe6d" +
    "\041\ufe6d\001\002\000\012\033\ufea0\143\ufea0\313\ufea0\314" +
    "\ufea0\001\002\000\020\033\ufe3a\106\ufe3a\143\ufe3a\162\u02e5" +
    "\211\u02e6\313\ufe3a\314\ufe3a\001\002\000\012\033\ufea1\143" +
    "\ufea1\313\ufea1\314\ufea1\001\002\000\004\112\ufe38\001\002" +
    "\000\004\112\ufe39\001\002\000\004\112\u02f6\001\002\000" +
    "\014\033\ufe36\106\u02e9\143\ufe36\313\ufe36\314\ufe36\001\002" +
    "\000\006\107\u02ee\312\u02eb\001\002\000\012\033\ufe3c\143" +
    "\ufe3c\313\ufe3c\314\ufe3c\001\002\000\004\025\u02f4\001\002" +
    "\000\012\033\ufe37\143\ufe37\313\ufe37\314\ufe37\001\002\000" +
    "\014\033\ufe33\034\u02f1\143\ufe33\313\ufe33\314\ufe33\001\002" +
    "\000\004\025\u02ef\001\002\000\004\011\u02f0\001\002\000" +
    "\014\033\ufe32\034\ufe32\143\ufe32\313\ufe32\314\ufe32\001\002" +
    "\000\006\107\u02ee\312\u02eb\001\002\000\012\033\ufe35\143" +
    "\ufe35\313\ufe35\314\ufe35\001\002\000\012\033\ufe34\143\ufe34" +
    "\313\ufe34\314\ufe34\001\002\000\006\077\334\264\335\001" +
    "\002\000\014\033\ufe31\034\ufe31\143\ufe31\313\ufe31\314\ufe31" +
    "\001\002\000\004\011\u02f7\001\002\000\014\033\ufe3b\106" +
    "\ufe3b\143\ufe3b\313\ufe3b\314\ufe3b\001\002\000\012\033\ufea4" +
    "\143\ufea4\313\ufea4\314\ufea4\001\002\000\016\033\ufe9a\077" +
    "\u02fc\143\ufe9a\306\u02fa\313\ufe9a\314\ufe9a\001\002\000\004" +
    "\011\u032c\001\002\000\012\033\ufe9d\143\ufe9d\313\ufe9d\314" +
    "\ufe9d\001\002\000\006\040\ufe98\146\u02fd\001\002\000\004" +
    "\040\ufe99\001\002\000\004\040\u0300\001\002\000\012\033" +
    "\ufe9c\143\ufe9c\313\ufe9c\314\ufe9c\001\002\000\006\075\u0303" +
    "\214\u0301\001\002\000\004\025\ufe93\001\002\000\004\025" +
    "\u0304\001\002\000\004\025\ufe94\001\002\000\004\007\u0305" +
    "\001\002\000\004\034\u0306\001\002\000\010\215\u030a\216" +
    "\u0309\217\u0307\001\002\000\004\025\ufe91\001\002\000\004" +
    "\025\u030b\001\002\000\004\025\ufe90\001\002\000\004\025" +
    "\ufe92\001\002\000\004\007\u030c\001\002\000\006\034\u030e" +
    "\041\ufe8e\001\002\000\004\041\u0328\001\002\000\010\220" +
    "\u0315\221\u0314\226\u0313\001\002\000\006\034\ufe8c\041\ufe8c" +
    "\001\002\000\006\034\u030e\041\ufe8e\001\002\000\006\034" +
    "\ufe8b\041\ufe8b\001\002\000\006\034\ufe8d\041\ufe8d\001\002" +
    "\000\004\025\u0321\001\002\000\004\025\u031d\001\002\000" +
    "\004\025\u0316\001\002\000\006\004\216\005\217\001\002" +
    "\000\016\034\ufe84\041\ufe84\222\u031a\223\u031c\224\u031b\225" +
    "\u0318\001\002\000\006\034\ufe85\041\ufe85\001\002\000\006" +
    "\034\ufe89\041\ufe89\001\002\000\006\034\ufe88\041\ufe88\001" +
    "\002\000\006\034\ufe86\041\ufe86\001\002\000\006\034\ufe87" +
    "\041\ufe87\001\002\000\012\004\216\005\217\034\ufe81\041" +
    "\ufe81\001\002\000\006\034\ufe83\041\ufe83\001\002\000\016" +
    "\034\ufe84\041\ufe84\222\u031a\223\u031c\224\u031b\225\u0318\001" +
    "\002\000\006\034\ufe82\041\ufe82\001\002\000\006\004\216" +
    "\005\217\001\002\000\020\020\u0324\034\ufe84\041\ufe84\222" +
    "\u031a\223\u031c\224\u031b\225\u0318\001\002\000\006\034\ufe80" +
    "\041\ufe80\001\002\000\006\034\ufe7e\041\ufe7e\001\002\000" +
    "\006\034\ufe7f\041\ufe7f\001\002\000\004\041\ufe8a\001\002" +
    "\000\004\041\ufe8f\001\002\000\014\033\ufe95\034\u0329\143" +
    "\ufe95\313\ufe95\314\ufe95\001\002\000\004\040\u0300\001\002" +
    "\000\012\033\ufe97\143\ufe97\313\ufe97\314\ufe97\001\002\000" +
    "\012\033\ufe96\143\ufe96\313\ufe96\314\ufe96\001\002\000\012" +
    "\033\ufe9b\143\ufe9b\313\ufe9b\314\ufe9b\001\002\000\052\002" +
    "\ufe9e\003\ufe9e\054\ufe9e\055\ufe9e\056\ufe9e\057\ufe9e\060\ufe9e" +
    "\061\ufe9e\062\ufe9e\063\ufe9e\143\ufe9e\233\ufe9e\234\ufe9e\236" +
    "\ufe9e\240\ufe9e\241\ufe9e\244\ufe9e\245\ufe9e\246\ufe9e\247\ufe9e" +
    "\001\002\000\052\002\ufe9f\003\ufe9f\054\ufe9f\055\ufe9f\056" +
    "\ufe9f\057\ufe9f\060\ufe9f\061\ufe9f\062\ufe9f\063\ufe9f\143\ufe9f" +
    "\233\ufe9f\234\ufe9f\236\ufe9f\240\ufe9f\241\ufe9f\244\ufe9f\245" +
    "\ufe9f\246\ufe9f\247\ufe9f\001\002\000\052\002\ufea7\003\ufea7" +
    "\054\ufea7\055\ufea7\056\ufea7\057\ufea7\060\ufea7\061\ufea7\062" +
    "\ufea7\063\ufea7\143\ufea7\233\ufea7\234\ufea7\236\ufea7\240\ufea7" +
    "\241\ufea7\244\ufea7\245\ufea7\246\ufea7\247\ufea7\001\002\000" +
    "\004\002\ufff0\001\002\000\004\002\001\001\002\000\020" +
    "\011\110\033\uff0d\047\320\106\uff0d\143\uff0d\313\uff0d\314" +
    "\uff0d\001\002\000\014\033\uff1b\106\u0334\143\uff1b\313\uff1b" +
    "\314\uff1b\001\002\000\004\270\u0340\001\002\000\012\033" +
    "\276\143\277\313\275\314\301\001\002\000\046\003\u021d" +
    "\054\026\055\037\056\040\057\010\060\025\061\031\062" +
    "\011\063\032\143\u0218\233\004\234\042\236\u021f\240\022" +
    "\244\uff16\245\uff16\246\u0337\247\041\001\002\000\006\242" +
    "\315\243\313\001\002\000\046\003\u021d\054\026\055\037" +
    "\056\040\057\010\060\025\061\031\062\011\063\032\143" +
    "\u0218\233\004\234\042\236\u021f\240\022\244\uff16\245\uff16" +
    "\246\u0337\247\041\001\002\000\046\003\u021d\054\026\055" +
    "\037\056\040\057\010\060\025\061\031\062\011\063\032" +
    "\143\u0218\233\004\234\042\236\u021f\240\022\244\uff16\245" +
    "\uff16\246\u0337\247\041\001\002\000\006\244\uff1f\245\uff1f" +
    "\001\002\000\006\244\uff17\245\uff17\001\002\000\006\244" +
    "\uff15\245\uff15\001\002\000\006\244\uff18\245\uff18\001\002" +
    "\000\052\003\uff0d\011\110\047\320\054\uff0d\055\uff0d\056" +
    "\uff0d\057\uff0d\060\uff0d\061\uff0d\062\uff0d\063\uff0d\143\uff0d" +
    "\233\uff0d\234\uff0d\236\uff0d\240\uff0d\244\uff0d\245\uff0d\246" +
    "\uff0d\247\uff0d\001\002\000\046\003\uff07\054\uff07\055\uff07" +
    "\056\uff07\057\uff07\060\uff07\061\uff07\062\uff07\063\uff07\143" +
    "\uff07\233\uff07\234\uff07\236\uff07\240\uff07\244\uff07\245\uff07" +
    "\246\uff07\247\uff07\001\002\000\014\007\u0341\033\uff19\143" +
    "\uff19\313\uff19\314\uff19\001\002\000\012\033\uff1a\143\uff1a" +
    "\313\uff1a\314\uff1a\001\002\000\012\033\uff1c\143\uff1c\313" +
    "\uff1c\314\uff1c\001\002\000\042\002\ufffe\003\033\054\026" +
    "\055\037\056\040\057\010\060\025\061\031\062\011\063" +
    "\032\143\024\233\004\234\042\236\035\240\022\247\041" +
    "\001\002\000\004\002\ufff8\001\002\000\042\002\ufffe\003" +
    "\033\054\026\055\037\056\040\057\010\060\025\061\031" +
    "\062\011\063\032\143\024\233\004\234\042\236\035\240" +
    "\022\247\041\001\002\000\004\002\ufffb\001\002\000\042" +
    "\002\ufffe\003\033\054\026\055\037\056\040\057\010\060" +
    "\025\061\031\062\011\063\032\143\024\233\004\234\042" +
    "\236\035\240\022\247\041\001\002\000\004\002\ufff2\001" +
    "\002\000\042\002\ufffe\003\033\054\026\055\037\056\040" +
    "\057\010\060\025\061\031\062\011\063\032\143\024\233" +
    "\004\234\042\236\035\240\022\247\041\001\002\000\004" +
    "\002\ufff5\001\002\000\004\002\ufff7\001\002\000\042\002" +
    "\ufffe\003\033\054\026\055\037\056\040\057\010\060\025" +
    "\061\031\062\011\063\032\143\024\233\004\234\042\236" +
    "\035\240\022\247\041\001\002\000\004\002\ufff4\001\002" +
    "\000\004\011\110\001\002\000\012\033\uffb9\143\uffb9\313" +
    "\uffb9\314\uffb9\001\002\000\032\004\uffb3\005\uffb3\006\uffb3" +
    "\011\uffb3\016\uffb3\040\uffb3\047\uffb3\202\uffb3\203\uffb3\204" +
    "\uffb3\205\uffb3\206\uffb3\001\002\000\032\004\117\005\116" +
    "\006\125\011\110\016\u03ba\040\124\047\u03bd\202\u036a\203" +
    "\u036b\204\u036c\205\u036d\206\u0370\001\002\000\032\004\uffb2" +
    "\005\uffb2\006\uffb2\011\uffb2\016\uffb2\040\uffb2\047\uffb2\202" +
    "\uffb2\203\uffb2\204\uffb2\205\uffb2\206\uffb2\001\002\000\004" +
    "\162\u0356\001\002\000\010\004\216\005\217\040\257\001" +
    "\002\000\032\004\uffb1\005\uffb1\006\uffb1\011\uffb1\016\uffb1" +
    "\040\uffb1\047\uffb1\202\uffb1\203\uffb1\204\uffb1\205\uffb1\206" +
    "\uffb1\001\002\000\004\011\110\001\002\000\044\011\u03a4" +
    "\033\uff8b\034\uff8b\143\uff8b\163\uff8b\165\u03a5\167\uff8b\170" +
    "\uff8b\171\uff8b\172\uff8b\173\uff8b\174\uff8b\176\uff8b\177\uff8b" +
    "\211\uff8b\313\uff8b\314\uff8b\001\002\000\036\033\uff87\143" +
    "\uff87\163\uff87\167\u0359\170\u035b\171\uff87\172\uff87\173\uff87" +
    "\174\uff82\176\u035a\177\u035e\211\uff87\313\uff87\314\uff87\001" +
    "\002\000\006\174\uff80\175\u0360\001\002\000\004\174\uff86" +
    "\001\002\000\006\174\uff80\175\u0360\001\002\000\004\174" +
    "\u03a2\001\002\000\024\033\uff7d\143\uff7d\163\164\171\uff7d" +
    "\172\uff7d\173\uff7d\211\uff7d\313\uff7d\314\uff7d\001\002\000" +
    "\006\174\uff80\175\u0360\001\002\000\004\174\uff83\001\002" +
    "\000\004\174\uff81\001\002\000\022\033\uff65\143\uff65\171" +
    "\u0362\172\uff65\173\uff65\211\uff65\313\uff65\314\uff65\001\002" +
    "\000\004\213\u039c\001\002\000\020\033\uff61\143\uff61\172" +
    "\uff61\173\u0364\211\uff61\313\uff61\314\uff61\001\002\000\016" +
    "\011\110\202\u036a\203\u036b\204\u036c\205\u036d\206\u0370\001" +
    "\002\000\016\033\uff5c\143\uff5c\172\u0366\211\uff5c\313\uff5c" +
    "\314\uff5c\001\002\000\004\213\u0368\001\002\000\014\033" +
    "\uffb5\143\uffb5\211\uffb5\313\uffb5\314\uffb5\001\002\000\016" +
    "\011\110\202\u036a\203\u036b\204\u036c\205\u036d\206\u0370\001" +
    "\002\000\050\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\033\uff9e\034\uff9e\142\uff9e\143\uff9e\144" +
    "\uff9e\162\uff9e\165\uff9e\200\uff9e\201\uff9e\211\uff9e\313\uff9e" +
    "\314\uff9e\001\002\000\004\040\u0392\001\002\000\004\040" +
    "\u038f\001\002\000\004\040\u038c\001\002\000\004\040\u0389" +
    "\001\002\000\022\033\uff57\034\uff57\143\uff57\200\u0195\201" +
    "\u0194\211\uff57\313\uff57\314\uff57\001\002\000\044\021\uff55" +
    "\022\uff55\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55\033" +
    "\uff55\034\uff55\142\uff55\143\uff55\144\uff55\200\uff55\201\uff55" +
    "\211\uff55\313\uff55\314\uff55\001\002\000\004\040\u037c\001" +
    "\002\000\050\021\uff56\022\uff56\023\uff56\024\uff56\025\uff56" +
    "\026\uff56\027\uff56\033\uff56\034\uff56\040\u0373\045\u0372\142" +
    "\uff56\143\uff56\144\uff56\200\uff56\201\uff56\211\uff56\313\uff56" +
    "\314\uff56\001\002\000\050\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\033\uff9c\034\uff9c\142\uff9c" +
    "\143\uff9c\144\uff9c\162\uff9c\165\uff9c\200\uff9c\201\uff9c\211" +
    "\uff9c\313\uff9c\314\uff9c\001\002\000\016\004\225\005\231" +
    "\006\230\007\223\011\110\111\226\001\002\000\006\034" +
    "\u0377\041\uff97\001\002\000\004\041\u037a\001\002\000\006" +
    "\034\u0377\041\uff97\001\002\000\016\004\225\005\231\006" +
    "\230\007\223\011\110\111\226\001\002\000\004\041\uff95" +
    "\001\002\000\004\041\uff98\001\002\000\050\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\033\uff9d" +
    "\034\uff9d\142\uff9d\143\uff9d\144\uff9d\162\uff9d\165\uff9d\200" +
    "\uff9d\201\uff9d\211\uff9d\313\uff9d\314\uff9d\001\002\000\004" +
    "\041\uff96\001\002\000\014\004\216\005\217\011\uff93\016" +
    "\u037e\166\u037d\001\002\000\004\011\uff94\001\002\000\004" +
    "\041\uff9a\001\002\000\004\041\uff9b\001\002\000\004\041" +
    "\u0383\001\002\000\004\011\110\001\002\000\004\041\uff99" +
    "\001\002\000\050\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\033\uffa0\034\uffa0\142\uffa0\143\uffa0" +
    "\144\uffa0\162\uffa0\165\uffa0\200\uffa0\201\uffa0\211\uffa0\313" +
    "\uffa0\314\uffa0\001\002\000\016\033\uff5a\034\u0385\143\uff5a" +
    "\211\uff5a\313\uff5a\314\uff5a\001\002\000\004\011\110\001" +
    "\002\000\014\033\uff5d\143\uff5d\211\uff5d\313\uff5d\314\uff5d" +
    "\001\002\000\016\033\uff5a\034\u0385\143\uff5a\211\uff5a\313" +
    "\uff5a\314\uff5a\001\002\000\014\033\uff5b\143\uff5b\211\uff5b" +
    "\313\uff5b\314\uff5b\001\002\000\014\004\216\005\217\011" +
    "\uff93\016\u037e\166\u037d\001\002\000\004\041\u038b\001\002" +
    "\000\050\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\033\uff9f\034\uff9f\142\uff9f\143\uff9f\144\uff9f" +
    "\162\uff9f\165\uff9f\200\uff9f\201\uff9f\211\uff9f\313\uff9f\314" +
    "\uff9f\001\002\000\014\004\216\005\217\011\uff93\016\u037e" +
    "\166\u037d\001\002\000\004\041\u038e\001\002\000\050\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\033\uffa1\034\uffa1\142\uffa1\143\uffa1\144\uffa1\162\uffa1\165" +
    "\uffa1\200\uffa1\201\uffa1\211\uffa1\313\uffa1\314\uffa1\001\002" +
    "\000\014\004\216\005\217\011\uff93\016\u037e\166\u037d\001" +
    "\002\000\004\041\u0391\001\002\000\050\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\033\uffa3\034" +
    "\uffa3\142\uffa3\143\uffa3\144\uffa3\162\uffa3\165\uffa3\200\uffa3" +
    "\201\uffa3\211\uffa3\313\uffa3\314\uffa3\001\002\000\014\004" +
    "\216\005\217\011\uff93\016\u037e\166\u037d\001\002\000\004" +
    "\041\u0394\001\002\000\050\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\033\uffa2\034\uffa2\142\uffa2" +
    "\143\uffa2\144\uffa2\162\uffa2\165\uffa2\200\uffa2\201\uffa2\211" +
    "\uffa2\313\uffa2\314\uffa2\001\002\000\024\021\166\022\170" +
    "\023\173\024\200\025\174\026\176\027\201\142\172\144" +
    "\202\001\002\000\016\033\uff62\143\uff62\172\uff62\211\uff62" +
    "\313\uff62\314\uff62\001\002\000\014\004\225\005\231\006" +
    "\230\007\223\111\226\001\002\000\026\030\204\031\210" +
    "\033\uff5e\143\uff5e\152\205\153\207\172\uff5e\211\uff5e\313" +
    "\uff5e\314\uff5e\001\002\000\016\033\uff60\143\uff60\172\uff60" +
    "\211\uff60\313\uff60\314\uff60\001\002\000\016\011\110\202" +
    "\u036a\203\u036b\204\u036c\205\u036d\206\u0370\001\002\000\016" +
    "\033\uff5f\143\uff5f\172\uff5f\211\uff5f\313\uff5f\314\uff5f\001" +
    "\002\000\004\011\110\001\002\000\022\033\uff63\034\u039e" +
    "\143\uff63\172\uff63\173\uff63\211\uff63\313\uff63\314\uff63\001" +
    "\002\000\004\011\110\001\002\000\020\033\uff66\143\uff66" +
    "\172\uff66\173\uff66\211\uff66\313\uff66\314\uff66\001\002\000" +
    "\022\033\uff63\034\u039e\143\uff63\172\uff63\173\uff63\211\uff63" +
    "\313\uff63\314\uff63\001\002\000\020\033\uff64\143\uff64\172" +
    "\uff64\173\uff64\211\uff64\313\uff64\314\uff64\001\002\000\004" +
    "\011\110\001\002\000\010\011\u03a4\077\uff8b\165\u03a5\001" +
    "\002\000\042\033\uff8c\034\uff8c\077\uff8c\143\uff8c\163\uff8c" +
    "\167\uff8c\170\uff8c\171\uff8c\172\uff8c\173\uff8c\174\uff8c\176" +
    "\uff8c\177\uff8c\211\uff8c\313\uff8c\314\uff8c\001\002\000\006" +
    "\007\u03ae\011\u03ad\001\002\000\004\077\u03a7\001\002\000" +
    "\004\011\110\001\002\000\004\025\u03a9\001\002\000\004" +
    "\011\110\001\002\000\036\033\uff87\143\uff87\163\uff87\167" +
    "\u0359\170\u035b\171\uff87\172\uff87\173\uff87\174\uff82\176\u035a" +
    "\177\u035e\211\uff87\313\uff87\314\uff87\001\002\000\024\033" +
    "\uff7f\143\uff7f\163\uff7f\171\uff7f\172\uff7f\173\uff7f\211\uff7f" +
    "\313\uff7f\314\uff7f\001\002\000\024\033\uff88\143\uff88\163" +
    "\uff88\171\uff88\172\uff88\173\uff88\211\uff88\313\uff88\314\uff88" +
    "\001\002\000\044\033\uff89\034\uff89\077\uff89\143\uff89\162" +
    "\uff89\163\uff89\167\uff89\170\uff89\171\uff89\172\uff89\173\uff89" +
    "\174\uff89\176\uff89\177\uff89\211\uff89\313\uff89\314\uff89\001" +
    "\002\000\044\033\uff8a\034\uff8a\077\uff8a\143\uff8a\162\uff8a" +
    "\163\uff8a\167\uff8a\170\uff8a\171\uff8a\172\uff8a\173\uff8a\174" +
    "\uff8a\176\uff8a\177\uff8a\211\uff8a\313\uff8a\314\uff8a\001\002" +
    "\000\042\033\uff8d\034\uff8d\077\uff8d\143\uff8d\163\uff8d\167" +
    "\uff8d\170\uff8d\171\uff8d\172\uff8d\173\uff8d\174\uff8d\176\uff8d" +
    "\177\uff8d\211\uff8d\313\uff8d\314\uff8d\001\002\000\004\174" +
    "\uff84\001\002\000\004\174\uff85\001\002\000\040\033\uff8e" +
    "\034\u03b3\143\uff8e\163\uff8e\167\uff8e\170\uff8e\171\uff8e\172" +
    "\uff8e\173\uff8e\174\uff8e\176\uff8e\177\uff8e\211\uff8e\313\uff8e" +
    "\314\uff8e\001\002\000\004\011\110\001\002\000\036\033" +
    "\uff90\143\uff90\163\uff90\167\uff90\170\uff90\171\uff90\172\uff90" +
    "\173\uff90\174\uff90\176\uff90\177\uff90\211\uff90\313\uff90\314" +
    "\uff90\001\002\000\036\033\uff8f\143\uff8f\163\uff8f\167\uff8f" +
    "\170\uff8f\171\uff8f\172\uff8f\173\uff8f\174\uff8f\176\uff8f\177" +
    "\uff8f\211\uff8f\313\uff8f\314\uff8f\001\002\000\012\025\uffa4" +
    "\034\uffac\162\uffac\165\uffac\001\002\000\004\025\u03c5\001" +
    "\002\000\010\034\uff91\162\uff91\165\u03bf\001\002\000\004" +
    "\162\uffb4\001\002\000\010\034\uffa9\162\uffa9\165\uffa9\001" +
    "\002\000\010\034\uffab\162\uffab\165\uffab\001\002\000\026" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\025\uffa6\034\uffba\040" +
    "\u0373\045\u0372\162\uffba\165\uffba\001\002\000\004\011\u03be" +
    "\001\002\000\012\025\uffa5\034\uffa5\162\uffa5\165\uffa5\001" +
    "\002\000\006\007\u03ae\011\u03ad\001\002\000\006\034\u03c1" +
    "\162\uffa7\001\002\000\032\004\117\005\116\006\125\011" +
    "\110\016\u03ba\040\124\047\u03bd\202\u036a\203\u036b\204\u036c" +
    "\205\u036d\206\u0370\001\002\000\004\162\uffad\001\002\000" +
    "\004\162\uffa8\001\002\000\006\034\uff92\162\uff92\001\002" +
    "\000\020\011\110\047\u03bd\202\u036a\203\u036b\204\u036c\205" +
    "\u036d\206\u0370\001\002\000\010\034\uffa4\162\uffa4\165\uffa4" +
    "\001\002\000\010\034\uffaa\162\uffaa\165\uffaa\001\002\000" +
    "\014\034\uffa6\040\u0373\045\u0372\162\uffa6\165\uffa6\001\002" +
    "\000\042\002\ufffe\003\033\054\026\055\037\056\040\057" +
    "\010\060\025\061\031\062\011\063\032\143\024\233\004" +
    "\234\042\236\035\240\022\247\041\001\002\000\004\002" +
    "\ufff6\001\002\000\042\002\ufffe\003\033\054\026\055\037" +
    "\056\040\057\010\060\025\061\031\062\011\063\032\143" +
    "\024\233\004\234\042\236\035\240\022\247\041\001\002" +
    "\000\004\002\ufff9\001\002\000\042\002\ufffe\003\033\054" +
    "\026\055\037\056\040\057\010\060\025\061\031\062\011" +
    "\063\032\143\024\233\004\234\042\236\035\240\022\247" +
    "\041\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03cc\000\042\002\022\003\017\004\011\011\027\012" +
    "\004\013\016\014\035\015\020\016\013\017\005\020\006" +
    "\021\014\022\012\150\033\203\026\211\015\001\001\000" +
    "\002\001\001\000\004\010\u03cc\001\001\000\004\010\u03ca" +
    "\001\001\000\004\010\u03c8\001\001\000\006\036\u0352\037" +
    "\u0350\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u034b\001\001\000\040\003\u034a\004\011\011\027\012" +
    "\004\013\016\014\035\015\020\016\013\017\005\020\006" +
    "\021\014\022\012\150\033\203\026\211\015\001\001\000" +
    "\004\010\u0348\001\001\000\004\010\u0346\001\001\000\004" +
    "\010\u0344\001\001\000\002\001\001\000\004\010\u0342\001" +
    "\001\000\004\154\u0331\001\001\000\002\001\001\000\040" +
    "\003\u032f\004\011\011\027\012\004\013\016\014\035\015" +
    "\020\016\013\017\005\020\006\021\014\022\012\150\033" +
    "\203\026\211\015\001\001\000\010\244\u02a3\245\u02a4\266" +
    "\u02aa\001\001\000\004\111\u0289\001\001\000\004\023\u0280" +
    "\001\001\000\004\010\u027e\001\001\000\012\167\u010b\212" +
    "\u0112\213\u0110\331\u0115\001\001\000\016\133\342\135\346" +
    "\136\353\141\354\144\352\147\347\001\001\000\004\010" +
    "\340\001\001\000\010\151\310\152\305\166\306\001\001" +
    "\000\004\023\302\001\001\000\004\010\277\001\001\000" +
    "\004\127\265\001\001\000\004\125\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\237\043\001\001\000" +
    "\004\236\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\231\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\232\054\001\001\000\002" +
    "\001\001\000\004\233\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\234\063\001\001\000\002\001\001\000\004\235\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\072\001" +
    "\001\000\004\240\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\241\076\001\001\000\002\001\001\000" +
    "\004\242\101\001\001\000\004\243\103\001\001\000\002" +
    "\001\001\000\004\242\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\257\102\255\001\001\000\004" +
    "\023\110\001\001\000\004\024\250\001\001\000\002\001" +
    "\001\000\004\023\112\001\001\000\002\001\001\000\014" +
    "\023\125\027\122\030\117\122\121\123\114\001\001\000" +
    "\004\124\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\241\001\001\000\002\001\001\000\004\063" +
    "\162\001\001\000\002\001\001\000\010\023\125\027\126" +
    "\030\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\130\001\001\000\002\001\001\000\004\031\131" +
    "\001\001\000\002\001\001\000\010\023\125\027\161\030" +
    "\117\001\001\000\010\023\125\030\137\033\157\001\001" +
    "\000\010\023\125\027\156\030\117\001\001\000\010\023" +
    "\125\030\137\033\136\001\001\000\004\032\153\001\001" +
    "\000\004\034\150\001\001\000\010\023\125\027\141\030" +
    "\117\001\001\000\004\035\142\001\001\000\004\034\143" +
    "\001\001\000\002\001\001\000\010\023\125\030\137\033" +
    "\147\001\001\000\010\023\125\030\137\033\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\125\027\155\030\117\001\001\000\010\023\125" +
    "\027\154\030\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\164\001\001\000\010\067\170\070\176" +
    "\071\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\223\230\221\001\001\000\004" +
    "\102\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\202\066\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\210\065\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\067\170\070\212\071\174\001\001" +
    "\000\002\001\001\000\006\064\213\066\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\234" +
    "\104\233\001\001\000\002\001\001\000\004\105\236\001" +
    "\001\000\006\026\234\104\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\125\027\122\030\117\122\246\123\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\262" +
    "\001\001\000\004\126\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\272\102\255\001\001\000\004\130\267\001\001\000" +
    "\002\001\001\000\004\023\270\001\001\000\004\063\271" +
    "\001\001\000\002\001\001\000\004\126\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\301\004\011\011\027\012\004\013" +
    "\016\014\035\015\020\016\013\017\005\020\006\021\014" +
    "\022\012\150\033\203\026\211\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\303\001\001\000\040" +
    "\003\304\004\011\011\027\012\004\013\016\014\035\015" +
    "\020\016\013\017\005\020\006\021\014\022\012\150\033" +
    "\203\026\211\015\001\001\000\002\001\001\000\004\010" +
    "\337\001\001\000\040\003\336\004\011\011\027\012\004" +
    "\013\016\014\035\015\020\016\013\017\005\020\006\021" +
    "\014\022\012\150\033\203\026\211\015\001\001\000\006" +
    "\154\323\157\322\001\001\000\004\010\321\001\001\000" +
    "\004\154\313\001\001\000\002\001\001\000\006\023\316" +
    "\160\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\161\325\001\001\000\006\023\316\160" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\163" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\341\004\011\011\027\012\004\013\016" +
    "\014\035\015\020\016\013\017\005\020\006\021\014\022" +
    "\012\150\033\203\026\211\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\134\u0105\001\001\000\004\134" +
    "\375\001\001\000\004\134\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\134\365\001\001\000\004\134" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\360\131\357\001" +
    "\001\000\002\001\001\000\004\132\362\001\001\000\006" +
    "\023\360\131\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\366\145\367\001\001" +
    "\000\004\146\371\001\001\000\002\001\001\000\006\023" +
    "\366\145\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\377\142" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0101\001\001\000\004\143\u0103\001\001\000\006\023" +
    "\377\142\u0104\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\u0107\137\u0106\001\001\000\002\001\001\000" +
    "\004\140\u0109\001\001\000\006\023\u0107\137\u010a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\332\u0272\333\u0273\001\001\000\010\023\u0267\335\u0266" +
    "\336\u0268\001\001\000\004\347\u0250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0200" +
    "\001\001\000\006\023\u0187\340\u0188\001\001\000\006\023" +
    "\u017c\316\u017d\001\001\000\002\001\001\000\004\023\u0117" +
    "\001\001\000\002\001\001\000\006\214\u011b\215\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\300\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\221\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\330\u013b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0137\001" +
    "\001\000\002\001\001\000\004\102\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u013d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u0143\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u0146\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\u0149\001\001\000\002\001\001\000\004\102\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u014e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\217\u0164\001\001\000\006\222\u0158\224\u0152\001\001\000" +
    "\004\223\u0162\001\001\000\002\001\001\000\004\225\u015b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\163\u015a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\225\u0160\001\001\000\002" +
    "\001\001\000\006\222\u0163\224\u0152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\226\u0167\001\001\000\002" +
    "\001\001\000\004\011\u0168\001\001\000\002\001\001\000" +
    "\004\010\u0169\001\001\000\004\227\u016b\001\001\000\006" +
    "\026\223\230\u016e\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\223\230\u016f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\217\u0172\001" +
    "\001\000\004\300\u0173\001\001\000\004\174\u0175\001\001" +
    "\000\002\001\001\000\004\220\u0176\001\001\000\004\216" +
    "\u0179\001\001\000\002\001\001\000\004\215\u017a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\u017f\317\u0180\320\u017e\001\001\000\002\001\001" +
    "\000\010\023\u017f\320\u0184\321\u0183\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0182\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\u017f\317\u0186\320\u017e\001\001\000\002\001\001\000\004" +
    "\341\u018a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\u019f\342\u01a0\344\u019e\345\u019d" +
    "\001\001\000\004\346\u0190\001\001\000\004\324\u019a\001" +
    "\001\000\004\324\u0199\001\001\000\004\324\u0192\001\001" +
    "\000\002\001\001\000\004\101\u0195\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\325\u0197" +
    "\001\001\000\004\324\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01d3\001\001\000\002\001\001\000" +
    "\004\343\u01d1\001\001\000\004\300\u01a1\001\001\000\002" +
    "\001\001\000\006\301\u01a3\302\u01a4\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\301\u01c9\302\u01a4\303\u01ca" +
    "\001\001\000\004\326\u01c8\001\001\000\002\001\001\000" +
    "\004\300\u01c7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u01ae\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01b1\001\001\000\002\001\001\000\004\023" +
    "\u01b3\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\327\u01b8\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\326\u01b9\001\001\000\002\001\001\000\004\324\u01bb" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\u01bf\304\u01be\305\u01c0\001\001\000\002\001\001\000\010" +
    "\067\170\070\u01c4\071\174\001\001\000\006\066\u01c2\306" +
    "\u01c1\001\001\000\002\001\001\000\010\023\u01bf\304\u01c3" +
    "\305\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u01cc\001\001\000\002\001\001\000\004\102\u01ce\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\u019f\342" +
    "\u01d2\344\u019e\345\u019d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\353\u01d4\001\001\000\004\343\u01f4\001" +
    "\001\000\002\001\001\000\004\326\u01ee\001\001\000\002" +
    "\001\001\000\004\300\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01df\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u01e2\001\001\000\002\001\001" +
    "\000\004\023\u01e4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\327\u01e7\001\001\000\004\326\u01e8\001\001" +
    "\000\002\001\001\000\010\023\u01bf\304\u01ea\305\u01c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u01f0\001" +
    "\001\000\002\001\001\000\004\102\u01f2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u01f7\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01fa\001\001\000\002\001\001\000" +
    "\004\023\u01fc\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\u019f\344\u01ff\001\001\000\002\001\001\000" +
    "\004\170\u0201\001\001\000\004\171\u0205\001\001\000\004" +
    "\102\u0203\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\177\u0207\001\001\000\010\200\u0234\201\u0232\203\u0233" +
    "\001\001\000\004\205\u0209\001\001\000\002\001\001\000" +
    "\004\206\u020b\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\u0210\006\u021b\007\u0219\011\u021a\012\u020e\013" +
    "\u0215\014\u021f\015\u0216\016\u0212\017\u020d\020\u020f\021\u0214" +
    "\022\u0211\150\u021d\203\026\207\u0218\211\u0213\001\001\000" +
    "\004\010\u0230\001\001\000\004\010\u022f\001\001\000\004" +
    "\010\u022e\001\001\000\046\005\u0210\006\u021b\007\u0219\011" +
    "\u021a\012\u020e\013\u0215\014\u021f\015\u0216\016\u0212\017\u020d" +
    "\020\u020f\021\u0214\022\u0211\150\u021d\203\026\207\u022d\210" +
    "\u022c\211\u0213\001\001\000\004\010\u022b\001\001\000\002" +
    "\001\001\000\004\010\u022a\001\001\000\004\010\u0229\001" +
    "\001\000\004\010\u0228\001\001\000\004\010\u0227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0225\001\001\000\002\001\001\000\004\010\u0224" +
    "\001\001\000\010\151\310\152\305\166\u0223\001\001\000" +
    "\004\023\u0221\001\001\000\004\010\u0220\001\001\000\002" +
    "\001\001\000\004\010\u0222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\202\u023e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\204\u023c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\200\u023f\201\u0232\203\u0233\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\172\u0244\300" +
    "\u0241\001\001\000\004\174\u024d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\176\u0246\001\001\000\004\171" +
    "\u0247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\173\u024a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\173\u024e\175\u024f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\350\u0253\351\u0259\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\352\u025b\001\001\000\006\350\u025c\351\u0259\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u026a\001\001\000\004\337\u026c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\334\u0275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\u027f\004\011\011\027\012\004\013" +
    "\016\014\035\015\020\016\013\017\005\020\006\021\014" +
    "\022\012\150\033\203\026\211\015\001\001\000\002\001" +
    "\001\000\006\026\u0281\107\u0282\001\001\000\004\106\u0288" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\u0286\001\001\000\006\026\u0281\107\u0287\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u028b\001\001\000\002\001\001\000\004\112\u028c\001\001" +
    "\000\004\115\u0296\001\001\000\004\113\u028f\001\001\000" +
    "\004\114\u0292\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u0293\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u0297\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\u029a\120\u0299\001" +
    "\001\000\002\001\001\000\004\121\u029c\001\001\000\006" +
    "\026\u029a\120\u029d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\u02a0\001\001\000\004\116\u02a1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\167\u032d\212\u0112\213\u032c\322\u032e\001\001\000\002" +
    "\001\001\000\006\023\u02f8\246\u02f7\001\001\000\004\307" +
    "\u02e3\001\001\000\002\001\001\000\006\023\u017c\316\u02e1" +
    "\001\001\000\006\023\u02c1\274\u02c2\001\001\000\004\327" +
    "\u02ad\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\u02b0\267\u02af\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u02b2\001\001\000\002" +
    "\001\001\000\010\023\u02b5\270\u02b6\271\u02b4\001\001\000" +
    "\004\272\u02bf\001\001\000\004\101\u02bd\001\001\000\002" +
    "\001\001\000\004\273\u02b8\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\u02b5\270\u02bb\271\u02b4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\u02b5\270\u02c0\271\u02b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\u02c8\275\u02c7\276\u02c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\300\u02cd\001\001\000\004\277\u02cb\001\001\000\010" +
    "\023\u02c8\275\u02cc\276\u02c9\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\301\u02ce\302\u01a4\001\001\000\002" +
    "\001\001\000\004\250\u02d0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\327\u02d4\001\001" +
    "\000\004\326\u02d5\001\001\000\002\001\001\000\004\302" +
    "\u02d7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u02da\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u02dd\001\001\000\002\001\001\000\004\023\u02df" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\310\u02e7\311\u02e6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\312\u02e9\001\001\000\006\313\u02eb\315\u02ec\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\314\u02f1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\313\u02f2\315\u02ec\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\163\u02f4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\251\u02fa\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\247\u02fd\001\001\000\002\001" +
    "\001\000\004\252\u02fe\001\001\000\002\001\001\000\004" +
    "\323\u0301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\254\u0307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\255\u030c\001\001\000\002\001\001\000\012\256\u030f\260" +
    "\u0311\262\u030e\264\u0310\001\001\000\002\001\001\000\006" +
    "\255\u0325\257\u0326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0316\001\001\000\004\261\u0318\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\u031e\263\u031d\001" +
    "\001\000\002\001\001\000\004\261\u031f\001\001\000\002" +
    "\001\001\000\004\102\u0321\001\001\000\006\261\u0324\265" +
    "\u0322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\253" +
    "\u0329\001\001\000\004\252\u032a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\316\160\u0332\001\001\000\004\155" +
    "\u0334\001\001\000\002\001\001\000\004\010\u0335\001\001" +
    "\000\046\005\u0337\006\u021b\007\u0219\011\u021a\012\u020e\013" +
    "\u0215\014\u021f\015\u0216\016\u0212\017\u020d\020\u020f\021\u0214" +
    "\022\u0211\150\u021d\153\u0338\164\u0339\203\026\211\u0213\001" +
    "\001\000\004\154\u033d\001\001\000\050\005\u0337\006\u021b" +
    "\007\u0219\011\u021a\012\u020e\013\u0215\014\u021f\015\u0216\016" +
    "\u0212\017\u020d\020\u020f\021\u0214\022\u0211\150\u021d\153\u0338" +
    "\164\u033b\165\u033c\203\026\211\u0213\001\001\000\050\005" +
    "\u0337\006\u021b\007\u0219\011\u021a\012\u020e\013\u0215\014\u021f" +
    "\015\u0216\016\u0212\017\u020d\020\u020f\021\u0214\022\u0211\150" +
    "\u021d\153\u0338\164\u033b\165\u033a\203\026\211\u0213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\316\160\u033e\001\001\000\002" +
    "\001\001\000\004\156\u0341\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\u0343\004\011\011\027\012\004" +
    "\013\016\014\035\015\020\016\013\017\005\020\006\021" +
    "\014\022\012\150\033\203\026\211\015\001\001\000\002" +
    "\001\001\000\040\003\u0345\004\011\011\027\012\004\013" +
    "\016\014\035\015\020\016\013\017\005\020\006\021\014" +
    "\022\012\150\033\203\026\211\015\001\001\000\002\001" +
    "\001\000\040\003\u0347\004\011\011\027\012\004\013\016" +
    "\014\035\015\020\016\013\017\005\020\006\021\014\022" +
    "\012\150\033\203\026\211\015\001\001\000\002\001\001" +
    "\000\040\003\u0349\004\011\011\027\012\004\013\016\014" +
    "\035\015\020\016\013\017\005\020\006\021\014\022\012" +
    "\150\033\203\026\211\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\u034c\004\011\011\027\012\004" +
    "\013\016\014\035\015\020\016\013\017\005\020\006\021" +
    "\014\022\012\150\033\203\026\211\015\001\001\000\002" +
    "\001\001\000\006\023\360\131\u034e\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\u03bb\027\u03ba\030\117" +
    "\041\u03b8\042\u03b7\044\u03b6\045\u03b5\110\u0368\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\u0354\102\255" +
    "\001\001\000\002\001\001\000\006\023\u0356\053\u0357\001" +
    "\001\000\004\055\u03b1\001\001\000\006\057\u035c\060\u035b" +
    "\001\001\000\004\061\u03b0\001\001\000\002\001\001\000" +
    "\004\061\u03af\001\001\000\002\001\001\000\004\063\u0360" +
    "\001\001\000\004\061\u035e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\u0362\001\001\000\002\001\001" +
    "\000\004\074\u0364\001\001\000\014\023\u0370\045\u036e\075" +
    "\u0395\103\u0394\110\u0368\001\001\000\004\077\u0366\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\u0370\045" +
    "\u036e\103\u036d\110\u0368\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u0383\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\u0375\026\u0373\050\u0374\001\001\000\004\047\u037a\001\001" +
    "\000\002\001\001\000\004\047\u0377\001\001\000\010\023" +
    "\u0375\026\u0373\050\u0378\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\u037f\051\u0380\102\u037e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0381\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\u0385\001\001\000\004\023\u0386\001\001\000\002\001" +
    "\001\000\004\100\u0387\001\001\000\002\001\001\000\010" +
    "\046\u0389\051\u0380\102\u037e\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\u038c\051\u0380\102\u037e\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\u038f\051" +
    "\u0380\102\u037e\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\u0392\051\u0380\102\u037e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\u0396\001\001\000\002" +
    "\001\001\000\004\026\u0397\001\001\000\006\066\u0399\076" +
    "\u0398\001\001\000\002\001\001\000\014\023\u0370\045\u036e" +
    "\075\u039a\103\u0394\110\u0368\001\001\000\002\001\001\000" +
    "\004\023\u039c\001\001\000\004\073\u039e\001\001\000\004" +
    "\023\u039f\001\001\000\002\001\001\000\004\073\u03a0\001" +
    "\001\000\002\001\001\000\004\023\u03a2\001\001\000\004" +
    "\055\u03a5\001\001\000\002\001\001\000\004\056\u03ae\001" +
    "\001\000\002\001\001\000\004\023\u03a7\001\001\000\002" +
    "\001\001\000\004\023\u03a9\001\001\000\010\057\u03aa\060" +
    "\u035b\062\u03ab\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u03b3\001\001" +
    "\000\006\023\u0356\053\u03b4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u03bf\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\u03c3\001\001\000\004\043\u03c1\001" +
    "\001\000\022\023\u03bb\027\u03ba\030\117\041\u03c2\042\u03b7" +
    "\044\u03b6\045\u03b5\110\u0368\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\u03c7\044\u03c6" +
    "\045\u03c5\110\u0368\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\u03c9\004\011\011\027" +
    "\012\004\013\016\014\035\015\020\016\013\017\005\020" +
    "\006\021\014\022\012\150\033\203\026\211\015\001\001" +
    "\000\002\001\001\000\040\003\u03cb\004\011\011\027\012" +
    "\004\013\016\014\035\015\020\016\013\017\005\020\006" +
    "\021\014\022\012\150\033\203\026\211\015\001\001\000" +
    "\002\001\001\000\040\003\u03cd\004\011\011\027\012\004" +
    "\013\016\014\035\015\020\016\013\017\005\020\006\021" +
    "\014\022\012\150\033\203\026\211\015\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private String errors_list = ""; 

    public String getErrorString(){
        return errors_list;
    }

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public String symbl_name_from_id(int id){
    Field[] fields = getSymbolContainer().getFields();
    for(Field f : fields){
        try {
                    if (f.getInt(null)==id)
              return f.getName();
        } catch (IllegalArgumentException e) {
            //e.printStackTrace();
        } catch (IllegalAccessException ex) { 
                        //e.printStackTrace();
                } 
      }
    return "invalid symbol id";
    }

    public void syntax_error(Symbol s){
        this.s=s; 
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
        }
        errors_list += "Line: " + (s.right + 1) + " and column: " + (s.left + 1) + ", '" + s.value +"', Error: missing symbol " + list + "\n";
        System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" linea "+(s.right+1)+"tokens esperados"+list+"\n\n" );  
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
    int parse_state = ((Symbol)stack.peek()).parse_state ;
    short[] row = action_tab[parse_state];
    for (int i = 0; i<row.length; i+=2){
            if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
    }
    return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
    short lhs,rhs_size;
    int act;
    try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            /* parse until we fail or get past the lookahead input */
            for (;;)
            {
                /* look up the action from the current state (on top of stack) */
                act = get_action(vstack.top(), id);
                
                /* if its an error, we fail */
        if (act == 0) return false;

            /* > 0 encodes a shift */
        if (act > 0){
                    /* push the new state on the stack */
                    vstack.push(act-1);

                /* advance simulated input, if we run off the end, we are done */
                    if (!advance_lookahead()) return true;
                }
                /* < 0 encodes a reduce */
        else
        {
                    /* if this is a reduce with the start production we are done */
                    if ((-act)-1 == start_production())  return true;

                    /* get the lhs Symbol and the rhs size */
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    /* pop handle off the stack */
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
    } catch (Exception e) {
            e.printStackTrace();
    }
    return true;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        List<Integer> ids = new LinkedList<>();
        ids=expected_token_ids();
    LinkedList<String> list = new LinkedList<String>();
    for (Integer expected : ids){
            list.add(symbl_name_from_id(expected));
            list.add("\n");
        }

        errors_list += "Line: " + (s.right + 1) + " and column: " + (s.left + 1) + ", '" + s.value +"', Non recuperable error: missing symbol " + list + "\n";
        System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" linea "+(s.right+1)+"tokens esperados"+list+"\n\n" );   
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // num_list2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list2",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // num_list2 ::= COMA num_list3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list2",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // num_list3 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list3",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // num_list3 ::= ARROBA ID num_list2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list3",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // num_list3 ::= tipo_dato num_list2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list3",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // execute ::= clause_exc obj_n num_list3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("execute",135, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // set_item1 ::= PASSWORD IGUAL STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item1",231, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // set_item1 ::= LOGIN IGUAL ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item1",231, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // set_item1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item1",231, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // set_item1 ::= DEFAULT_SCHEMA IGUAL ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item1",231, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // set_item1 ::= NAME IGUAL ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item1",231, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // set_item2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item2",232, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // set_item2 ::= COMA set_item 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item2",232, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // set_item ::= set_item1 set_item2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("set_item",230, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // user_alter ::= ID WITH set_item 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("user_alter",229, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // user_alter ::= ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("user_alter",229, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // constraint5 ::= IDENTITY PARENTESIS_ABIERTO num COMA num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // constraint5 ::= DEFAULT data_tipo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // constraint5 ::= CHECK PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // constraint5 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // constraint5 ::= FOREIGN KEY PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO REFERENCES obj_n PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // constraint5 ::= PRIMARY KEY constraint4 constraint3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // constraint5 ::= UNIQUE constraint3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // constraint5 ::= NULL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint5",233, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // drop_column ::= INDEX list_id 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_column",228, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // drop_column ::= COLUMN list_id 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_column",228, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // drop_column ::= CONSTRAINT list_id 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_column",228, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // add_column5 ::= obj_n data_tipo constraint 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column5",226, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // add_column6 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column6",225, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // add_column6 ::= COMA tipo_add 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column6",225, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // add_column7 ::= add_column5 add_column6 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column7",227, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // tipo_add ::= FOREIGN KEY PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO REFERENCES obj_n PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_add",224, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // tipo_add ::= add_column7 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_add",224, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // tipo_add ::= CONSTRAINT obj_n constraint5 add_column6 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_add",224, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // accion_alter ::= DROP drop_column 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("accion_alter",223, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // accion_alter ::= ADD tipo_add 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("accion_alter",223, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // accion_alter ::= ALTER COLUMN add_column5 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("accion_alter",223, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // table ::= obj_n accion_alter 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("table",222, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // accion_index ::= USABLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("accion_index",221, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // accion_index ::= UNUSABLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("accion_index",221, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // accion_index ::= REBUILD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("accion_index",221, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // accion_index ::= DISABLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("accion_index",221, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // nombre_index ::= ALL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("nombre_index",220, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // nombre_index ::= obj_n 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("nombre_index",220, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // index ::= nombre_index ON obj_n accion_index 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("index",219, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // tipo_alter_base ::= SET ROLLBACK INMEDIATE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",218, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // tipo_alter_base ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",218, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // tipo_alter_base ::= MODIFY NAME IGUAL ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",218, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // nombre_actual ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("nombre_actual",217, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // nombre_actual ::= ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("nombre_actual",217, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // database ::= nombre_actual tipo_alter_base 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("database",216, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // opciones ::= function 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones",215, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // opciones ::= procedure 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones",215, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // opciones ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones",215, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // opciones ::= USER user_alter 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones",215, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // opciones ::= TABLE table 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones",215, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // opciones ::= INDEX index 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones",215, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // opciones ::= DATABASE database 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones",215, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // alter ::= ALTER opciones 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("alter",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // column_view1 ::= obj_n 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_view1",206, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // column_view2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_view2",207, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // column_view2 ::= column_view1 COMA column_view 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_view2",207, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // column_view ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_view",205, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // column_view ::= column_view1 column_view2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_view",205, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // view_create ::= obj_n column_view AS select 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("view_create",204, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // option_user ::= ALLOW_ENCRYPTED_VALUE_MODIFICATIONS IGUAL on_off 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("option_user",203, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // option_user ::= DEFAULT_SCHEMA IGUAL ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("option_user",203, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // limited_options1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("limited_options1",202, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // limited_options1 ::= COMA limited_options 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("limited_options1",202, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // limited_options ::= option_user limited_options1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("limited_options",201, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // with_user ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("with_user",200, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // with_user ::= WITH limited_options 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("with_user",200, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // for_from ::= FROM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_from",199, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // for_from ::= FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_from",199, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // for_user ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_user",198, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // for_user ::= for_from LOGIN ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_user",198, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // user_create ::= ID for_user with_user 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("user_create",197, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // primary2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary2",166, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // primary2 ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary2",166, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // expresion_logica1 ::= obj_n operadores2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion_logica1",195, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // expresion_logica2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion_logica2",196, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // expresion_logica2 ::= operadores_logicos expresion_logica 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion_logica2",196, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // expresion_logica ::= expresion_logica1 expresion_logica2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion_logica",194, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // list_id2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_id2",211, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // list_id2 ::= COMA list_id 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_id2",211, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // list_id ::= ID tipo_orden list_id2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_id",210, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // constraint4 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint4",213, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // constraint4 ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint4",213, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // constraint4 ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint4",213, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // constraint3 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint3",212, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // constraint3 ::= PARENTESIS_ABIERTO list_id PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint3",212, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // constraint1 ::= IDENTITY PARENTESIS_ABIERTO num COMA num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // constraint1 ::= DEFAULT data_tipo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // constraint1 ::= CHECK PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // constraint1 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // constraint1 ::= FOREIGN KEY PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO REFERENCES obj_n PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // constraint1 ::= PRIMARY KEY constraint4 constraint3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // constraint1 ::= UNIQUE constraint3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // constraint1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint1",192, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // constraint2 ::= constraint 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint2",193, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // constraint ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint",191, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // constraint ::= constraint1 constraint2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constraint",191, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // longitud ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("longitud",214, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // longitud ::= PARENTESIS_ABIERTO num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("longitud",214, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // data_tipo ::= NUMERIC PARENTESIS_ABIERTO num COMA num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // data_tipo ::= DECIMAL PARENTESIS_ABIERTO num COMA num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // data_tipo ::= INT_P longitud 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // data_tipo ::= BIT_P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // data_tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // data_tipo ::= MONEY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // data_tipo ::= FLOAT_P PARENTESIS_ABIERTO num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // data_tipo ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // data_tipo ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // data_tipo ::= TIME 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // data_tipo ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // data_tipo ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // data_tipo ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // data_tipo ::= DATE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // data_tipo ::= VARBINARY PARENTESIS_ABIERTO MAX PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // data_tipo ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // data_tipo ::= IMAGE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // data_tipo ::= TEXT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // data_tipo ::= NVARCHAR PARENTESIS_ABIERTO num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // data_tipo ::= VARCHAR PARENTESIS_ABIERTO num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // data_tipo ::= CHAR PARENTESIS_ABIERTO num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("data_tipo",190, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // add_column1 ::= FOREIGN KEY PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO REFERENCES obj_n PARENTESIS_ABIERTO obj_n PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column1",188, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // add_column1 ::= PRIMARY KEY constraint4 constraint3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column1",188, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // add_column1 ::= CONSTRAINT ID constraint1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column1",188, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // add_column1 ::= obj_n data_tipo constraint 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column1",188, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // add_column2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column2",189, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // add_column2 ::= COMA add_column 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column2",189, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // add_column ::= add_column1 add_column2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("add_column",187, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // table_create ::= obj_n PARENTESIS_ABIERTO add_column PARENTESIS_CERRADO primary2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("table_create",186, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // mas_index ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mas_index",185, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // mas_index ::= INCLUDE PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mas_index",185, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // column_index1 ::= obj_n tipo_orden 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_index1",183, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // column_index2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_index2",184, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // column_index2 ::= COMA column_index 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_index2",184, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // column_index ::= column_index1 column_index2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_index",182, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // index_create ::= obj_n ON obj_n PARENTESIS_ABIERTO column_index PARENTESIS_CERRADO mas_index 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("index_create",181, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // opciones_index ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_index",180, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // opciones_index ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_index",180, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // filegrowth1 ::= RES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filegrowth1",179, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // filegrowth1 ::= size1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filegrowth1",179, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // filegrowth ::= FILEGROWTH IGUAL num filegrowth1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filegrowth",178, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // maxsize1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("maxsize1",177, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // maxsize1 ::= num size1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("maxsize1",177, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // maxsize ::= MAXSIZE IGUAL maxsize1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("maxsize",176, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // size1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("size1",175, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // size1 ::= TB 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("size1",175, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // size1 ::= GB 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("size1",175, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // size1 ::= MB 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("size1",175, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // size1 ::= KB 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("size1",175, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // size ::= SIZE IGUAL num size1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("size",174, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // optional1 ::= optionals 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("optional1",173, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // optional ::= filegrowth 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("optional",172, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // optional ::= maxsize 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("optional",172, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // optional ::= size 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("optional",172, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // optionals ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("optionals",171, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // optionals ::= COMA optional optional1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("optionals",171, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // filename ::= FILES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filename",170, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // filename ::= FILENAME 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filename",170, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // filename ::= FILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filename",170, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // names ::= NAMES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("names",209, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // names ::= NAME 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("names",209, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // filespec2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filespec2",169, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // filespec2 ::= COMA filespec1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filespec2",169, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // filespec1 ::= PARENTESIS_ABIERTO names IGUAL STRING COMA filename IGUAL STRING optionals PARENTESIS_CERRADO filespec2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("filespec1",168, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // primary ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary",165, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary",165, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // db_create ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("db_create",167, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // db_create ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("db_create",167, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // db_create ::= ON primary filespec1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("db_create",167, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // database_create ::= obj_n db_create 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("database_create",164, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // func_proc ::= function 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_proc",208, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // func_proc ::= procedure 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_proc",208, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // opciones_crear ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_crear",163, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // opciones_crear ::= USER user_create 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_crear",163, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // opciones_crear ::= TABLE table_create 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_crear",163, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // opciones_crear ::= opciones_index constraint4 INDEX index_create 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_crear",163, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // opciones_crear ::= DATABASE database_create 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_crear",163, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // porsiacaso ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("porsiacaso",162, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // porsiacaso ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("porsiacaso",162, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // create_f_sp ::= CREATE porsiacaso func_proc 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("create_f_sp",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // create ::= CREATE opciones_crear 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("create",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // column_list1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_list1",161, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // column_list1 ::= COMA column_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_list1",161, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // column_list ::= ID column_list1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("column_list",160, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // for_update1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_update1",159, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // for_update1 ::= OF column_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_update1",159, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // for_update ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_update",158, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // for_update ::= FOR UPDATE for_update1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("for_update",158, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // cursor7 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor7",157, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // cursor7 ::= INSENSITIVE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor7",157, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // cursor6 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor6",156, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // cursor6 ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor6",156, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // cursor5 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor5",155, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // cursor5 ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor5",155, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // cursor4 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor4",154, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // cursor4 ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor4",154, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // cursor4 ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor4",154, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // cursor4 ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor4",154, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // cursor3 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor3",153, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // cursor3 ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor3",153, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // cursor3 ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor3",153, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // cursor3 ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor3",153, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // cursor3 ::= STATIC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor3",153, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // cursor2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor2",152, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // cursor2 ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor2",152, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // cursor2 ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor2",152, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // cursor1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor1",151, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // cursor1 ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor1",151, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // cursor1 ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor1",151, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // cursor ::= DECLARE ID cursor7 cursor6 CURSOR cursor1 cursor2 cursor3 cursor4 cursor5 FOR select for_update 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cursor",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // tipo_retorno ::= ARROBA ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",150, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // tipo_retorno ::= tipo_dato 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",150, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // return ::= RETURN PARENTESIS_ABIERTO tipo_retorno PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("return",149, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // return ::= RETURN tipo_retorno 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("return",149, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtFun ::= BEGIN select EndStmt return END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtFun",148, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // input ::= ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("input",147, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // fun_op ::= INLINE on_off 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("fun_op",146, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // fun_op ::= CALLED input 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("fun_op",146, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // fun_op ::= RETURNS NULL input 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("fun_op",146, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // fun_op ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("fun_op",146, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // fun_op ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("fun_op",146, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // fun_op ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("fun_op",146, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // with2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("with2",145, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // with2 ::= COMA with1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("with2",145, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // with1 ::= fun_op with2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("with1",144, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // with3 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("with3",143, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // with3 ::= WITH with1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("with3",143, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // readonly ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("readonly",142, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // readonly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("readonly",142, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // as ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("as",141, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // as ::= AS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("as",141, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // paramF2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramF2",140, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // paramF2 ::= COMA paramF1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramF2",140, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // paramF1 ::= ARROBA ID as data_tipo paramSP1 readonly paramF2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramF1",139, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // paramF ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramF",138, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // paramF ::= paramF1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramF",138, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // function ::= FUNCTION obj_n PARENTESIS_ABIERTO paramF PARENTESIS_CERRADO RETURNS data_tipo with3 as stmtFun 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("function",137, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // startSP2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("startSP2",134, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // startSP2 ::= startSP1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("startSP2",134, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // startSP1 ::= Stmt2 startSP2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("startSP1",133, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // startSP ::= AS BEGIN startSP1 END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("startSP",132, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // replicationSP ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("replicationSP",131, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // replicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("replicationSP",131, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // clause ::= ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("clause",130, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("clause",130, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("clause",130, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("clause",130, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // clause_exc ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("clause_exc",129, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // clause_exc ::= EXEC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("clause_exc",129, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // sp_op3 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op3",128, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // sp_op3 ::= COMA sp_op1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op3",128, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // sp_op2 ::= clause_exc AS clause 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op2",127, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // sp_op2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op2",127, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // sp_op2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op2",127, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // sp_op1 ::= sp_op2 sp_op3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op1",126, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // sp_op ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op",125, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // sp_op ::= WITH sp_op1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sp_op",125, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // paramSP3 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP3",124, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // paramSP3 ::= COMA paramSP 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP3",124, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // paramSP2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP2",123, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // paramSP2 ::= tipo_out 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP2",123, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // paramSP1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP1",122, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // paramSP1 ::= IGUAL DEFAULT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP1",122, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // tipo_out ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_out",121, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // tipo_out ::= OUT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_out",121, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // tipoParam ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipoParam",120, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // tipoParam ::= data_tipo paramSP1 paramSP2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipoParam",120, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // tipoParam ::= CURSOR VARYING tipo_out 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipoParam",120, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // paramSP ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP",119, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // paramSP ::= ARROBA ID tipoParam paramSP3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("paramSP",119, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // numSp ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("numSp",118, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // numSp ::= PUNTO_COMA num 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("numSp",118, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // procedure ::= proc obj_n numSp paramSP sp_op replicationSP startSP 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("procedure",117, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // proc ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("proc",136, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // proc ::= PROC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("proc",136, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // savepoint ::= SAVE T2 T6 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("savepoint",105, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // rollback ::= ROLLBACK T2 T6 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("rollback",104, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // on_off ::= OFF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("on_off",113, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // on_off ::= ON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("on_off",113, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // T7 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T7",111, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // T7 ::= WITH PARENTESIS_ABIERTO DELAYED_DURABILITY IGUAL on_off PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T7",111, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // T6 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T6",110, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // T6 ::= ARROBA ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T6",110, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // T6 ::= obj_n 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T6",110, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // T5 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T5",109, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // T5 ::= T2 T6 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T5",109, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // commit ::= COMMIT T5 T7 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("commit",103, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // end_tran ::= rollback EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("end_tran",116, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // end_tran ::= commit EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("end_tran",116, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // begin_tran2 ::= begin_tran 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("begin_tran2",115, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // begin_tran ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("begin_tran",114, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // begin_tran ::= savepoint begin_tran2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("begin_tran",114, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // begin_tran ::= Stmt2 begin_tran2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("begin_tran",114, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // T4 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T4",108, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // T4 ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T4",108, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // T3 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T3",107, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // T3 ::= WITH MARK T4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T3",107, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // T2 ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T2",106, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // T2 ::= TRAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T2",106, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // transaction ::= BEGIN T2 T6 T3 EndStmt begin_tran 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("transaction",102, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // opciones_delete ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_delete",85, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // opciones_delete ::= TOP expresion porcentaje 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_delete",85, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // delete1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("delete1",86, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // delete1 ::= FROM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("delete1",86, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // delete ::= DELETE opciones_delete delete1 obj_n condicionales 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("delete",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // porcentaje ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("porcentaje",84, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // porcentaje ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("porcentaje",84, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // opciones_update ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_update",83, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // opciones_update ::= TOP expresion porcentaje 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opciones_update",83, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // asignaciones1 ::= aritmetica 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignaciones1",81, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // asignaciones1 ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignaciones1",81, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // asignaciones2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignaciones2",82, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // asignaciones2 ::= COMA obj_n IGUAL asignaciones 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignaciones2",82, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // asignaciones ::= asignaciones1 asignaciones2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignaciones",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // update ::= UPDATE opciones_update obj_n SET obj_n IGUAL asignaciones condicionales 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("update",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // val_ins1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("val_ins1",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // val_ins1 ::= COMA val_ins 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("val_ins1",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // val_ins ::= tipo_dato val_ins1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("val_ins",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // valores1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores1",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // valores1 ::= COMA valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores1",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // valores ::= PARENTESIS_ABIERTO val_ins PARENTESIS_CERRADO valores1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // insercion ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("insercion",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // insercion ::= VALUES valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("insercion",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // campo1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("campo1",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // campo1 ::= COMA campo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("campo1",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // campo ::= ID campo1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("campo",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // seleccion2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("seleccion2",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // seleccion2 ::= PARENTESIS_ABIERTO campo PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("seleccion2",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // into ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("into",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // into ::= INTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("into",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // insert ::= INSERT into obj_n seleccion2 insercion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("insert",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // drop_user ::= USER if_op ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_user",101, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // view_list1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("view_list1",100, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // view_list1 ::= COMA view_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("view_list1",100, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // view_list ::= obj_n view_list1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("view_list",99, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // drop_view ::= VIEW if_op view_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_view",98, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // index_list1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("index_list1",97, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // index_list1 ::= COMA index_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("index_list1",97, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // index_list ::= obj_n ON obj_n index_list1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("index_list",96, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // drop_index ::= INDEX if_op index_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_index",95, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // db_list1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("db_list1",94, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // db_list1 ::= COMA db_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("db_list1",94, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // db_list ::= obj_n db_list1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("db_list",93, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // drop_db ::= DATABASE if_op db_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_db",92, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // drop_table ::= TABLE if_op list_table 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_table",91, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // if_op ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_op",90, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // if_op ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_op",90, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // drop_name ::= drop_user 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_name",89, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // drop_name ::= drop_db 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_name",89, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // drop_name ::= drop_index 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_name",89, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // drop_name ::= drop_table 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_name",89, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // drop_name ::= drop_view 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop_name",89, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // drop ::= DROP drop_name 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("drop",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // orden_name ::= funciones 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("orden_name",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // orden_name ::= obj_n 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("orden_name",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // tipo_orden ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_orden",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // tipo_orden ::= DESC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_orden",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // tipo_orden ::= ASC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_orden",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // orden1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("orden1",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // orden1 ::= COMA obj_n orden1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("orden1",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // orden ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("orden",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // orden ::= ORDER BY orden_name tipo_orden orden1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("orden",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // teniendo2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("teniendo2",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // teniendo2 ::= operadores_logicos teniendo1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("teniendo2",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // teniendo1 ::= orden_name operadores tipo_dato teniendo2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("teniendo1",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // teniendo ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("teniendo",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // teniendo ::= HAVING teniendo1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("teniendo",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // agrupado1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("agrupado1",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // agrupado1 ::= COMA obj_n agrupado1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("agrupado1",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // agrupado ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("agrupado",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // agrupado ::= GROUP BY obj_n agrupado1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("agrupado",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // num_list1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list1",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // num_list1 ::= COMA num_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list1",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // num_list ::= tipo_dato num_list1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num_list",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // operadores3 ::= IN PARENTESIS_ABIERTO num_list PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores3",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // operadores ::= BETWEEN num AND num 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operadores ::= LIKE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operadores ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operadores ::= IGUAL_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operadores ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operadores ::= MAYOR_O_IGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operadores ::= MENOR_O_IGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operadores ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operadores ::= MENOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operadores2 ::= operadores3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores2",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operadores2 ::= operadores tipo_retorno 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores2",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operadores_logicos ::= OR_O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operadores_logicos ::= AND_O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // otra_condicion ::= obj_n operadores2 condicionales1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("otra_condicion",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // condicionales1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condicionales1",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // condicionales1 ::= operadores_logicos otra_condicion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condicionales1",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condicionales ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condicionales",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condicionales ::= WHERE obj_n operadores2 condicionales1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condicionales",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // joins1 ::= joins 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("joins1",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipo_join1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_join1",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo_join1 ::= OUTER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_join1",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo_join ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_join",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo_join ::= FULL tipo_join1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_join",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo_join ::= RIGHT tipo_join1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_join",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipo_join ::= LEFT tipo_join1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_join",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo_join ::= INNER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_join",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // joins ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("joins",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // joins ::= tipo_join JOIN obj_n alias_tabla ON obj_n IGUAL obj_n joins1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("joins",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // opcion_alias ::= ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcion_alias",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // opcion_alias ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcion_alias",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // alias_tabla ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("alias_tabla",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // alias_tabla ::= ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("alias_tabla",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // alias_tabla ::= AS opcion_alias 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("alias_tabla",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // origen1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("origen1",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // origen1 ::= COMA origen 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("origen1",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // origen ::= obj_n alias_tabla origen1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("origen",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // alias_columna ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("alias_columna",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // alias_columna ::= AS opcion_alias 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("alias_columna",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // puede ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("puede",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // puede ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("puede",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor3 ::= obj_n valor2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valor3",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor3 ::= tipo_dato valor2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valor3",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valor2",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor2 ::= COMA valor3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valor2",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor ::= puede obj_n 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valor",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= MULT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valor",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= num 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valor",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // funciones_call ::= obj_n PARENTESIS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones_call",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funciones_call ::= obj_n PARENTESIS_ABIERTO valor3 PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones_call",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // funciones ::= funciones_call 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // funciones ::= MAX PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funciones ::= MIN PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funciones ::= COUNT PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funciones ::= AVG PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // funciones ::= SUM PARENTESIS_ABIERTO valor PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // columna3 ::= funciones 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna3",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // columna3 ::= ARROBA ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna3",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // columna3 ::= obj_n 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna3",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // columna2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna2",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // columna2 ::= COMA columna 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna2",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // columna1 ::= MULT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna1",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // columna1 ::= columna3 IGUAL columna3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna1",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // columna1 ::= aritmetica 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna1",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // columna1 ::= funciones 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna1",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // columna ::= columna1 alias_columna columna2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columna",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= PARENTESIS_ABIERTO num PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= num 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // seleccion ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("seleccion",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // seleccion ::= TOP expresion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("seleccion",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // seleccion ::= ALL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("seleccion",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // seleccion ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("seleccion",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opcion_select ::= seleccion columna 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcion_select",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // select ::= SELECT opcion_select FROM origen joins condicionales agrupado teniendo orden 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("select",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list_tableA ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_tableA",88, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list_tableA ::= COMA list_table 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_tableA",88, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list_table ::= obj_n list_tableA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_table",87, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // truncate ::= TRUNCATE TABLE list_table 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("truncate",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // i ::= obj_n 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("i",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // i ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("i",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // i ::= BIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("i",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // i ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("i",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // C ::= PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("C",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // U ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("U",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // U ::= DIV T 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("U",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // U ::= MULT T 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("U",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T ::= PARENTESIS_ABIERTO aritmetica C U 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= i U 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // X ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("X",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // X ::= MENOS aritmetica 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("X",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // X ::= MAS aritmetica 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("X",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // V ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("V",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // V ::= MENOS aritmetica 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("V",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // V ::= MAS aritmetica 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("V",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // V ::= DIV T X 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("V",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // V ::= MULT T X 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("V",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // aritmetica ::= PARENTESIS_ABIERTO aritmetica C V 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("aritmetica",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aritmetica ::= i V 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("aritmetica",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_dato ::= BIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_dato ::= NULL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_dato ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // obj_n2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("obj_n2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // obj_n2 ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("obj_n2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // obj_n1 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("obj_n1",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // obj_n1 ::= PUNTO ID obj_n2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("obj_n1",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // obj_n ::= ID obj_n1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("obj_n",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // num ::= BIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // num ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("num",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EndStmt ::= GO_PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EndStmt",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EndStmt ::= PUNTO_COMA_GO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EndStmt",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EndStmt ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EndStmt",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EndStmt ::= GO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EndStmt",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StmtDDL ::= drop EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDDL",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StmtDDL ::= truncate EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDDL",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StmtDDL ::= create_f_sp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDDL",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StmtDDL ::= create EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDDL",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StmtDDL ::= alter EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDDL",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StmtDML ::= delete EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDML",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StmtDML ::= update EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDML",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // StmtDML ::= insert EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDML",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // StmtDML ::= select EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("StmtDML",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stmt2 ::= error EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt2 ::= USE obj_n EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt2 ::= execute EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt2 ::= transaction end_tran 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt2 ::= GO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt2 ::= cursor EndStmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt2 ::= StmtDDL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt2 ::= StmtDML 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= USE obj_n EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= GO general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= error EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stmt ::= execute EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stmt ::= transaction end_tran general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmt ::= cursor EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmt ::= drop EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stmt ::= truncate EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stmt ::= create_f_sp general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmt ::= create EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmt ::= alter EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmt ::= delete EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stmt ::= update EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stmt ::= insert EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stmt ::= select EndStmt general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Stmt",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // general ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("general",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // general ::= Stmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("general",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= general 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

